// Code generated by Aiven. DO NOT EDIT.

package projectkeymanagement

import (
	"context"
	"encoding/json"
	"fmt"
)

type Handler interface {
	// ProjectKmsGetCA retrieve project CA certificate
	// GET /project/{project}/kms/ca
	// https://api.aiven.io/doc/#tag/Project_Key_Management/operation/ProjectKmsGetCA
	ProjectKmsGetCA(ctx context.Context, project string) (string, error)
}

func NewHandler(doer doer) ProjectKeyManagementHandler {
	return ProjectKeyManagementHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type ProjectKeyManagementHandler struct {
	doer doer
}

func (h *ProjectKeyManagementHandler) ProjectKmsGetCA(ctx context.Context, project string) (string, error) {
	path := fmt.Sprintf("/project/%s/kms/ca", project)
	b, err := h.doer.Do(ctx, "ProjectKmsGetCA", "GET", path, nil)
	out := new(projectKmsGetCaout)
	err = json.Unmarshal(b, out)
	if err != nil {
		return "", err
	}
	return out.Certificate, nil
}

type projectKmsGetCaout struct {
	Certificate string `json:"certificate"`
}
