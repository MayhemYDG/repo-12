// Code generated by Aiven. DO NOT EDIT.

package kafka

import (
	"context"
	"encoding/json"
	"fmt"
)

type Handler interface {
	// AclAdd add a Kafka ACL entry
	// ServiceKafkaAclAdd POST /project/{project}/service/{service_name}/acl
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaAclAdd
	AclAdd(ctx context.Context, project string, serviceName string, in *AclAddIn) ([]Acl, error)

	// AclDelete delete a Kafka ACL entry
	// ServiceKafkaAclDelete DELETE /project/{project}/service/{service_name}/acl/{kafka_acl_id}
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaAclDelete
	AclDelete(ctx context.Context, project string, serviceName string, aclId string) ([]Acl, error)

	// AclList list Kafka ACL entries
	// ServiceKafkaAclList GET /project/{project}/service/{service_name}/acl
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaAclList
	AclList(ctx context.Context, project string, serviceName string) ([]Acl, error)

	// QuotaCreate create Kafka quota
	// ServiceKafkaQuotaCreate POST /project/{project}/service/{service_name}/quota
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaQuotaCreate
	QuotaCreate(ctx context.Context, project string, serviceName string, in *QuotaCreateIn) error

	// QuotaDelete delete Kafka quota
	// ServiceKafkaQuotaDelete DELETE /project/{project}/service/{service_name}/quota
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaQuotaDelete
	QuotaDelete(ctx context.Context, project string, serviceName string) error

	// QuotaDescribe describe Specific Kafka quotas
	// ServiceKafkaQuotaDescribe GET /project/{project}/service/{service_name}/quota/describe
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaQuotaDescribe
	QuotaDescribe(ctx context.Context, project string, serviceName string) (*Quota, error)

	// QuotaList list Kafka quotas
	// ServiceKafkaQuotaList GET /project/{project}/service/{service_name}/quota
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaQuotaList
	QuotaList(ctx context.Context, project string, serviceName string) ([]Quota, error)

	// TieredStorageSummary get the Kafka tiered storage summary
	// ServiceKafkaTieredStorageSummary GET /project/{project}/service/{service_name}/kafka/tiered-storage/summary
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaTieredStorageSummary
	TieredStorageSummary(ctx context.Context, project string, serviceName string) (*TieredStorageSummaryOut, error)

	// TieredStorageUsageByTopic get the Kafka tiered storage object storage usage by topic
	// ServiceKafkaTieredStorageStorageUsageByTopic GET /project/{project}/service/{service_name}/kafka/tiered-storage/storage-usage/by-topic
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaTieredStorageStorageUsageByTopic
	TieredStorageUsageByTopic(ctx context.Context, project string, serviceName string) (map[string]any, error)

	// TieredStorageUsageTotal get the Kafka tiered storage total object storage usage
	// ServiceKafkaTieredStorageStorageUsageTotal GET /project/{project}/service/{service_name}/kafka/tiered-storage/storage-usage/total
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaTieredStorageStorageUsageTotal
	TieredStorageUsageTotal(ctx context.Context, project string, serviceName string) (int, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) AclAdd(ctx context.Context, project string, serviceName string, in *AclAddIn) ([]Acl, error) {
	path := fmt.Sprintf("/project/%s/service/%s/acl", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaAclAdd", "POST", path, in)
	out := new(aclAddOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Acl, nil
}
func (h *handler) AclDelete(ctx context.Context, project string, serviceName string, aclId string) ([]Acl, error) {
	path := fmt.Sprintf("/project/%s/service/%s/acl/%s", project, serviceName, aclId)
	b, err := h.doer.Do(ctx, "ServiceKafkaAclDelete", "DELETE", path, nil)
	out := new(aclDeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Acl, nil
}
func (h *handler) AclList(ctx context.Context, project string, serviceName string) ([]Acl, error) {
	path := fmt.Sprintf("/project/%s/service/%s/acl", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaAclList", "GET", path, nil)
	out := new(aclListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Acl, nil
}
func (h *handler) QuotaCreate(ctx context.Context, project string, serviceName string, in *QuotaCreateIn) error {
	path := fmt.Sprintf("/project/%s/service/%s/quota", project, serviceName)
	_, err := h.doer.Do(ctx, "ServiceKafkaQuotaCreate", "POST", path, in)
	return err
}
func (h *handler) QuotaDelete(ctx context.Context, project string, serviceName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/quota", project, serviceName)
	_, err := h.doer.Do(ctx, "ServiceKafkaQuotaDelete", "DELETE", path, nil)
	return err
}
func (h *handler) QuotaDescribe(ctx context.Context, project string, serviceName string) (*Quota, error) {
	path := fmt.Sprintf("/project/%s/service/%s/quota/describe", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaQuotaDescribe", "GET", path, nil)
	out := new(quotaDescribeOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Quota, nil
}
func (h *handler) QuotaList(ctx context.Context, project string, serviceName string) ([]Quota, error) {
	path := fmt.Sprintf("/project/%s/service/%s/quota", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaQuotaList", "GET", path, nil)
	out := new(quotaListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Quotas, nil
}
func (h *handler) TieredStorageSummary(ctx context.Context, project string, serviceName string) (*TieredStorageSummaryOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/kafka/tiered-storage/summary", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaTieredStorageSummary", "GET", path, nil)
	out := new(TieredStorageSummaryOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) TieredStorageUsageByTopic(ctx context.Context, project string, serviceName string) (map[string]any, error) {
	path := fmt.Sprintf("/project/%s/service/%s/kafka/tiered-storage/storage-usage/by-topic", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaTieredStorageStorageUsageByTopic", "GET", path, nil)
	out := new(tieredStorageUsageByTopicOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.StorageUsage, nil
}
func (h *handler) TieredStorageUsageTotal(ctx context.Context, project string, serviceName string) (int, error) {
	path := fmt.Sprintf("/project/%s/service/%s/kafka/tiered-storage/storage-usage/total", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaTieredStorageStorageUsageTotal", "GET", path, nil)
	out := new(tieredStorageUsageTotalOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return 0, err
	}
	return out.TotalStorageUsage, nil
}

type Acl struct {
	Id         string         `json:"id,omitempty"`
	Permission PermissionType `json:"permission"`
	Topic      string         `json:"topic"`
	Username   string         `json:"username"`
}
type AclAddIn struct {
	Permission PermissionType `json:"permission"`
	Topic      string         `json:"topic"`
	Username   string         `json:"username"`
}
type aclAddOut struct {
	Acl []Acl `json:"acl"`
}
type aclDeleteOut struct {
	Acl []Acl `json:"acl"`
}
type aclListOut struct {
	Acl []Acl `json:"acl"`
}
type Hourly struct {
	EstimatedCost   string `json:"estimated_cost,omitempty"`
	HourStart       string `json:"hour_start"`
	PeakStoredBytes int    `json:"peak_stored_bytes"`
}
type PermissionType string

const (
	PermissionTypeAdmin     PermissionType = "admin"
	PermissionTypeRead      PermissionType = "read"
	PermissionTypeReadwrite PermissionType = "readwrite"
	PermissionTypeWrite     PermissionType = "write"
)

type Quota struct {
	ClientId          string  `json:"client-id,omitempty"`
	ConsumerByteRate  float64 `json:"consumer_byte_rate"`
	ProducerByteRate  float64 `json:"producer_byte_rate"`
	RequestPercentage float64 `json:"request_percentage"`
	User              string  `json:"user"`
}
type QuotaCreateIn struct {
	ClientId          string   `json:"client-id,omitempty"`
	ConsumerByteRate  *float64 `json:"consumer_byte_rate,omitempty"`
	ProducerByteRate  *float64 `json:"producer_byte_rate,omitempty"`
	RequestPercentage *float64 `json:"request_percentage,omitempty"`
	User              string   `json:"user,omitempty"`
}
type quotaDescribeOut struct {
	Quota *Quota `json:"quota"`
}
type quotaListOut struct {
	Quotas []Quota `json:"quotas"`
}
type StorageUsageHistory struct {
	Hourly []Hourly `json:"hourly"`
}
type TieredStorageSummaryOut struct {
	CurrentCost         string               `json:"current_cost"`
	ForecastedCost      string               `json:"forecasted_cost"`
	StorageUsageHistory *StorageUsageHistory `json:"storage_usage_history"`
	TotalStorageUsage   int                  `json:"total_storage_usage"`
}
type tieredStorageUsageByTopicOut struct {
	StorageUsage map[string]any `json:"storage_usage"`
}
type tieredStorageUsageTotalOut struct {
	TotalStorageUsage int `json:"total_storage_usage"`
}
