// Code generated by Aiven. DO NOT EDIT.

package serviceintegrationendpoint

import (
	"context"
	"encoding/json"
	"fmt"
)

type Handler interface {
	// ServiceIntegrationEndpointCreate create a new service integration endpoint
	// POST /project/{project}/integration_endpoint
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationEndpointCreate
	ServiceIntegrationEndpointCreate(ctx context.Context, project string, in *ServiceIntegrationEndpointCreateIn) (*ServiceIntegrationEndpoint, error)

	// ServiceIntegrationEndpointDelete delete a service integration endpoint
	// DELETE /project/{project}/integration_endpoint/{integration_endpoint_id}
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationEndpointDelete
	ServiceIntegrationEndpointDelete(ctx context.Context, project string, integrationEndpointId string) error

	// ServiceIntegrationEndpointGet get service integration endpoint
	// GET /project/{project}/integration_endpoint/{integration_endpoint_id}
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationEndpointGet
	ServiceIntegrationEndpointGet(ctx context.Context, project string, integrationEndpointId string) (*ServiceIntegrationEndpoint, error)

	// ServiceIntegrationEndpointList list available integration endpoints for project
	// GET /project/{project}/integration_endpoint
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationEndpointList
	ServiceIntegrationEndpointList(ctx context.Context, project string) ([]ServiceIntegrationEndpoint, error)

	// ServiceIntegrationEndpointTypes list available service integration endpoint types
	// GET /project/{project}/integration_endpoint_types
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationEndpointTypes
	ServiceIntegrationEndpointTypes(ctx context.Context, project string) ([]EndpointTypeItem, error)

	// ServiceIntegrationEndpointUpdate update service integration endpoint
	// PUT /project/{project}/integration_endpoint/{integration_endpoint_id}
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationEndpointUpdate
	ServiceIntegrationEndpointUpdate(ctx context.Context, project string, integrationEndpointId string, in *ServiceIntegrationEndpointUpdateIn) (*ServiceIntegrationEndpoint, error)
}

func NewHandler(doer doer) ServiceIntegrationEndpointHandler {
	return ServiceIntegrationEndpointHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type ServiceIntegrationEndpointHandler struct {
	doer doer
}

func (h *ServiceIntegrationEndpointHandler) ServiceIntegrationEndpointCreate(ctx context.Context, project string, in *ServiceIntegrationEndpointCreateIn) (*ServiceIntegrationEndpoint, error) {
	path := fmt.Sprintf("/project/%s/integration_endpoint", project)
	b, err := h.doer.Do(ctx, "ServiceIntegrationEndpointCreate", "POST", path, in)
	out := new(serviceIntegrationEndpointCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceIntegrationEndpoint, nil
}
func (h *ServiceIntegrationEndpointHandler) ServiceIntegrationEndpointDelete(ctx context.Context, project string, integrationEndpointId string) error {
	path := fmt.Sprintf("/project/%s/integration_endpoint/%s", project, integrationEndpointId)
	_, err := h.doer.Do(ctx, "ServiceIntegrationEndpointDelete", "DELETE", path, nil)
	return err
}
func (h *ServiceIntegrationEndpointHandler) ServiceIntegrationEndpointGet(ctx context.Context, project string, integrationEndpointId string) (*ServiceIntegrationEndpoint, error) {
	path := fmt.Sprintf("/project/%s/integration_endpoint/%s", project, integrationEndpointId)
	b, err := h.doer.Do(ctx, "ServiceIntegrationEndpointGet", "GET", path, nil)
	out := new(serviceIntegrationEndpointGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceIntegrationEndpoint, nil
}
func (h *ServiceIntegrationEndpointHandler) ServiceIntegrationEndpointList(ctx context.Context, project string) ([]ServiceIntegrationEndpoint, error) {
	path := fmt.Sprintf("/project/%s/integration_endpoint", project)
	b, err := h.doer.Do(ctx, "ServiceIntegrationEndpointList", "GET", path, nil)
	out := new(serviceIntegrationEndpointListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceIntegrationEndpoints, nil
}
func (h *ServiceIntegrationEndpointHandler) ServiceIntegrationEndpointTypes(ctx context.Context, project string) ([]EndpointTypeItem, error) {
	path := fmt.Sprintf("/project/%s/integration_endpoint_types", project)
	b, err := h.doer.Do(ctx, "ServiceIntegrationEndpointTypes", "GET", path, nil)
	out := new(serviceIntegrationEndpointTypesOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.EndpointTypes, nil
}
func (h *ServiceIntegrationEndpointHandler) ServiceIntegrationEndpointUpdate(ctx context.Context, project string, integrationEndpointId string, in *ServiceIntegrationEndpointUpdateIn) (*ServiceIntegrationEndpoint, error) {
	path := fmt.Sprintf("/project/%s/integration_endpoint/%s", project, integrationEndpointId)
	b, err := h.doer.Do(ctx, "ServiceIntegrationEndpointUpdate", "PUT", path, in)
	out := new(serviceIntegrationEndpointUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceIntegrationEndpoint, nil
}

type EndpointType string

const (
	EndpointTypeAutoscaler                   EndpointType = "autoscaler"
	EndpointTypeDatadog                      EndpointType = "datadog"
	EndpointTypeExternalAwsCloudwatchLogs    EndpointType = "external_aws_cloudwatch_logs"
	EndpointTypeExternalAwsCloudwatchMetrics EndpointType = "external_aws_cloudwatch_metrics"
	EndpointTypeExternalAwsS3                EndpointType = "external_aws_s3"
	EndpointTypeExternalClickhouse           EndpointType = "external_clickhouse"
	EndpointTypeExternalElasticsearchLogs    EndpointType = "external_elasticsearch_logs"
	EndpointTypeExternalGoogleCloudBigquery  EndpointType = "external_google_cloud_bigquery"
	EndpointTypeExternalGoogleCloudLogging   EndpointType = "external_google_cloud_logging"
	EndpointTypeExternalKafka                EndpointType = "external_kafka"
	EndpointTypeExternalMysql                EndpointType = "external_mysql"
	EndpointTypeExternalOpensearchLogs       EndpointType = "external_opensearch_logs"
	EndpointTypeExternalPostgresql           EndpointType = "external_postgresql"
	EndpointTypeExternalRedis                EndpointType = "external_redis"
	EndpointTypeExternalSchemaRegistry       EndpointType = "external_schema_registry"
	EndpointTypeJolokia                      EndpointType = "jolokia"
	EndpointTypePrometheus                   EndpointType = "prometheus"
	EndpointTypeRsyslog                      EndpointType = "rsyslog"
)

type EndpointTypeItem struct {
	EndpointType     string         `json:"endpoint_type"`
	ServiceTypes     []string       `json:"service_types"`
	Title            string         `json:"title"`
	UserConfigSchema map[string]any `json:"user_config_schema"`
}
type ServiceIntegrationEndpoint struct {
	EndpointConfig map[string]any `json:"endpoint_config"`
	EndpointId     string         `json:"endpoint_id"`
	EndpointName   string         `json:"endpoint_name"`
	EndpointType   EndpointType   `json:"endpoint_type"`
	UserConfig     map[string]any `json:"user_config"`
}
type ServiceIntegrationEndpointCreateIn struct {
	EndpointName string         `json:"endpoint_name"`
	EndpointType EndpointType   `json:"endpoint_type"`
	UserConfig   map[string]any `json:"user_config"`
}
type serviceIntegrationEndpointCreateOut struct {
	ServiceIntegrationEndpoint *ServiceIntegrationEndpoint `json:"service_integration_endpoint"`
}
type serviceIntegrationEndpointGetOut struct {
	ServiceIntegrationEndpoint *ServiceIntegrationEndpoint `json:"service_integration_endpoint"`
}
type serviceIntegrationEndpointListOut struct {
	ServiceIntegrationEndpoints []ServiceIntegrationEndpoint `json:"service_integration_endpoints"`
}
type serviceIntegrationEndpointTypesOut struct {
	EndpointTypes []EndpointTypeItem `json:"endpoint_types"`
}
type ServiceIntegrationEndpointUpdateIn struct {
	UserConfig map[string]any `json:"user_config"`
}
type serviceIntegrationEndpointUpdateOut struct {
	ServiceIntegrationEndpoint *ServiceIntegrationEndpoint `json:"service_integration_endpoint"`
}
