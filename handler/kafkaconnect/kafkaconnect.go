// Code generated by Aiven. DO NOT EDIT.

package kafkaconnect

import (
	"context"
	"encoding/json"
	"fmt"
)

type Handler interface {
	// CreateConnector create a Kafka Connect connector
	// ServiceKafkaConnectCreateConnector POST /project/{project}/service/{service_name}/connectors
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectCreateConnector
	CreateConnector(ctx context.Context, project string, serviceName string, in *CreateConnectorIn) (*Connector, error)

	// DeleteConnector delete Kafka Connect connector
	// ServiceKafkaConnectDeleteConnector DELETE /project/{project}/service/{service_name}/connectors/{connector_name}
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectDeleteConnector
	DeleteConnector(ctx context.Context, project string, serviceName string, connectorName string) error

	// EditConnector edit Kafka Connect connector
	// ServiceKafkaConnectEditConnector PUT /project/{project}/service/{service_name}/connectors/{connector_name}
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectEditConnector
	EditConnector(ctx context.Context, project string, serviceName string, connectorName string, in *EditConnectorIn) (*Connector, error)

	// GetAvailableConnectors get available Kafka Connect connectors
	// ServiceKafkaConnectGetAvailableConnectors GET /project/{project}/service/{service_name}/available-connectors
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectGetAvailableConnectors
	GetAvailableConnectors(ctx context.Context, project string, serviceName string) ([]Plugin, error)

	// GetConnectorConfiguration get Kafka Connect connector configuration schema
	// ServiceKafkaConnectGetConnectorConfiguration GET /project/{project}/service/{service_name}/connector-plugins/{connector_name}/configuration
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectGetConnectorConfiguration
	GetConnectorConfiguration(ctx context.Context, project string, serviceName string, connectorName string) ([]ConfigurationSchema, error)

	// GetConnectorStatus get a Kafka Connect Connector status
	// ServiceKafkaConnectGetConnectorStatus GET /project/{project}/service/{service_name}/connectors/{connector_name}/status
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectGetConnectorStatus
	GetConnectorStatus(ctx context.Context, project string, serviceName string, connectorName string) (*Status, error)

	// List lists Kafka connectors
	// ServiceKafkaConnectList GET /project/{project}/service/{service_name}/connectors
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectList
	List(ctx context.Context, project string, serviceName string) ([]Connector, error)

	// PauseConnector pause a Kafka Connect Connector
	// ServiceKafkaConnectPauseConnector POST /project/{project}/service/{service_name}/connectors/{connector_name}/pause
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectPauseConnector
	PauseConnector(ctx context.Context, project string, serviceName string, connectorName string) error

	// RestartConnector restart a Kafka Connect Connector
	// ServiceKafkaConnectRestartConnector POST /project/{project}/service/{service_name}/connectors/{connector_name}/restart
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectRestartConnector
	RestartConnector(ctx context.Context, project string, serviceName string, connectorName string) error

	// RestartConnectorTask restart a Kafka Connect Connector task
	// ServiceKafkaConnectRestartConnectorTask POST /project/{project}/service/{service_name}/connectors/{connector_name}/tasks/{task_id}/restart
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectRestartConnectorTask
	RestartConnectorTask(ctx context.Context, project string, serviceName string, connectorName string, taskId string) error

	// ResumeConnector resume a Kafka Connect Connector
	// ServiceKafkaConnectResumeConnector POST /project/{project}/service/{service_name}/connectors/{connector_name}/resume
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectResumeConnector
	ResumeConnector(ctx context.Context, project string, serviceName string, connectorName string) error
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) CreateConnector(ctx context.Context, project string, serviceName string, in *CreateConnectorIn) (*Connector, error) {
	path := fmt.Sprintf("/project/%s/service/%s/connectors", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectCreateConnector", "POST", path, in)
	out := new(CreateConnectorOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Connector, nil
}
func (h *handler) DeleteConnector(ctx context.Context, project string, serviceName string, connectorName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s", project, serviceName, connectorName)
	_, err := h.doer.Do(ctx, "ServiceKafkaConnectDeleteConnector", "DELETE", path, nil)
	return err
}
func (h *handler) EditConnector(ctx context.Context, project string, serviceName string, connectorName string, in *EditConnectorIn) (*Connector, error) {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s", project, serviceName, connectorName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectEditConnector", "PUT", path, in)
	out := new(EditConnectorOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Connector, nil
}
func (h *handler) GetAvailableConnectors(ctx context.Context, project string, serviceName string) ([]Plugin, error) {
	path := fmt.Sprintf("/project/%s/service/%s/available-connectors", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectGetAvailableConnectors", "GET", path, nil)
	out := new(GetAvailableConnectorsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Plugins, nil
}
func (h *handler) GetConnectorConfiguration(ctx context.Context, project string, serviceName string, connectorName string) ([]ConfigurationSchema, error) {
	path := fmt.Sprintf("/project/%s/service/%s/connector-plugins/%s/configuration", project, serviceName, connectorName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectGetConnectorConfiguration", "GET", path, nil)
	out := new(GetConnectorConfigurationOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ConfigurationSchema, nil
}
func (h *handler) GetConnectorStatus(ctx context.Context, project string, serviceName string, connectorName string) (*Status, error) {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s/status", project, serviceName, connectorName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectGetConnectorStatus", "GET", path, nil)
	out := new(GetConnectorStatusOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Status, nil
}
func (h *handler) List(ctx context.Context, project string, serviceName string) ([]Connector, error) {
	path := fmt.Sprintf("/project/%s/service/%s/connectors", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectList", "GET", path, nil)
	out := new(ListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Connectors, nil
}
func (h *handler) PauseConnector(ctx context.Context, project string, serviceName string, connectorName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s/pause", project, serviceName, connectorName)
	_, err := h.doer.Do(ctx, "ServiceKafkaConnectPauseConnector", "POST", path, nil)
	return err
}
func (h *handler) RestartConnector(ctx context.Context, project string, serviceName string, connectorName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s/restart", project, serviceName, connectorName)
	_, err := h.doer.Do(ctx, "ServiceKafkaConnectRestartConnector", "POST", path, nil)
	return err
}
func (h *handler) RestartConnectorTask(ctx context.Context, project string, serviceName string, connectorName string, taskId string) error {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s/tasks/%s/restart", project, serviceName, connectorName, taskId)
	_, err := h.doer.Do(ctx, "ServiceKafkaConnectRestartConnectorTask", "POST", path, nil)
	return err
}
func (h *handler) ResumeConnector(ctx context.Context, project string, serviceName string, connectorName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s/resume", project, serviceName, connectorName)
	_, err := h.doer.Do(ctx, "ServiceKafkaConnectResumeConnector", "POST", path, nil)
	return err
}

type Config struct {
	ConnectorClass string `json:"connector.class,omitempty"`
	Name           string `json:"name"`
}
type ConfigurationSchema struct {
	Type          ConfigurationSchemaType `json:"type"`
	DefaultValue  string                  `json:"default_value"`
	DisplayName   string                  `json:"display_name"`
	Documentation string                  `json:"documentation"`
	Group         string                  `json:"group"`
	Importance    ImportanceType          `json:"importance"`
	Name          string                  `json:"name"`
	Order         int                     `json:"order"`
	Required      bool                    `json:"required"`
	Width         WidthType               `json:"width"`
}
type ConfigurationSchemaType string

const (
	ConfigurationSchemaTypeString   ConfigurationSchemaType = "STRING"
	ConfigurationSchemaTypeInt      ConfigurationSchemaType = "INT"
	ConfigurationSchemaTypeShort    ConfigurationSchemaType = "SHORT"
	ConfigurationSchemaTypeLong     ConfigurationSchemaType = "LONG"
	ConfigurationSchemaTypeDouble   ConfigurationSchemaType = "DOUBLE"
	ConfigurationSchemaTypeBoolean  ConfigurationSchemaType = "BOOLEAN"
	ConfigurationSchemaTypeList     ConfigurationSchemaType = "LIST"
	ConfigurationSchemaTypeClass    ConfigurationSchemaType = "CLASS"
	ConfigurationSchemaTypePassword ConfigurationSchemaType = "PASSWORD"
)

type Connector struct {
	Config *Config `json:"config"`
	Name   string  `json:"name"`
	Plugin *Plugin `json:"plugin"`
	Tasks  []Task  `json:"tasks"`
}
type CreateConnectorIn struct {
	ConnectorClass string `json:"connector.class,omitempty"`
	Name           string `json:"name"`
}
type CreateConnectorOut struct {
	Connector *Connector `json:"connector"`
}
type EditConnectorIn struct {
	ConnectorClass string `json:"connector.class,omitempty"`
	Name           string `json:"name"`
}
type EditConnectorOut struct {
	Connector *Connector `json:"connector"`
}
type GetAvailableConnectorsOut struct {
	Plugins []Plugin `json:"plugins"`
}
type GetConnectorConfigurationOut struct {
	ConfigurationSchema []ConfigurationSchema `json:"configuration_schema"`
}
type GetConnectorStatusOut struct {
	Status *Status `json:"status"`
}
type ImportanceType string

const (
	ImportanceTypeLow    ImportanceType = "LOW"
	ImportanceTypeMedium ImportanceType = "MEDIUM"
	ImportanceTypeHigh   ImportanceType = "HIGH"
)

type ListOut struct {
	Connectors []Connector `json:"connectors"`
}
type Plugin struct {
	Author      string `json:"author"`
	Class       string `json:"class"`
	DocUrl      string `json:"docURL"`
	Preview     *bool  `json:"preview,omitempty"`
	PreviewInfo string `json:"preview_info,omitempty"`
	Title       string `json:"title"`
	Type        Type   `json:"type"`
	Version     string `json:"version"`
}
type StateType string

const (
	StateTypeFailed     StateType = "FAILED"
	StateTypePaused     StateType = "PAUSED"
	StateTypeRunning    StateType = "RUNNING"
	StateTypeUnassigned StateType = "UNASSIGNED"
)

type Status struct {
	State StateType  `json:"state"`
	Tasks []TaskItem `json:"tasks"`
}
type Task struct {
	Connector string `json:"connector"`
	Task      int    `json:"task"`
}
type TaskItem struct {
	Id    int       `json:"id"`
	State StateType `json:"state"`
	Trace string    `json:"trace"`
}
type Type string

const (
	TypeSink    Type = "sink"
	TypeSource  Type = "source"
	TypeUnknown Type = "unknown"
)

type WidthType string

const (
	WidthTypeNone   WidthType = "NONE"
	WidthTypeShort  WidthType = "SHORT"
	WidthTypeMedium WidthType = "MEDIUM"
	WidthTypeLong   WidthType = "LONG"
)
