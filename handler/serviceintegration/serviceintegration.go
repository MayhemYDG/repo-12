// Code generated by Aiven. DO NOT EDIT.

package serviceintegration

import (
	"context"
	"encoding/json"
	"fmt"
)

type Handler interface {
	// Create create a new service integration
	// ServiceIntegrationCreate POST /project/{project}/integration
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationCreate
	Create(ctx context.Context, project string, in *CreateIn) (*ServiceIntegration, error)

	// Delete delete a service integration
	// ServiceIntegrationDelete DELETE /project/{project}/integration/{integration_id}
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationDelete
	Delete(ctx context.Context, project string, integrationId string) error

	// Get get service integration
	// ServiceIntegrationGet GET /project/{project}/integration/{integration_id}
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationGet
	Get(ctx context.Context, project string, integrationId string) (*ServiceIntegration, error)

	// List list available integrations for a service
	// ServiceIntegrationList GET /project/{project}/service/{service_name}/integration
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationList
	List(ctx context.Context, project string, serviceName string) ([]ServiceIntegration, error)

	// Types list available service integration types
	// ServiceIntegrationTypes GET /project/{project}/integration_types
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationTypes
	Types(ctx context.Context, project string) ([]IntegrationTypeItem, error)

	// Update update a service integration
	// ServiceIntegrationUpdate PUT /project/{project}/integration/{integration_id}
	// https://api.aiven.io/doc/#tag/Service_Integrations/operation/ServiceIntegrationUpdate
	Update(ctx context.Context, project string, integrationId string, in *UpdateIn) (*ServiceIntegration, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) Create(ctx context.Context, project string, in *CreateIn) (*ServiceIntegration, error) {
	path := fmt.Sprintf("/project/%s/integration", project)
	b, err := h.doer.Do(ctx, "ServiceIntegrationCreate", "POST", path, in)
	out := new(CreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceIntegration, nil
}
func (h *handler) Delete(ctx context.Context, project string, integrationId string) error {
	path := fmt.Sprintf("/project/%s/integration/%s", project, integrationId)
	_, err := h.doer.Do(ctx, "ServiceIntegrationDelete", "DELETE", path, nil)
	return err
}
func (h *handler) Get(ctx context.Context, project string, integrationId string) (*ServiceIntegration, error) {
	path := fmt.Sprintf("/project/%s/integration/%s", project, integrationId)
	b, err := h.doer.Do(ctx, "ServiceIntegrationGet", "GET", path, nil)
	out := new(GetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceIntegration, nil
}
func (h *handler) List(ctx context.Context, project string, serviceName string) ([]ServiceIntegration, error) {
	path := fmt.Sprintf("/project/%s/service/%s/integration", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceIntegrationList", "GET", path, nil)
	out := new(ListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceIntegrations, nil
}
func (h *handler) Types(ctx context.Context, project string) ([]IntegrationTypeItem, error) {
	path := fmt.Sprintf("/project/%s/integration_types", project)
	b, err := h.doer.Do(ctx, "ServiceIntegrationTypes", "GET", path, nil)
	out := new(TypesOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.IntegrationTypes, nil
}
func (h *handler) Update(ctx context.Context, project string, integrationId string, in *UpdateIn) (*ServiceIntegration, error) {
	path := fmt.Sprintf("/project/%s/integration/%s", project, integrationId)
	b, err := h.doer.Do(ctx, "ServiceIntegrationUpdate", "PUT", path, in)
	out := new(UpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceIntegration, nil
}

type CreateIn struct {
	DestEndpointId   string          `json:"dest_endpoint_id,omitempty"`
	DestProject      string          `json:"dest_project,omitempty"`
	DestService      string          `json:"dest_service,omitempty"`
	IntegrationType  IntegrationType `json:"integration_type"`
	SourceEndpointId string          `json:"source_endpoint_id,omitempty"`
	SourceProject    string          `json:"source_project,omitempty"`
	SourceService    string          `json:"source_service,omitempty"`
	UserConfig       map[string]any  `json:"user_config,omitempty"`
}
type CreateOut struct {
	ServiceIntegration *ServiceIntegration `json:"service_integration"`
}
type GetOut struct {
	ServiceIntegration *ServiceIntegration `json:"service_integration"`
}
type IntegrationStatus struct {
	State          *State `json:"state"`
	StatusUserDesc string `json:"status_user_desc"`
}
type IntegrationType string

const (
	IntegrationTypeAlertmanager                      IntegrationType = "alertmanager"
	IntegrationTypeAutoscaler                        IntegrationType = "autoscaler"
	IntegrationTypeCaching                           IntegrationType = "caching"
	IntegrationTypeCassandraCrossServiceCluster      IntegrationType = "cassandra_cross_service_cluster"
	IntegrationTypeClickhouseCredentials             IntegrationType = "clickhouse_credentials"
	IntegrationTypeClickhouseKafka                   IntegrationType = "clickhouse_kafka"
	IntegrationTypeClickhousePostgresql              IntegrationType = "clickhouse_postgresql"
	IntegrationTypeDashboard                         IntegrationType = "dashboard"
	IntegrationTypeDatadog                           IntegrationType = "datadog"
	IntegrationTypeDatasource                        IntegrationType = "datasource"
	IntegrationTypeExternalAwsCloudwatchLogs         IntegrationType = "external_aws_cloudwatch_logs"
	IntegrationTypeExternalAwsCloudwatchMetrics      IntegrationType = "external_aws_cloudwatch_metrics"
	IntegrationTypeExternalElasticsearchLogs         IntegrationType = "external_elasticsearch_logs"
	IntegrationTypeExternalGoogleCloudLogging        IntegrationType = "external_google_cloud_logging"
	IntegrationTypeExternalOpensearchLogs            IntegrationType = "external_opensearch_logs"
	IntegrationTypeFlink                             IntegrationType = "flink"
	IntegrationTypeFlinkExternalBigquery             IntegrationType = "flink_external_bigquery"
	IntegrationTypeFlinkExternalKafka                IntegrationType = "flink_external_kafka"
	IntegrationTypeInternalConnectivity              IntegrationType = "internal_connectivity"
	IntegrationTypeJolokia                           IntegrationType = "jolokia"
	IntegrationTypeKafkaConnect                      IntegrationType = "kafka_connect"
	IntegrationTypeKafkaLogs                         IntegrationType = "kafka_logs"
	IntegrationTypeKafkaMirrormaker                  IntegrationType = "kafka_mirrormaker"
	IntegrationTypeLogs                              IntegrationType = "logs"
	IntegrationTypeM3Aggregator                      IntegrationType = "m3aggregator"
	IntegrationTypeM3Coordinator                     IntegrationType = "m3coordinator"
	IntegrationTypeMetrics                           IntegrationType = "metrics"
	IntegrationTypeOpensearchCrossClusterReplication IntegrationType = "opensearch_cross_cluster_replication"
	IntegrationTypeOpensearchCrossClusterSearch      IntegrationType = "opensearch_cross_cluster_search"
	IntegrationTypePrometheus                        IntegrationType = "prometheus"
	IntegrationTypeReadReplica                       IntegrationType = "read_replica"
	IntegrationTypeRsyslog                           IntegrationType = "rsyslog"
	IntegrationTypeSchemaRegistryProxy               IntegrationType = "schema_registry_proxy"
	IntegrationTypeStresstester                      IntegrationType = "stresstester"
	IntegrationTypeThanoscompactor                   IntegrationType = "thanoscompactor"
	IntegrationTypeThanosquery                       IntegrationType = "thanosquery"
	IntegrationTypeThanosstore                       IntegrationType = "thanosstore"
	IntegrationTypeVector                            IntegrationType = "vector"
	IntegrationTypeVmalert                           IntegrationType = "vmalert"
)

func IntegrationTypeChoices() []string {
	return []string{"alertmanager", "autoscaler", "caching", "cassandra_cross_service_cluster", "clickhouse_credentials", "clickhouse_kafka", "clickhouse_postgresql", "dashboard", "datadog", "datasource", "external_aws_cloudwatch_logs", "external_aws_cloudwatch_metrics", "external_elasticsearch_logs", "external_google_cloud_logging", "external_opensearch_logs", "flink", "flink_external_bigquery", "flink_external_kafka", "internal_connectivity", "jolokia", "kafka_connect", "kafka_logs", "kafka_mirrormaker", "logs", "m3aggregator", "m3coordinator", "metrics", "opensearch_cross_cluster_replication", "opensearch_cross_cluster_search", "prometheus", "read_replica", "rsyslog", "schema_registry_proxy", "stresstester", "thanoscompactor", "thanosquery", "thanosstore", "vector", "vmalert"}
}

type IntegrationTypeItem struct {
	DestDescription    string         `json:"dest_description"`
	DestServiceType    string         `json:"dest_service_type"`
	DestServiceTypes   []string       `json:"dest_service_types"`
	IntegrationType    string         `json:"integration_type"`
	SourceDescription  string         `json:"source_description"`
	SourceServiceTypes []string       `json:"source_service_types"`
	UserConfigSchema   map[string]any `json:"user_config_schema"`
}
type LikelyErrorCauseType string

const (
	LikelyErrorCauseTypeNull        LikelyErrorCauseType = "null"
	LikelyErrorCauseTypeDestination LikelyErrorCauseType = "destination"
	LikelyErrorCauseTypeIntegration LikelyErrorCauseType = "integration"
	LikelyErrorCauseTypeSource      LikelyErrorCauseType = "source"
	LikelyErrorCauseTypeUnknown     LikelyErrorCauseType = "unknown"
)

type ListOut struct {
	ServiceIntegrations []ServiceIntegration `json:"service_integrations"`
}
type ServiceIntegration struct {
	Active               bool               `json:"active"`
	Description          string             `json:"description"`
	DestEndpoint         string             `json:"dest_endpoint,omitempty"`
	DestEndpointId       string             `json:"dest_endpoint_id,omitempty"`
	DestProject          string             `json:"dest_project"`
	DestService          string             `json:"dest_service,omitempty"`
	DestServiceType      string             `json:"dest_service_type"`
	Enabled              bool               `json:"enabled"`
	ServiceIntegrationId string             `json:"service_integration_id"`
	IntegrationStatus    *IntegrationStatus `json:"integration_status,omitempty"`
	IntegrationType      string             `json:"integration_type"`
	SourceEndpoint       string             `json:"source_endpoint,omitempty"`
	SourceEndpointId     string             `json:"source_endpoint_id,omitempty"`
	SourceProject        string             `json:"source_project"`
	SourceService        string             `json:"source_service"`
	SourceServiceType    string             `json:"source_service_type"`
	UserConfig           map[string]any     `json:"user_config,omitempty"`
}
type State struct {
	Errors           []string             `json:"errors"`
	LikelyErrorCause LikelyErrorCauseType `json:"likely_error_cause,omitempty"`
	Nodes            map[string]any       `json:"nodes"`
	Status           StatusType           `json:"status"`
}
type StatusType string

const (
	StatusTypeFailed   StatusType = "failed"
	StatusTypeInactive StatusType = "inactive"
	StatusTypeRunning  StatusType = "running"
	StatusTypeStarting StatusType = "starting"
	StatusTypeUnknown  StatusType = "unknown"
)

type TypesOut struct {
	IntegrationTypes []IntegrationTypeItem `json:"integration_types"`
}
type UpdateIn struct {
	UserConfig map[string]any `json:"user_config"`
}
type UpdateOut struct {
	ServiceIntegration *ServiceIntegration `json:"service_integration"`
}
