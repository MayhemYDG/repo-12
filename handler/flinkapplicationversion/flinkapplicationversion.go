// Code generated by Aiven. DO NOT EDIT.

package flinkapplicationversion

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// Create create a Flink ApplicationVersion
	// ServiceFlinkCreateApplicationVersion POST /project/{project}/service/{service_name}/flink/application/{application_id}/version
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkCreateApplicationVersion
	Create(ctx context.Context, project string, serviceName string, applicationId string, in *CreateIn) (*CreateOut, error)

	// Delete delete a Flink ApplicationVersion
	// ServiceFlinkDeleteApplicationVersion DELETE /project/{project}/service/{service_name}/flink/application/{application_id}/version/{application_version_id}
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkDeleteApplicationVersion
	Delete(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*DeleteOut, error)

	// Get get a Flink ApplicationVersion
	// ServiceFlinkGetApplicationVersion GET /project/{project}/service/{service_name}/flink/application/{application_id}/version/{application_version_id}
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkGetApplicationVersion
	Get(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*GetOut, error)

	// Validate validate a Flink ApplicationVersion
	// ServiceFlinkValidateApplicationVersion POST /project/{project}/service/{service_name}/flink/application/{application_id}/version/validate
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkValidateApplicationVersion
	Validate(ctx context.Context, project string, serviceName string, applicationId string, in *ValidateIn) (*ValidateOut, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) Create(ctx context.Context, project string, serviceName string, applicationId string, in *CreateIn) (*CreateOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/flink/application/%s/version", project, serviceName, applicationId)
	b, err := h.doer.Do(ctx, "ServiceFlinkCreateApplicationVersion", "POST", path, in)
	out := new(CreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) Delete(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*DeleteOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/flink/application/%s/version/%s", project, serviceName, applicationId, applicationVersionId)
	b, err := h.doer.Do(ctx, "ServiceFlinkDeleteApplicationVersion", "DELETE", path, nil)
	out := new(DeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) Get(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*GetOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/flink/application/%s/version/%s", project, serviceName, applicationId, applicationVersionId)
	b, err := h.doer.Do(ctx, "ServiceFlinkGetApplicationVersion", "GET", path, nil)
	out := new(GetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) Validate(ctx context.Context, project string, serviceName string, applicationId string, in *ValidateIn) (*ValidateOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/flink/application/%s/version/validate", project, serviceName, applicationId)
	b, err := h.doer.Do(ctx, "ServiceFlinkValidateApplicationVersion", "POST", path, in)
	out := new(ValidateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type Column struct {
	DataType  string `json:"data_type"`
	Extras    string `json:"extras,omitempty"`
	Key       string `json:"key,omitempty"`
	Name      string `json:"name"`
	Nullable  bool   `json:"nullable"`
	Watermark string `json:"watermark,omitempty"`
}
type CreateIn struct {
	Sinks     []Sink   `json:"sinks"`
	Sources   []Source `json:"sources"`
	Statement string   `json:"statement"`
}
type CreateOut struct {
	CreatedAt time.Time    `json:"created_at"`
	CreatedBy string       `json:"created_by"`
	Id        string       `json:"id"`
	Sinks     []SinkItem   `json:"sinks"`
	Sources   []SourceItem `json:"sources"`
	Statement string       `json:"statement"`
	Version   int          `json:"version"`
}
type DeleteOut struct {
	CreatedAt time.Time    `json:"created_at"`
	CreatedBy string       `json:"created_by"`
	Id        string       `json:"id"`
	Sinks     []SinkItem   `json:"sinks"`
	Sources   []SourceItem `json:"sources"`
	Statement string       `json:"statement"`
	Version   int          `json:"version"`
}
type GetOut struct {
	CreatedAt time.Time    `json:"created_at"`
	CreatedBy string       `json:"created_by"`
	Id        string       `json:"id"`
	Sinks     []SinkItem   `json:"sinks"`
	Sources   []SourceItem `json:"sources"`
	Statement string       `json:"statement"`
	Version   int          `json:"version"`
}
type Position struct {
	CharacterNumber    int `json:"character_number"`
	EndCharacterNumber int `json:"end_character_number"`
	EndLineNumber      int `json:"end_line_number"`
	LineNumber         int `json:"line_number"`
}
type Sink struct {
	CreateTable   string `json:"create_table"`
	IntegrationId string `json:"integration_id,omitempty"`
}
type SinkItem struct {
	Columns       []Column       `json:"columns"`
	CreateTable   string         `json:"create_table"`
	IntegrationId string         `json:"integration_id,omitempty"`
	Options       map[string]any `json:"options"`
	TableId       string         `json:"table_id"`
	TableName     string         `json:"table_name"`
}
type Source struct {
	CreateTable   string `json:"create_table"`
	IntegrationId string `json:"integration_id,omitempty"`
}
type SourceItem struct {
	Columns       []Column       `json:"columns"`
	CreateTable   string         `json:"create_table"`
	IntegrationId string         `json:"integration_id,omitempty"`
	Options       map[string]any `json:"options"`
	TableId       string         `json:"table_id"`
	TableName     string         `json:"table_name"`
}
type StatementError struct {
	Message  string    `json:"message"`
	Position *Position `json:"position,omitempty"`
}
type ValidateIn struct {
	Sinks     []Sink   `json:"sinks"`
	Sources   []Source `json:"sources"`
	Statement string   `json:"statement,omitempty"`
}
type ValidateOut struct {
	Sinks          []ValidateOutSinkItem   `json:"sinks"`
	Sources        []ValidateOutSourceItem `json:"sources"`
	Statement      string                  `json:"statement,omitempty"`
	StatementError *StatementError         `json:"statement_error,omitempty"`
}
type ValidateOutSinkItem struct {
	Columns       []Column       `json:"columns,omitempty"`
	CreateTable   string         `json:"create_table"`
	IntegrationId string         `json:"integration_id,omitempty"`
	Message       string         `json:"message,omitempty"`
	Options       map[string]any `json:"options,omitempty"`
	Position      *Position      `json:"position,omitempty"`
	TableName     string         `json:"table_name,omitempty"`
}
type ValidateOutSourceItem struct {
	Columns       []Column       `json:"columns,omitempty"`
	CreateTable   string         `json:"create_table"`
	IntegrationId string         `json:"integration_id,omitempty"`
	Message       string         `json:"message,omitempty"`
	Options       map[string]any `json:"options,omitempty"`
	Position      *Position      `json:"position,omitempty"`
	TableName     string         `json:"table_name,omitempty"`
}
