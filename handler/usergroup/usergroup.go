// Code generated by Aiven. DO NOT EDIT.

package usergroup

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// Create create a group
	// UserGroupCreate POST /organization/{organization_id}/user-groups
	// https://api.aiven.io/doc/#tag/Groups/operation/UserGroupCreate
	Create(ctx context.Context, organizationId string, in *CreateIn) (*CreateOut, error)

	// Delete delete a group
	// UserGroupDelete DELETE /organization/{organization_id}/user-groups/{user_group_id}
	// https://api.aiven.io/doc/#tag/Groups/operation/UserGroupDelete
	Delete(ctx context.Context, organizationId string, id string) error

	// Get retrieve a group
	// UserGroupGet GET /organization/{organization_id}/user-groups/{user_group_id}
	// https://api.aiven.io/doc/#tag/Groups/operation/UserGroupGet
	Get(ctx context.Context, organizationId string, id string) (*GetOut, error)

	// List list groups
	// UserGroupsList GET /organization/{organization_id}/user-groups
	// https://api.aiven.io/doc/#tag/Groups/operation/UserGroupsList
	List(ctx context.Context, organizationId string) ([]UserGroup, error)

	// MemberList list group members
	// UserGroupMemberList GET /organization/{organization_id}/user-groups/{user_group_id}/members
	// https://api.aiven.io/doc/#tag/Groups/operation/UserGroupMemberList
	MemberList(ctx context.Context, organizationId string, id string) ([]Member, error)

	// MembersUpdate add or remove group members
	// UserGroupMembersUpdate PATCH /organization/{organization_id}/user-groups/{user_group_id}/members
	// https://api.aiven.io/doc/#tag/Groups/operation/UserGroupMembersUpdate
	MembersUpdate(ctx context.Context, organizationId string, id string, in *MembersUpdateIn) error

	// Update update a group
	// UserGroupUpdate PATCH /organization/{organization_id}/user-groups/{user_group_id}
	// https://api.aiven.io/doc/#tag/Groups/operation/UserGroupUpdate
	Update(ctx context.Context, organizationId string, id string, in *UpdateIn) (*UpdateOut, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) Create(ctx context.Context, organizationId string, in *CreateIn) (*CreateOut, error) {
	path := fmt.Sprintf("/organization/%s/user-groups", organizationId)
	b, err := h.doer.Do(ctx, "UserGroupCreate", "POST", path, in)
	out := new(CreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) Delete(ctx context.Context, organizationId string, id string) error {
	path := fmt.Sprintf("/organization/%s/user-groups/%s", organizationId, id)
	_, err := h.doer.Do(ctx, "UserGroupDelete", "DELETE", path, nil)
	return err
}
func (h *handler) Get(ctx context.Context, organizationId string, id string) (*GetOut, error) {
	path := fmt.Sprintf("/organization/%s/user-groups/%s", organizationId, id)
	b, err := h.doer.Do(ctx, "UserGroupGet", "GET", path, nil)
	out := new(GetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) List(ctx context.Context, organizationId string) ([]UserGroup, error) {
	path := fmt.Sprintf("/organization/%s/user-groups", organizationId)
	b, err := h.doer.Do(ctx, "UserGroupsList", "GET", path, nil)
	out := new(ListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.UserGroups, nil
}
func (h *handler) MemberList(ctx context.Context, organizationId string, id string) ([]Member, error) {
	path := fmt.Sprintf("/organization/%s/user-groups/%s/members", organizationId, id)
	b, err := h.doer.Do(ctx, "UserGroupMemberList", "GET", path, nil)
	out := new(MemberListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Members, nil
}
func (h *handler) MembersUpdate(ctx context.Context, organizationId string, id string, in *MembersUpdateIn) error {
	path := fmt.Sprintf("/organization/%s/user-groups/%s/members", organizationId, id)
	_, err := h.doer.Do(ctx, "UserGroupMembersUpdate", "PATCH", path, in)
	return err
}
func (h *handler) Update(ctx context.Context, organizationId string, id string, in *UpdateIn) (*UpdateOut, error) {
	path := fmt.Sprintf("/organization/%s/user-groups/%s", organizationId, id)
	b, err := h.doer.Do(ctx, "UserGroupUpdate", "PATCH", path, in)
	out := new(UpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type CreateIn struct {
	Description   string `json:"description"`
	UserGroupName string `json:"user_group_name"`
}
type CreateOut struct {
	CreateTime    time.Time `json:"create_time"`
	Description   string    `json:"description"`
	UpdateTime    time.Time `json:"update_time"`
	UserGroupId   string    `json:"user_group_id"`
	UserGroupName string    `json:"user_group_name"`
}
type GetOut struct {
	CreateTime    time.Time `json:"create_time"`
	Description   string    `json:"description"`
	UpdateTime    time.Time `json:"update_time"`
	UserGroupId   string    `json:"user_group_id"`
	UserGroupName string    `json:"user_group_name"`
}
type ListOut struct {
	UserGroups []UserGroup `json:"user_groups"`
}
type Member struct {
	LastActivityTime *time.Time `json:"last_activity_time,omitempty"`
	UserId           string     `json:"user_id"`
	UserInfo         *UserInfo  `json:"user_info,omitempty"`
}
type MemberListOut struct {
	Members []Member `json:"members"`
}
type MembersUpdateIn struct {
	MemberIds []string      `json:"member_ids"`
	Operation OperationType `json:"operation"`
}
type OperationType string

const (
	OperationTypeAddMembers    OperationType = "add_members"
	OperationTypeRemoveMembers OperationType = "remove_members"
)

func OperationTypeChoices() []string {
	return []string{"add_members", "remove_members"}
}

type UpdateIn struct {
	Description   string `json:"description,omitempty"`
	UserGroupName string `json:"user_group_name,omitempty"`
}
type UpdateOut struct {
	CreateTime    time.Time `json:"create_time"`
	Description   string    `json:"description"`
	UpdateTime    time.Time `json:"update_time"`
	UserGroupId   string    `json:"user_group_id"`
	UserGroupName string    `json:"user_group_name"`
}
type UserGroup struct {
	CreateTime    time.Time `json:"create_time"`
	Description   string    `json:"description"`
	UserGroupId   string    `json:"user_group_id"`
	MemberCount   int       `json:"member_count"`
	UserGroupName string    `json:"user_group_name"`
	UpdateTime    time.Time `json:"update_time"`
}
type UserInfo struct {
	City                   string    `json:"city,omitempty"`
	Country                string    `json:"country,omitempty"`
	CreateTime             time.Time `json:"create_time"`
	Department             string    `json:"department,omitempty"`
	IsApplicationUser      bool      `json:"is_application_user"`
	JobTitle               string    `json:"job_title,omitempty"`
	ManagedByScim          bool      `json:"managed_by_scim"`
	ManagingOrganizationId string    `json:"managing_organization_id,omitempty"`
	RealName               string    `json:"real_name"`
	State                  string    `json:"state"`
	UserEmail              string    `json:"user_email"`
}
