// Code generated by Aiven. DO NOT EDIT.

package opensearch

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// AclGet show OpenSearch ACL configuration
	// ServiceOpenSearchAclGet GET /project/{project}/service/{service_name}/opensearch/acl
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchAclGet
	AclGet(ctx context.Context, project string, serviceName string) (*OpensearchAclConfig, error)

	// AclSet set OpenSearch ACL configuration
	// ServiceOpenSearchAclSet POST /project/{project}/service/{service_name}/opensearch/acl
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchAclSet
	AclSet(ctx context.Context, project string, serviceName string, in *AclSetIn) (*OpensearchAclConfig, error)

	// AclUpdate update OpenSearch ACL configuration
	// ServiceOpenSearchAclUpdate PUT /project/{project}/service/{service_name}/opensearch/acl
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchAclUpdate
	AclUpdate(ctx context.Context, project string, serviceName string, in *AclUpdateIn) (*OpensearchAclConfig, error)

	// IndexDelete delete an OpenSearch index
	// ServiceOpenSearchIndexDelete DELETE /project/{project}/service/{service_name}/index/{index_name}
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchIndexDelete
	IndexDelete(ctx context.Context, project string, serviceName string, indexName string) error

	// IndexList list OpenSearch indexes
	// ServiceOpenSearchIndexList GET /project/{project}/service/{service_name}/index
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchIndexList
	IndexList(ctx context.Context, project string, serviceName string) ([]Indexe, error)

	// SecurityGet show Opensearch security configuration status
	// ServiceOpenSearchSecurityGet GET /project/{project}/service/{service_name}/opensearch/security
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchSecurityGet
	SecurityGet(ctx context.Context, project string, serviceName string) (*SecurityGetOut, error)

	// SecurityReset change Opensearch Security Admin password
	// ServiceOpenSearchSecurityReset PUT /project/{project}/service/{service_name}/opensearch/security/admin
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchSecurityReset
	SecurityReset(ctx context.Context, project string, serviceName string, in *SecurityResetIn) (*SecurityResetOut, error)

	// SecuritySet enable Opensearch Security Admin by setting the password
	// ServiceOpenSearchSecuritySet POST /project/{project}/service/{service_name}/opensearch/security/admin
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchSecuritySet
	SecuritySet(ctx context.Context, project string, serviceName string, in *SecuritySetIn) (*SecuritySetOut, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) AclGet(ctx context.Context, project string, serviceName string) (*OpensearchAclConfig, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/acl", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchAclGet", "GET", path, nil)
	out := new(AclGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.OpensearchAclConfig, nil
}
func (h *handler) AclSet(ctx context.Context, project string, serviceName string, in *AclSetIn) (*OpensearchAclConfig, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/acl", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchAclSet", "POST", path, in)
	out := new(AclSetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.OpensearchAclConfig, nil
}
func (h *handler) AclUpdate(ctx context.Context, project string, serviceName string, in *AclUpdateIn) (*OpensearchAclConfig, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/acl", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchAclUpdate", "PUT", path, in)
	out := new(AclUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.OpensearchAclConfig, nil
}
func (h *handler) IndexDelete(ctx context.Context, project string, serviceName string, indexName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/index/%s", project, serviceName, indexName)
	_, err := h.doer.Do(ctx, "ServiceOpenSearchIndexDelete", "DELETE", path, nil)
	return err
}
func (h *handler) IndexList(ctx context.Context, project string, serviceName string) ([]Indexe, error) {
	path := fmt.Sprintf("/project/%s/service/%s/index", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchIndexList", "GET", path, nil)
	out := new(IndexListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Indexes, nil
}
func (h *handler) SecurityGet(ctx context.Context, project string, serviceName string) (*SecurityGetOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/security", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchSecurityGet", "GET", path, nil)
	out := new(SecurityGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) SecurityReset(ctx context.Context, project string, serviceName string, in *SecurityResetIn) (*SecurityResetOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/security/admin", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchSecurityReset", "PUT", path, in)
	out := new(SecurityResetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) SecuritySet(ctx context.Context, project string, serviceName string, in *SecuritySetIn) (*SecuritySetOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/security/admin", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchSecuritySet", "POST", path, in)
	out := new(SecuritySetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type Acl struct {
	Rules    []Rule `json:"rules"`
	Username string `json:"username"`
}
type AclGetOut struct {
	OpensearchAclConfig *OpensearchAclConfig `json:"opensearch_acl_config"`
}
type AclSetIn struct {
	OpensearchAclConfig *OpensearchAclConfig `json:"opensearch_acl_config"`
}
type AclSetOut struct {
	OpensearchAclConfig *OpensearchAclConfig `json:"opensearch_acl_config"`
}
type AclUpdateIn struct {
	OpensearchAclConfig *AclUpdateInOpensearchAclConfig `json:"opensearch_acl_config"`
}
type AclUpdateInOpensearchAclConfig struct {
	Acls    []Acl `json:"acls"`
	Enabled *bool `json:"enabled,omitempty"`
}
type AclUpdateOut struct {
	OpensearchAclConfig *OpensearchAclConfig `json:"opensearch_acl_config"`
}
type HealthType string

const (
	HealthTypeGreen       HealthType = "green"
	HealthTypeYellow      HealthType = "yellow"
	HealthTypeRed         HealthType = "red"
	HealthTypeRedAsterisk HealthType = "red*"
	HealthTypeUnknown     HealthType = "unknown"
)

type IndexListOut struct {
	Indexes []Indexe `json:"indexes"`
}
type Indexe struct {
	CreateTime          time.Time    `json:"create_time"`
	Docs                *int         `json:"docs,omitempty"`
	Health              HealthType   `json:"health,omitempty"`
	IndexName           string       `json:"index_name"`
	NumberOfReplicas    int          `json:"number_of_replicas"`
	NumberOfShards      int          `json:"number_of_shards"`
	ReadOnlyAllowDelete *bool        `json:"read_only_allow_delete,omitempty"`
	Replication         *Replication `json:"replication,omitempty"`
	Size                *int         `json:"size,omitempty"`
	Status              StatusType   `json:"status,omitempty"`
}
type OpensearchAclConfig struct {
	Acls    []Acl `json:"acls"`
	Enabled bool  `json:"enabled"`
}
type PermissionType string

const (
	PermissionTypeDeny      PermissionType = "deny"
	PermissionTypeAdmin     PermissionType = "admin"
	PermissionTypeRead      PermissionType = "read"
	PermissionTypeReadwrite PermissionType = "readwrite"
	PermissionTypeWrite     PermissionType = "write"
)

type Replication struct {
	LeaderIndex   string `json:"leader_index,omitempty"`
	LeaderProject string `json:"leader_project,omitempty"`
	LeaderService string `json:"leader_service,omitempty"`
}
type Rule struct {
	Index      string         `json:"index"`
	Permission PermissionType `json:"permission"`
}
type SecurityGetOut struct {
	SecurityPluginAdminEnabled bool  `json:"security_plugin_admin_enabled"`
	SecurityPluginAvailable    bool  `json:"security_plugin_available"`
	SecurityPluginEnabled      *bool `json:"security_plugin_enabled,omitempty"`
}
type SecurityResetIn struct {
	AdminPassword string `json:"admin_password"`
	NewPassword   string `json:"new_password"`
}
type SecurityResetOut struct {
	SecurityPluginAdminEnabled bool  `json:"security_plugin_admin_enabled"`
	SecurityPluginAvailable    bool  `json:"security_plugin_available"`
	SecurityPluginEnabled      *bool `json:"security_plugin_enabled,omitempty"`
}
type SecuritySetIn struct {
	AdminPassword string `json:"admin_password"`
}
type SecuritySetOut struct {
	SecurityPluginAdminEnabled bool  `json:"security_plugin_admin_enabled"`
	SecurityPluginAvailable    bool  `json:"security_plugin_available"`
	SecurityPluginEnabled      *bool `json:"security_plugin_enabled,omitempty"`
}
type StatusType string

const (
	StatusTypeUnknown StatusType = "unknown"
	StatusTypeOpen    StatusType = "open"
	StatusTypeClose   StatusType = "close"
	StatusTypeNone    StatusType = "none"
)
