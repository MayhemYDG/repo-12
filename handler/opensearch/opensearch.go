// Code generated by Aiven. DO NOT EDIT.

package opensearch

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// ServiceOpenSearchAclGet show OpenSearch ACL configuration
	// GET /project/{project}/service/{service_name}/opensearch/acl
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchAclGet
	ServiceOpenSearchAclGet(ctx context.Context, project string, serviceName string) (*OpensearchAclConfigOut, error)

	// ServiceOpenSearchAclSet set OpenSearch ACL configuration
	// POST /project/{project}/service/{service_name}/opensearch/acl
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchAclSet
	ServiceOpenSearchAclSet(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchAclSetIn) (*OpensearchAclConfigOut, error)

	// ServiceOpenSearchAclUpdate update OpenSearch ACL configuration
	// PUT /project/{project}/service/{service_name}/opensearch/acl
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchAclUpdate
	ServiceOpenSearchAclUpdate(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchAclUpdateIn) (*OpensearchAclConfigOut, error)

	// ServiceOpenSearchIndexDelete delete an OpenSearch index
	// DELETE /project/{project}/service/{service_name}/index/{index_name}
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchIndexDelete
	ServiceOpenSearchIndexDelete(ctx context.Context, project string, serviceName string, indexName string) error

	// ServiceOpenSearchIndexList list OpenSearch indexes
	// GET /project/{project}/service/{service_name}/index
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchIndexList
	ServiceOpenSearchIndexList(ctx context.Context, project string, serviceName string) ([]IndexeOut, error)

	// ServiceOpenSearchSecurityGet show Opensearch security configuration status
	// GET /project/{project}/service/{service_name}/opensearch/security
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchSecurityGet
	ServiceOpenSearchSecurityGet(ctx context.Context, project string, serviceName string) (*ServiceOpenSearchSecurityGetOut, error)

	// ServiceOpenSearchSecurityReset change Opensearch Security Admin password
	// PUT /project/{project}/service/{service_name}/opensearch/security/admin
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchSecurityReset
	ServiceOpenSearchSecurityReset(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchSecurityResetIn) (*ServiceOpenSearchSecurityResetOut, error)

	// ServiceOpenSearchSecuritySet enable Opensearch Security Admin by setting the password
	// POST /project/{project}/service/{service_name}/opensearch/security/admin
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchSecuritySet
	ServiceOpenSearchSecuritySet(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchSecuritySetIn) (*ServiceOpenSearchSecuritySetOut, error)
}

func NewHandler(doer doer) OpenSearchHandler {
	return OpenSearchHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type OpenSearchHandler struct {
	doer doer
}

func (h *OpenSearchHandler) ServiceOpenSearchAclGet(ctx context.Context, project string, serviceName string) (*OpensearchAclConfigOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/acl", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchAclGet", "GET", path, nil)
	out := new(ServiceOpenSearchAclGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.OpensearchAclConfig, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchAclSet(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchAclSetIn) (*OpensearchAclConfigOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/acl", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchAclSet", "POST", path, in)
	out := new(ServiceOpenSearchAclSetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.OpensearchAclConfig, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchAclUpdate(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchAclUpdateIn) (*OpensearchAclConfigOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/acl", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchAclUpdate", "PUT", path, in)
	out := new(ServiceOpenSearchAclUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.OpensearchAclConfig, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchIndexDelete(ctx context.Context, project string, serviceName string, indexName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/index/%s", project, serviceName, indexName)
	_, err := h.doer.Do(ctx, "ServiceOpenSearchIndexDelete", "DELETE", path, nil)
	return err
}
func (h *OpenSearchHandler) ServiceOpenSearchIndexList(ctx context.Context, project string, serviceName string) ([]IndexeOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/index", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchIndexList", "GET", path, nil)
	out := new(ServiceOpenSearchIndexListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Indexes, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchSecurityGet(ctx context.Context, project string, serviceName string) (*ServiceOpenSearchSecurityGetOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/security", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchSecurityGet", "GET", path, nil)
	out := new(ServiceOpenSearchSecurityGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchSecurityReset(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchSecurityResetIn) (*ServiceOpenSearchSecurityResetOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/security/admin", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchSecurityReset", "PUT", path, in)
	out := new(ServiceOpenSearchSecurityResetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchSecuritySet(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchSecuritySetIn) (*ServiceOpenSearchSecuritySetOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/opensearch/security/admin", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceOpenSearchSecuritySet", "POST", path, in)
	out := new(ServiceOpenSearchSecuritySetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type AclOut struct {
	Rules    []RuleOut `json:"rules"`
	Username string    `json:"username"`
}
type HealthType string

const (
	HealthTypeGreen       HealthType = "green"
	HealthTypeYellow      HealthType = "yellow"
	HealthTypeRed         HealthType = "red"
	HealthTypeRedAsterisk HealthType = "red*"
	HealthTypeUnknown     HealthType = "unknown"
)

type IndexeOut struct {
	CreateTime          time.Time       `json:"create_time"`
	Docs                *int            `json:"docs,omitempty"`
	Health              HealthType      `json:"health,omitempty"`
	IndexName           string          `json:"index_name"`
	NumberOfReplicas    int             `json:"number_of_replicas"`
	NumberOfShards      int             `json:"number_of_shards"`
	ReadOnlyAllowDelete *bool           `json:"read_only_allow_delete,omitempty"`
	Replication         *ReplicationOut `json:"replication,omitempty"`
	Size                *int            `json:"size,omitempty"`
	Status              StatusType      `json:"status,omitempty"`
}
type OpensearchAclConfig struct {
	Acls    *[]AclOut `json:"acls,omitempty"`
	Enabled *bool     `json:"enabled,omitempty"`
}
type OpensearchAclConfigOut struct {
	Acls    []AclOut `json:"acls"`
	Enabled bool     `json:"enabled"`
}
type PermissionType string

const (
	PermissionTypeDeny      PermissionType = "deny"
	PermissionTypeAdmin     PermissionType = "admin"
	PermissionTypeRead      PermissionType = "read"
	PermissionTypeReadwrite PermissionType = "readwrite"
	PermissionTypeWrite     PermissionType = "write"
)

type ReplicationOut struct {
	LeaderIndex   string `json:"leader_index,omitempty"`
	LeaderProject string `json:"leader_project,omitempty"`
	LeaderService string `json:"leader_service,omitempty"`
}
type RuleOut struct {
	Index      string         `json:"index"`
	Permission PermissionType `json:"permission"`
}
type ServiceOpenSearchAclGetOut struct {
	OpensearchAclConfig OpensearchAclConfigOut `json:"opensearch_acl_config"`
}
type ServiceOpenSearchAclSetIn struct {
	OpensearchAclConfig OpensearchAclConfigOut `json:"opensearch_acl_config"`
}
type ServiceOpenSearchAclSetOut struct {
	OpensearchAclConfig OpensearchAclConfigOut `json:"opensearch_acl_config"`
}
type ServiceOpenSearchAclUpdateIn struct {
	OpensearchAclConfig OpensearchAclConfig `json:"opensearch_acl_config"`
}
type ServiceOpenSearchAclUpdateOut struct {
	OpensearchAclConfig OpensearchAclConfigOut `json:"opensearch_acl_config"`
}
type ServiceOpenSearchIndexListOut struct {
	Indexes []IndexeOut `json:"indexes"`
}
type ServiceOpenSearchSecurityGetOut struct {
	SecurityPluginAdminEnabled bool  `json:"security_plugin_admin_enabled"`
	SecurityPluginAvailable    bool  `json:"security_plugin_available"`
	SecurityPluginEnabled      *bool `json:"security_plugin_enabled,omitempty"`
}
type ServiceOpenSearchSecurityResetIn struct {
	AdminPassword string `json:"admin_password"`
	NewPassword   string `json:"new_password"`
}
type ServiceOpenSearchSecurityResetOut struct {
	SecurityPluginAdminEnabled bool  `json:"security_plugin_admin_enabled"`
	SecurityPluginAvailable    bool  `json:"security_plugin_available"`
	SecurityPluginEnabled      *bool `json:"security_plugin_enabled,omitempty"`
}
type ServiceOpenSearchSecuritySetIn struct {
	AdminPassword string `json:"admin_password"`
}
type ServiceOpenSearchSecuritySetOut struct {
	SecurityPluginAdminEnabled bool  `json:"security_plugin_admin_enabled"`
	SecurityPluginAvailable    bool  `json:"security_plugin_available"`
	SecurityPluginEnabled      *bool `json:"security_plugin_enabled,omitempty"`
}
type StatusType string

const (
	StatusTypeUnknown StatusType = "unknown"
	StatusTypeOpen    StatusType = "open"
	StatusTypeClose   StatusType = "close"
	StatusTypeNone    StatusType = "none"
)
