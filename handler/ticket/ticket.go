// Code generated by Aiven. DO NOT EDIT.

package ticket

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// OrganizationTicketList list organization support tickets
	// OrganizationTicketList GET /organization/{organization_id}/tickets
	// https://api.aiven.io/doc/#tag/Ticket/operation/OrganizationTicketList
	OrganizationTicketList(ctx context.Context, organizationId string) ([]Ticket, error)

	// ProjectTicketCreate create a support ticket
	// ProjectTicketCreate POST /project/{project}/tickets
	// https://api.aiven.io/doc/#tag/Ticket/operation/ProjectTicketCreate
	ProjectTicketCreate(ctx context.Context, project string, in *ProjectTicketCreateIn) (*ProjectTicketCreateOutTicket, error)

	// ProjectTicketInvite invite a user to a ticket
	// ProjectTicketInvite POST /project/{project}/tickets/{ticket_id}/invite
	// https://api.aiven.io/doc/#tag/Ticket/operation/ProjectTicketInvite
	ProjectTicketInvite(ctx context.Context, project string, id string, in *ProjectTicketInviteIn) error

	// ProjectTicketList list support tickets
	// ProjectTicketList GET /project/{project}/tickets
	// https://api.aiven.io/doc/#tag/Ticket/operation/ProjectTicketList
	ProjectTicketList(ctx context.Context, project string) ([]TicketItem, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) OrganizationTicketList(ctx context.Context, organizationId string) ([]Ticket, error) {
	path := fmt.Sprintf("/organization/%s/tickets", organizationId)
	b, err := h.doer.Do(ctx, "OrganizationTicketList", "GET", path, nil)
	out := new(OrganizationTicketListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Tickets, nil
}
func (h *handler) ProjectTicketCreate(ctx context.Context, project string, in *ProjectTicketCreateIn) (*ProjectTicketCreateOutTicket, error) {
	path := fmt.Sprintf("/project/%s/tickets", project)
	b, err := h.doer.Do(ctx, "ProjectTicketCreate", "POST", path, in)
	out := new(ProjectTicketCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Ticket, nil
}
func (h *handler) ProjectTicketInvite(ctx context.Context, project string, id string, in *ProjectTicketInviteIn) error {
	path := fmt.Sprintf("/project/%s/tickets/%s/invite", project, id)
	_, err := h.doer.Do(ctx, "ProjectTicketInvite", "POST", path, in)
	return err
}
func (h *handler) ProjectTicketList(ctx context.Context, project string) ([]TicketItem, error) {
	path := fmt.Sprintf("/project/%s/tickets", project)
	b, err := h.doer.Do(ctx, "ProjectTicketList", "GET", path, nil)
	out := new(ProjectTicketListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Tickets, nil
}

type Follower struct {
	RealName  string `json:"real_name"`
	UserEmail string `json:"user_email"`
	UserId    string `json:"user_id"`
}
type OrganizationTicketListOut struct {
	Tickets []Ticket `json:"tickets"`
}
type ProjectTicketCreateIn struct {
	Description string       `json:"description"`
	ServiceName string       `json:"service_name,omitempty"`
	Severity    SeverityType `json:"severity"`
	Title       string       `json:"title"`
}
type ProjectTicketCreateOut struct {
	Ticket *ProjectTicketCreateOutTicket `json:"ticket"`
}
type ProjectTicketCreateOutTicket struct {
	AccountId      string       `json:"account_id,omitempty"`
	CreateTime     time.Time    `json:"create_time"`
	Description    string       `json:"description"`
	Followers      []Follower   `json:"followers"`
	Following      *bool        `json:"following,omitempty"`
	OrganizationId string       `json:"organization_id,omitempty"`
	ProjectName    string       `json:"project_name"`
	ServiceName    string       `json:"service_name"`
	Severity       SeverityType `json:"severity"`
	State          StateType    `json:"state"`
	Submitter      *Submitter   `json:"submitter"`
	TicketId       string       `json:"ticket_id"`
	Title          string       `json:"title"`
	UpdateTime     time.Time    `json:"update_time"`
	UserEmail      string       `json:"user_email"`
	UserRealName   string       `json:"user_real_name"`
}
type ProjectTicketInviteIn struct {
	UserEmail string `json:"user_email"`
}
type ProjectTicketListOut struct {
	Tickets []TicketItem `json:"tickets"`
}
type SeverityType string

const (
	SeverityTypeCritical SeverityType = "critical"
	SeverityTypeHigh     SeverityType = "high"
	SeverityTypeLow      SeverityType = "low"
)

type StateType string

const (
	StateTypeClosed StateType = "closed"
	StateTypeOpen   StateType = "open"
)

type Submitter struct {
	RealName  string `json:"real_name"`
	UserEmail string `json:"user_email"`
	UserId    string `json:"user_id"`
}
type Ticket struct {
	AccountId      string       `json:"account_id,omitempty"`
	CreateTime     time.Time    `json:"create_time"`
	Description    string       `json:"description"`
	Followers      []Follower   `json:"followers"`
	Following      *bool        `json:"following,omitempty"`
	TicketId       string       `json:"ticket_id"`
	OrganizationId string       `json:"organization_id,omitempty"`
	ProjectName    string       `json:"project_name,omitempty"`
	ServiceName    string       `json:"service_name"`
	Severity       SeverityType `json:"severity"`
	State          StateType    `json:"state"`
	Submitter      *Submitter   `json:"submitter"`
	Title          string       `json:"title"`
	UpdateTime     time.Time    `json:"update_time"`
	UserEmail      string       `json:"user_email"`
	UserRealName   string       `json:"user_real_name"`
}
type TicketItem struct {
	AccountId      string       `json:"account_id,omitempty"`
	CreateTime     time.Time    `json:"create_time"`
	Description    string       `json:"description"`
	Followers      []Follower   `json:"followers"`
	Following      *bool        `json:"following,omitempty"`
	OrganizationId string       `json:"organization_id,omitempty"`
	ProjectName    string       `json:"project_name"`
	ServiceName    string       `json:"service_name"`
	Severity       SeverityType `json:"severity"`
	State          StateType    `json:"state"`
	Submitter      *Submitter   `json:"submitter"`
	TicketId       string       `json:"ticket_id"`
	Title          string       `json:"title"`
	UpdateTime     time.Time    `json:"update_time"`
	UserEmail      string       `json:"user_email"`
	UserRealName   string       `json:"user_real_name"`
}
