// Code generated by Aiven. DO NOT EDIT.

package payment

import (
	"context"
	"encoding/json"
	"fmt"
)

type Handler interface {
	// CreditCardAdd add credit card for user
	// CreditCardAdd POST /card
	// https://api.aiven.io/doc/#tag/Payment/operation/CreditCardAdd
	CreditCardAdd(ctx context.Context, in *CreditCardAddIn) (*Card, error)

	// CreditCardDelete delete user's credit card
	// CreditCardDelete DELETE /card/{card_id}
	// https://api.aiven.io/doc/#tag/Payment/operation/CreditCardDelete
	CreditCardDelete(ctx context.Context, cardId string) error

	// CreditCardUpdate update user's credit card
	// CreditCardUpdate PUT /card/{card_id}
	// https://api.aiven.io/doc/#tag/Payment/operation/CreditCardUpdate
	CreditCardUpdate(ctx context.Context, cardId string, in *CreditCardUpdateIn) (*Card, error)

	// CreditCardsList list user's credit cards
	// CreditCardsList GET /card
	// https://api.aiven.io/doc/#tag/Payment/operation/CreditCardsList
	CreditCardsList(ctx context.Context) ([]Card, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) CreditCardAdd(ctx context.Context, in *CreditCardAddIn) (*Card, error) {
	path := fmt.Sprintf("/card")
	b, err := h.doer.Do(ctx, "CreditCardAdd", "POST", path, in)
	out := new(CreditCardAddOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Card, nil
}
func (h *handler) CreditCardDelete(ctx context.Context, cardId string) error {
	path := fmt.Sprintf("/card/%s", cardId)
	_, err := h.doer.Do(ctx, "CreditCardDelete", "DELETE", path, nil)
	return err
}
func (h *handler) CreditCardUpdate(ctx context.Context, cardId string, in *CreditCardUpdateIn) (*Card, error) {
	path := fmt.Sprintf("/card/%s", cardId)
	b, err := h.doer.Do(ctx, "CreditCardUpdate", "PUT", path, in)
	out := new(CreditCardUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Card, nil
}
func (h *handler) CreditCardsList(ctx context.Context) ([]Card, error) {
	path := fmt.Sprintf("/card")
	b, err := h.doer.Do(ctx, "CreditCardsList", "GET", path, nil)
	out := new(CreditCardsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Cards, nil
}

type Card struct {
	Brand          string   `json:"brand"`
	Country        string   `json:"country"`
	CountryCode    string   `json:"country_code"`
	ExpMonth       int      `json:"exp_month"`
	ExpYear        int      `json:"exp_year"`
	CardId         string   `json:"card_id"`
	Last4          string   `json:"last4"`
	Name           string   `json:"name"`
	OrganizationId string   `json:"organization_id,omitempty"`
	Projects       []string `json:"projects"`
}
type CreditCardAddIn struct {
	StripeToken string `json:"stripe_token"`
}
type CreditCardAddOut struct {
	Card *Card `json:"card"`
}
type CreditCardUpdateIn struct {
	ExpMonth *int   `json:"exp_month,omitempty"`
	ExpYear  *int   `json:"exp_year,omitempty"`
	Name     string `json:"name,omitempty"`
}
type CreditCardUpdateOut struct {
	Card *Card `json:"card"`
}
type CreditCardsListOut struct {
	Cards []Card `json:"cards"`
}
