// Code generated by Aiven. DO NOT EDIT.

package service

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// AlertsList list active alerts for service
	// ServiceAlertsList GET /project/{project}/service/{service_name}/alerts
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceAlertsList
	AlertsList(ctx context.Context, project string, name string) ([]Alert, error)

	// BackupToAnotherRegionReport get service's backup to another region information
	// ServiceBackupToAnotherRegionReport POST /project/{project}/service/{service_name}/backup_to_another_region/report
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceBackupToAnotherRegionReport
	BackupToAnotherRegionReport(ctx context.Context, project string, name string, in *BackupToAnotherRegionReportIn) (map[string]any, error)

	// BackupsGet get service backup information
	// ServiceBackupsGet GET /project/{project}/service/{service_name}/backups
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceBackupsGet
	BackupsGet(ctx context.Context, project string, name string) ([]Backup, error)

	// CancelQuery cancel specified query from service
	// ServiceCancelQuery POST /project/{project}/service/{service_name}/query/cancel
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceCancelQuery
	CancelQuery(ctx context.Context, project string, name string, in *CancelQueryIn) (bool, error)

	// Create create a service
	// ServiceCreate POST /project/{project}/service
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceCreate
	Create(ctx context.Context, project string, in *CreateIn) (*Service, error)

	// DatabaseCreate create a new logical database for service
	// ServiceDatabaseCreate POST /project/{project}/service/{service_name}/db
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceDatabaseCreate
	DatabaseCreate(ctx context.Context, project string, name string, in *DatabaseCreateIn) error

	// DatabaseDelete delete a logical database
	// ServiceDatabaseDelete DELETE /project/{project}/service/{service_name}/db/{dbname}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceDatabaseDelete
	DatabaseDelete(ctx context.Context, project string, name string, dbname string) error

	// DatabaseList list service databases
	// ServiceDatabaseList GET /project/{project}/service/{service_name}/db
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceDatabaseList
	DatabaseList(ctx context.Context, project string, name string) ([]Database, error)

	// Delete terminate a service
	// ServiceDelete DELETE /project/{project}/service/{service_name}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceDelete
	Delete(ctx context.Context, project string, name string) error

	// EnableWrites temporarily enable writes for a service in read-only mode. Will only work if disk usage is lower than 99.0%
	// ServiceEnableWrites POST /project/{project}/service/{service_name}/enable-writes
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceEnableWrites
	EnableWrites(ctx context.Context, project string, name string) (string, error)

	// Get get service information
	// ServiceGet GET /project/{project}/service/{service_name}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceGet
	Get(ctx context.Context, project string, name string) (*Service, error)

	// GetMigrationStatus get migration status
	// ServiceGetMigrationStatus GET /project/{project}/service/{service_name}/migration
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceGetMigrationStatus
	GetMigrationStatus(ctx context.Context, project string, name string) (*GetMigrationStatusOut, error)

	// InfluxDBStats list stats for influxdb
	// ServiceInfluxDBStats GET /project/{project}/service/{service_name}/influxdb/stats
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceInfluxDBStats
	InfluxDBStats(ctx context.Context, project string, name string) (map[string]any, error)

	// KmsGetCA retrieve a service CA
	// ServiceKmsGetCA GET /project/{project}/service/{service_name}/kms/ca/{ca_name}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceKmsGetCA
	KmsGetCA(ctx context.Context, project string, name string, caName string) (string, error)

	// KmsGetKeypair retrieve service keypair
	// ServiceKmsGetKeypair GET /project/{project}/service/{service_name}/kms/keypairs/{keypair_name}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceKmsGetKeypair
	KmsGetKeypair(ctx context.Context, project string, name string, keypairName string) (*KmsGetKeypairOut, error)

	// List list services
	// ServiceList GET /project/{project}/service
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceList
	List(ctx context.Context, project string) ([]Service, error)

	// ListProjectServiceTypes list service types for a project
	// ListProjectServiceTypes GET /project/{project}/service_types
	// https://api.aiven.io/doc/#tag/Service/operation/ListProjectServiceTypes
	ListProjectServiceTypes(ctx context.Context, project string) (*ServiceTypes, error)

	// ListPublicServiceTypes list publicly available service types
	// ListPublicServiceTypes GET /service_types
	// https://api.aiven.io/doc/#tag/Service/operation/ListPublicServiceTypes
	ListPublicServiceTypes(ctx context.Context) (*ServiceTypes, error)

	// ListServiceVersions list service versions
	// ListServiceVersions GET /service_versions
	// https://api.aiven.io/doc/#tag/Service/operation/ListServiceVersions
	ListServiceVersions(ctx context.Context) ([]ServiceVersion, error)

	// MaintenanceStart start maintenance updates
	// ServiceMaintenanceStart PUT /project/{project}/service/{service_name}/maintenance/start
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceMaintenanceStart
	MaintenanceStart(ctx context.Context, project string, name string) error

	// MetricsFetch fetch service metrics
	// ServiceMetricsFetch POST /project/{project}/service/{service_name}/metrics
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceMetricsFetch
	MetricsFetch(ctx context.Context, project string, name string, in *MetricsFetchIn) (map[string]any, error)

	// PgAvailableExtensions list PostgreSQL extensions available for this tenant grouped by PG version
	// PgAvailableExtensions GET /tenants/{tenant}/pg-available-extensions
	// https://api.aiven.io/doc/#tag/Service/operation/PgAvailableExtensions
	PgAvailableExtensions(ctx context.Context, tenant string) ([]Pg, error)

	// ProjectGetServiceLogs get service log entries
	// ProjectGetServiceLogs POST /project/{project}/service/{service_name}/logs
	// https://api.aiven.io/doc/#tag/Service/operation/ProjectGetServiceLogs
	ProjectGetServiceLogs(ctx context.Context, project string, name string, in *ProjectGetServiceLogsIn) (*ProjectGetServiceLogsOut, error)

	// ProjectServiceTagsList list all tags attached to the service
	// ProjectServiceTagsList GET /project/{project}/service/{service_name}/tags
	// https://api.aiven.io/doc/#tag/Service/operation/ProjectServiceTagsList
	ProjectServiceTagsList(ctx context.Context, project string, name string) (map[string]string, error)

	// ProjectServiceTagsReplace replace all project tags with a new set of tags, deleting old ones
	// ProjectServiceTagsReplace PUT /project/{project}/service/{service_name}/tags
	// https://api.aiven.io/doc/#tag/Service/operation/ProjectServiceTagsReplace
	ProjectServiceTagsReplace(ctx context.Context, project string, name string, in *ProjectServiceTagsReplaceIn) error

	// ProjectServiceTagsUpdate update one or more tags, creating ones that don't exist, and deleting ones given NULL value
	// ProjectServiceTagsUpdate PATCH /project/{project}/service/{service_name}/tags
	// https://api.aiven.io/doc/#tag/Service/operation/ProjectServiceTagsUpdate
	ProjectServiceTagsUpdate(ctx context.Context, project string, name string, in *ProjectServiceTagsUpdateIn) error

	// QueryActivity fetch current queries for the service
	// ServiceQueryActivity POST /project/{project}/service/{service_name}/query/activity
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceQueryActivity
	QueryActivity(ctx context.Context, project string, name string, in *QueryActivityIn) ([]Query, error)

	// QueryStatisticsReset reset service's query statistics
	// ServiceQueryStatisticsReset PUT /project/{project}/service/{service_name}/query/stats/reset
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceQueryStatisticsReset
	QueryStatisticsReset(ctx context.Context, project string, name string) ([]map[string]any, error)

	// TaskCreate create a new task for service
	// ServiceTaskCreate POST /project/{project}/service/{service_name}/task
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceTaskCreate
	TaskCreate(ctx context.Context, project string, name string, in *TaskCreateIn) (*Task, error)

	// TaskGet get task result
	// ServiceTaskGet GET /project/{project}/service/{service_name}/task/{task_id}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceTaskGet
	TaskGet(ctx context.Context, project string, name string, taskId string) (*Task, error)

	// Update update service configuration
	// ServiceUpdate PUT /project/{project}/service/{service_name}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceUpdate
	Update(ctx context.Context, project string, name string, in *UpdateIn) (*Service, error)

	// UserCreate create a new (sub) user for service
	// ServiceUserCreate POST /project/{project}/service/{service_name}/user
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceUserCreate
	UserCreate(ctx context.Context, project string, name string, in *UserCreateIn) (*User, error)

	// UserCredentialsModify modify service user credentials
	// ServiceUserCredentialsModify PUT /project/{project}/service/{service_name}/user/{service_username}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceUserCredentialsModify
	UserCredentialsModify(ctx context.Context, project string, name string, username string, in *UserCredentialsModifyIn) (*Service, error)

	// UserCredentialsReset reset service user credentials
	// ServiceUserCredentialsReset PUT /project/{project}/service/{service_name}/user/{service_username}/credentials/reset
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceUserCredentialsReset
	UserCredentialsReset(ctx context.Context, project string, name string, username string) (*Service, error)

	// UserDelete delete a service user
	// ServiceUserDelete DELETE /project/{project}/service/{service_name}/user/{service_username}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceUserDelete
	UserDelete(ctx context.Context, project string, name string, username string) error

	// UserGet get details for a single user
	// ServiceUserGet GET /project/{project}/service/{service_name}/user/{service_username}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceUserGet
	UserGet(ctx context.Context, project string, name string, username string) (*User, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) AlertsList(ctx context.Context, project string, name string) ([]Alert, error) {
	path := fmt.Sprintf("/project/%s/service/%s/alerts", project, name)
	b, err := h.doer.Do(ctx, "ServiceAlertsList", "GET", path, nil)
	out := new(AlertsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Alerts, nil
}
func (h *handler) BackupToAnotherRegionReport(ctx context.Context, project string, name string, in *BackupToAnotherRegionReportIn) (map[string]any, error) {
	path := fmt.Sprintf("/project/%s/service/%s/backup_to_another_region/report", project, name)
	b, err := h.doer.Do(ctx, "ServiceBackupToAnotherRegionReport", "POST", path, in)
	out := new(BackupToAnotherRegionReportOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Metrics, nil
}
func (h *handler) BackupsGet(ctx context.Context, project string, name string) ([]Backup, error) {
	path := fmt.Sprintf("/project/%s/service/%s/backups", project, name)
	b, err := h.doer.Do(ctx, "ServiceBackupsGet", "GET", path, nil)
	out := new(BackupsGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Backups, nil
}
func (h *handler) CancelQuery(ctx context.Context, project string, name string, in *CancelQueryIn) (bool, error) {
	path := fmt.Sprintf("/project/%s/service/%s/query/cancel", project, name)
	b, err := h.doer.Do(ctx, "ServiceCancelQuery", "POST", path, in)
	out := new(CancelQueryOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return false, err
	}
	return out.Success, nil
}
func (h *handler) Create(ctx context.Context, project string, in *CreateIn) (*Service, error) {
	path := fmt.Sprintf("/project/%s/service", project)
	b, err := h.doer.Do(ctx, "ServiceCreate", "POST", path, in)
	out := new(CreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Service, nil
}
func (h *handler) DatabaseCreate(ctx context.Context, project string, name string, in *DatabaseCreateIn) error {
	path := fmt.Sprintf("/project/%s/service/%s/db", project, name)
	_, err := h.doer.Do(ctx, "ServiceDatabaseCreate", "POST", path, in)
	return err
}
func (h *handler) DatabaseDelete(ctx context.Context, project string, name string, dbname string) error {
	path := fmt.Sprintf("/project/%s/service/%s/db/%s", project, name, dbname)
	_, err := h.doer.Do(ctx, "ServiceDatabaseDelete", "DELETE", path, nil)
	return err
}
func (h *handler) DatabaseList(ctx context.Context, project string, name string) ([]Database, error) {
	path := fmt.Sprintf("/project/%s/service/%s/db", project, name)
	b, err := h.doer.Do(ctx, "ServiceDatabaseList", "GET", path, nil)
	out := new(DatabaseListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Databases, nil
}
func (h *handler) Delete(ctx context.Context, project string, name string) error {
	path := fmt.Sprintf("/project/%s/service/%s", project, name)
	_, err := h.doer.Do(ctx, "ServiceDelete", "DELETE", path, nil)
	return err
}
func (h *handler) EnableWrites(ctx context.Context, project string, name string) (string, error) {
	path := fmt.Sprintf("/project/%s/service/%s/enable-writes", project, name)
	b, err := h.doer.Do(ctx, "ServiceEnableWrites", "POST", path, nil)
	out := new(EnableWritesOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return "", err
	}
	return out.Until, nil
}
func (h *handler) Get(ctx context.Context, project string, name string) (*Service, error) {
	path := fmt.Sprintf("/project/%s/service/%s", project, name)
	b, err := h.doer.Do(ctx, "ServiceGet", "GET", path, nil)
	out := new(GetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Service, nil
}
func (h *handler) GetMigrationStatus(ctx context.Context, project string, name string) (*GetMigrationStatusOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/migration", project, name)
	b, err := h.doer.Do(ctx, "ServiceGetMigrationStatus", "GET", path, nil)
	out := new(GetMigrationStatusOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) InfluxDBStats(ctx context.Context, project string, name string) (map[string]any, error) {
	path := fmt.Sprintf("/project/%s/service/%s/influxdb/stats", project, name)
	b, err := h.doer.Do(ctx, "ServiceInfluxDBStats", "GET", path, nil)
	out := new(InfluxDbstatsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.DbStats, nil
}
func (h *handler) KmsGetCA(ctx context.Context, project string, name string, caName string) (string, error) {
	path := fmt.Sprintf("/project/%s/service/%s/kms/ca/%s", project, name, caName)
	b, err := h.doer.Do(ctx, "ServiceKmsGetCA", "GET", path, nil)
	out := new(KmsGetCaout)
	err = json.Unmarshal(b, out)
	if err != nil {
		return "", err
	}
	return out.Certificate, nil
}
func (h *handler) KmsGetKeypair(ctx context.Context, project string, name string, keypairName string) (*KmsGetKeypairOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/kms/keypairs/%s", project, name, keypairName)
	b, err := h.doer.Do(ctx, "ServiceKmsGetKeypair", "GET", path, nil)
	out := new(KmsGetKeypairOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) List(ctx context.Context, project string) ([]Service, error) {
	path := fmt.Sprintf("/project/%s/service", project)
	b, err := h.doer.Do(ctx, "ServiceList", "GET", path, nil)
	out := new(ListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Services, nil
}
func (h *handler) ListProjectServiceTypes(ctx context.Context, project string) (*ServiceTypes, error) {
	path := fmt.Sprintf("/project/%s/service_types", project)
	b, err := h.doer.Do(ctx, "ListProjectServiceTypes", "GET", path, nil)
	out := new(ListProjectServiceTypesOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceTypes, nil
}
func (h *handler) ListPublicServiceTypes(ctx context.Context) (*ServiceTypes, error) {
	path := fmt.Sprintf("/service_types")
	b, err := h.doer.Do(ctx, "ListPublicServiceTypes", "GET", path, nil)
	out := new(ListPublicServiceTypesOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceTypes, nil
}
func (h *handler) ListServiceVersions(ctx context.Context) ([]ServiceVersion, error) {
	path := fmt.Sprintf("/service_versions")
	b, err := h.doer.Do(ctx, "ListServiceVersions", "GET", path, nil)
	out := new(ListServiceVersionsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceVersions, nil
}
func (h *handler) MaintenanceStart(ctx context.Context, project string, name string) error {
	path := fmt.Sprintf("/project/%s/service/%s/maintenance/start", project, name)
	_, err := h.doer.Do(ctx, "ServiceMaintenanceStart", "PUT", path, nil)
	return err
}
func (h *handler) MetricsFetch(ctx context.Context, project string, name string, in *MetricsFetchIn) (map[string]any, error) {
	path := fmt.Sprintf("/project/%s/service/%s/metrics", project, name)
	b, err := h.doer.Do(ctx, "ServiceMetricsFetch", "POST", path, in)
	out := new(MetricsFetchOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Metrics, nil
}
func (h *handler) PgAvailableExtensions(ctx context.Context, tenant string) ([]Pg, error) {
	path := fmt.Sprintf("/tenants/%s/pg-available-extensions", tenant)
	b, err := h.doer.Do(ctx, "PgAvailableExtensions", "GET", path, nil)
	out := new(PgAvailableExtensionsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Pg, nil
}
func (h *handler) ProjectGetServiceLogs(ctx context.Context, project string, name string, in *ProjectGetServiceLogsIn) (*ProjectGetServiceLogsOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/logs", project, name)
	b, err := h.doer.Do(ctx, "ProjectGetServiceLogs", "POST", path, in)
	out := new(ProjectGetServiceLogsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) ProjectServiceTagsList(ctx context.Context, project string, name string) (map[string]string, error) {
	path := fmt.Sprintf("/project/%s/service/%s/tags", project, name)
	b, err := h.doer.Do(ctx, "ProjectServiceTagsList", "GET", path, nil)
	out := new(ProjectServiceTagsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Tags, nil
}
func (h *handler) ProjectServiceTagsReplace(ctx context.Context, project string, name string, in *ProjectServiceTagsReplaceIn) error {
	path := fmt.Sprintf("/project/%s/service/%s/tags", project, name)
	_, err := h.doer.Do(ctx, "ProjectServiceTagsReplace", "PUT", path, in)
	return err
}
func (h *handler) ProjectServiceTagsUpdate(ctx context.Context, project string, name string, in *ProjectServiceTagsUpdateIn) error {
	path := fmt.Sprintf("/project/%s/service/%s/tags", project, name)
	_, err := h.doer.Do(ctx, "ProjectServiceTagsUpdate", "PATCH", path, in)
	return err
}
func (h *handler) QueryActivity(ctx context.Context, project string, name string, in *QueryActivityIn) ([]Query, error) {
	path := fmt.Sprintf("/project/%s/service/%s/query/activity", project, name)
	b, err := h.doer.Do(ctx, "ServiceQueryActivity", "POST", path, in)
	out := new(QueryActivityOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Queries, nil
}
func (h *handler) QueryStatisticsReset(ctx context.Context, project string, name string) ([]map[string]any, error) {
	path := fmt.Sprintf("/project/%s/service/%s/query/stats/reset", project, name)
	b, err := h.doer.Do(ctx, "ServiceQueryStatisticsReset", "PUT", path, nil)
	out := new(QueryStatisticsResetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Queries, nil
}
func (h *handler) TaskCreate(ctx context.Context, project string, name string, in *TaskCreateIn) (*Task, error) {
	path := fmt.Sprintf("/project/%s/service/%s/task", project, name)
	b, err := h.doer.Do(ctx, "ServiceTaskCreate", "POST", path, in)
	out := new(TaskCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Task, nil
}
func (h *handler) TaskGet(ctx context.Context, project string, name string, taskId string) (*Task, error) {
	path := fmt.Sprintf("/project/%s/service/%s/task/%s", project, name, taskId)
	b, err := h.doer.Do(ctx, "ServiceTaskGet", "GET", path, nil)
	out := new(TaskGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Task, nil
}
func (h *handler) Update(ctx context.Context, project string, name string, in *UpdateIn) (*Service, error) {
	path := fmt.Sprintf("/project/%s/service/%s", project, name)
	b, err := h.doer.Do(ctx, "ServiceUpdate", "PUT", path, in)
	out := new(UpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Service, nil
}
func (h *handler) UserCreate(ctx context.Context, project string, name string, in *UserCreateIn) (*User, error) {
	path := fmt.Sprintf("/project/%s/service/%s/user", project, name)
	b, err := h.doer.Do(ctx, "ServiceUserCreate", "POST", path, in)
	out := new(UserCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.User, nil
}
func (h *handler) UserCredentialsModify(ctx context.Context, project string, name string, username string, in *UserCredentialsModifyIn) (*Service, error) {
	path := fmt.Sprintf("/project/%s/service/%s/user/%s", project, name, username)
	b, err := h.doer.Do(ctx, "ServiceUserCredentialsModify", "PUT", path, in)
	out := new(UserCredentialsModifyOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Service, nil
}
func (h *handler) UserCredentialsReset(ctx context.Context, project string, name string, username string) (*Service, error) {
	path := fmt.Sprintf("/project/%s/service/%s/user/%s/credentials/reset", project, name, username)
	b, err := h.doer.Do(ctx, "ServiceUserCredentialsReset", "PUT", path, nil)
	out := new(UserCredentialsResetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Service, nil
}
func (h *handler) UserDelete(ctx context.Context, project string, name string, username string) error {
	path := fmt.Sprintf("/project/%s/service/%s/user/%s", project, name, username)
	_, err := h.doer.Do(ctx, "ServiceUserDelete", "DELETE", path, nil)
	return err
}
func (h *handler) UserGet(ctx context.Context, project string, name string, username string) (*User, error) {
	path := fmt.Sprintf("/project/%s/service/%s/user/%s", project, name, username)
	b, err := h.doer.Do(ctx, "ServiceUserGet", "GET", path, nil)
	out := new(UserGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.User, nil
}

type AccessControl struct {
	M3Group            string   `json:"m3_group,omitempty"`
	PgAllowReplication *bool    `json:"pg_allow_replication,omitempty"`
	RedisAclCategories []string `json:"redis_acl_categories,omitempty"`
	RedisAclChannels   []string `json:"redis_acl_channels,omitempty"`
	RedisAclCommands   []string `json:"redis_acl_commands,omitempty"`
	RedisAclKeys       []string `json:"redis_acl_keys,omitempty"`
}
type Acl struct {
	Id         string         `json:"id,omitempty"`
	Permission PermissionType `json:"permission"`
	Topic      string         `json:"topic"`
	Username   string         `json:"username"`
}
type AdditionalRegion struct {
	Cloud       string `json:"cloud"`
	PauseReason string `json:"pause_reason,omitempty"`
	Paused      *bool  `json:"paused,omitempty"`
	Region      string `json:"region,omitempty"`
}
type Alert struct {
	CreateTime  time.Time `json:"create_time"`
	Event       string    `json:"event"`
	ProjectName string    `json:"project_name"`
	ServiceName string    `json:"service_name,omitempty"`
	ServiceType string    `json:"service_type,omitempty"`
	Severity    string    `json:"severity"`
}
type AlertsListOut struct {
	Alerts []Alert `json:"alerts"`
}
type Any struct {
	DefaultVersion         string         `json:"default_version,omitempty"`
	Description            string         `json:"description"`
	LatestAvailableVersion string         `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlan  `json:"service_plans"`
	UserConfigSchema       map[string]any `json:"user_config_schema"`
}
type AuthenticationType string

const (
	AuthenticationTypeNull                AuthenticationType = "null"
	AuthenticationTypeCachingSha2Password AuthenticationType = "caching_sha2_password"
	AuthenticationTypeMysqlNativePassword AuthenticationType = "mysql_native_password"
)

type Backup struct {
	AdditionalRegions []AdditionalRegion `json:"additional_regions,omitempty"`
	DataSize          int                `json:"data_size"`
	BackupName        string             `json:"backup_name"`
	StorageLocation   string             `json:"storage_location,omitempty"`
	BackupTime        time.Time          `json:"backup_time"`
}
type BackupConfig struct {
	FrequentIntervalMinutes    *int             `json:"frequent_interval_minutes,omitempty"`
	FrequentOldestAgeMinutes   *int             `json:"frequent_oldest_age_minutes,omitempty"`
	InfrequentIntervalMinutes  *int             `json:"infrequent_interval_minutes,omitempty"`
	InfrequentOldestAgeMinutes *int             `json:"infrequent_oldest_age_minutes,omitempty"`
	Interval                   int              `json:"interval"`
	MaxCount                   int              `json:"max_count"`
	RecoveryMode               RecoveryModeType `json:"recovery_mode"`
}
type BackupToAnotherRegionReportIn struct {
	Period PeriodType `json:"period,omitempty"`
}
type BackupToAnotherRegionReportOut struct {
	Metrics map[string]any `json:"metrics"`
}
type BackupsGetOut struct {
	Backups []Backup `json:"backups"`
}
type CancelQueryIn struct {
	Pid       *int  `json:"pid,omitempty"`
	Terminate *bool `json:"terminate,omitempty"`
}
type CancelQueryOut struct {
	Success bool `json:"success"`
}
type Component struct {
	Component                 string                        `json:"component"`
	Host                      string                        `json:"host"`
	KafkaAuthenticationMethod KafkaAuthenticationMethodType `json:"kafka_authentication_method,omitempty"`
	Path                      string                        `json:"path,omitempty"`
	Port                      int                           `json:"port"`
	PrivatelinkConnectionId   string                        `json:"privatelink_connection_id,omitempty"`
	Route                     RouteType                     `json:"route"`
	Ssl                       *bool                         `json:"ssl,omitempty"`
	Usage                     UsageType                     `json:"usage"`
}
type ConnectionPool struct {
	ConnectionUri string       `json:"connection_uri"`
	Database      string       `json:"database"`
	PoolMode      PoolModeType `json:"pool_mode"`
	PoolName      string       `json:"pool_name"`
	PoolSize      int          `json:"pool_size"`
	Username      string       `json:"username,omitempty"`
}
type CreateIn struct {
	Cloud                 string               `json:"cloud,omitempty"`
	CopyTags              *bool                `json:"copy_tags,omitempty"`
	DiskSpaceMb           *float64             `json:"disk_space_mb,omitempty"`
	GroupName             string               `json:"group_name,omitempty"`
	Maintenance           *Maintenance         `json:"maintenance,omitempty"`
	Plan                  string               `json:"plan"`
	ProjectVpcId          string               `json:"project_vpc_id,omitempty"`
	ServiceIntegrations   []ServiceIntegration `json:"service_integrations,omitempty"`
	ServiceName           string               `json:"service_name"`
	ServiceType           string               `json:"service_type"`
	StaticIps             []string             `json:"static_ips,omitempty"`
	Tags                  map[string]string    `json:"tags,omitempty"`
	TerminationProtection *bool                `json:"termination_protection,omitempty"`
	UserConfig            map[string]any       `json:"user_config,omitempty"`
}
type CreateOut struct {
	Service *Service `json:"service"`
}
type Database struct {
	DatabaseName string `json:"database_name"`
}
type DatabaseCreateIn struct {
	Database  string `json:"database"`
	LcCollate string `json:"lc_collate,omitempty"`
	LcCtype   string `json:"lc_ctype,omitempty"`
}
type DatabaseListOut struct {
	Databases []Database `json:"databases"`
}
type DatasetImport struct {
	DatasetName DatasetNameType `json:"dataset_name"`
}
type DatasetNameType string

const (
	DatasetNameTypePagila DatasetNameType = "pagila"
)

func DatasetNameTypeChoices() []string {
	return []string{"pagila"}
}

type DowType string

const (
	DowTypeMonday    DowType = "monday"
	DowTypeTuesday   DowType = "tuesday"
	DowTypeWednesday DowType = "wednesday"
	DowTypeThursday  DowType = "thursday"
	DowTypeFriday    DowType = "friday"
	DowTypeSaturday  DowType = "saturday"
	DowTypeSunday    DowType = "sunday"
)

func DowTypeChoices() []string {
	return []string{"monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"}
}

type EnableWritesOut struct {
	Until string `json:"until,omitempty"`
}
type Extension struct {
	Name     string   `json:"name"`
	Versions []string `json:"versions,omitempty"`
}
type GetMigrationStatusOut struct {
	Migration       *Migration        `json:"migration"`
	MigrationDetail []MigrationDetail `json:"migration_detail,omitempty"`
}
type GetOut struct {
	Service *Service `json:"service"`
}
type InfluxDbstatsOut struct {
	DbStats map[string]any `json:"db_stats"`
}
type IntegrationStatus struct {
	State          *State `json:"state"`
	StatusUserDesc string `json:"status_user_desc"`
}
type IntegrationType string

const (
	IntegrationTypeAlertmanager                      IntegrationType = "alertmanager"
	IntegrationTypeAutoscaler                        IntegrationType = "autoscaler"
	IntegrationTypeCaching                           IntegrationType = "caching"
	IntegrationTypeCassandraCrossServiceCluster      IntegrationType = "cassandra_cross_service_cluster"
	IntegrationTypeClickhouseCredentials             IntegrationType = "clickhouse_credentials"
	IntegrationTypeClickhouseKafka                   IntegrationType = "clickhouse_kafka"
	IntegrationTypeClickhousePostgresql              IntegrationType = "clickhouse_postgresql"
	IntegrationTypeDashboard                         IntegrationType = "dashboard"
	IntegrationTypeDatadog                           IntegrationType = "datadog"
	IntegrationTypeDatasource                        IntegrationType = "datasource"
	IntegrationTypeExternalAwsCloudwatchLogs         IntegrationType = "external_aws_cloudwatch_logs"
	IntegrationTypeExternalAwsCloudwatchMetrics      IntegrationType = "external_aws_cloudwatch_metrics"
	IntegrationTypeExternalElasticsearchLogs         IntegrationType = "external_elasticsearch_logs"
	IntegrationTypeExternalGoogleCloudLogging        IntegrationType = "external_google_cloud_logging"
	IntegrationTypeExternalOpensearchLogs            IntegrationType = "external_opensearch_logs"
	IntegrationTypeFlink                             IntegrationType = "flink"
	IntegrationTypeFlinkExternalBigquery             IntegrationType = "flink_external_bigquery"
	IntegrationTypeFlinkExternalKafka                IntegrationType = "flink_external_kafka"
	IntegrationTypeInternalConnectivity              IntegrationType = "internal_connectivity"
	IntegrationTypeJolokia                           IntegrationType = "jolokia"
	IntegrationTypeKafkaConnect                      IntegrationType = "kafka_connect"
	IntegrationTypeKafkaLogs                         IntegrationType = "kafka_logs"
	IntegrationTypeKafkaMirrormaker                  IntegrationType = "kafka_mirrormaker"
	IntegrationTypeLogs                              IntegrationType = "logs"
	IntegrationTypeM3Aggregator                      IntegrationType = "m3aggregator"
	IntegrationTypeM3Coordinator                     IntegrationType = "m3coordinator"
	IntegrationTypeMetrics                           IntegrationType = "metrics"
	IntegrationTypeOpensearchCrossClusterReplication IntegrationType = "opensearch_cross_cluster_replication"
	IntegrationTypeOpensearchCrossClusterSearch      IntegrationType = "opensearch_cross_cluster_search"
	IntegrationTypePrometheus                        IntegrationType = "prometheus"
	IntegrationTypeReadReplica                       IntegrationType = "read_replica"
	IntegrationTypeRsyslog                           IntegrationType = "rsyslog"
	IntegrationTypeSchemaRegistryProxy               IntegrationType = "schema_registry_proxy"
	IntegrationTypeStresstester                      IntegrationType = "stresstester"
	IntegrationTypeThanoscompactor                   IntegrationType = "thanoscompactor"
	IntegrationTypeThanosquery                       IntegrationType = "thanosquery"
	IntegrationTypeThanosstore                       IntegrationType = "thanosstore"
	IntegrationTypeVmalert                           IntegrationType = "vmalert"
)

func IntegrationTypeChoices() []string {
	return []string{"alertmanager", "autoscaler", "caching", "cassandra_cross_service_cluster", "clickhouse_credentials", "clickhouse_kafka", "clickhouse_postgresql", "dashboard", "datadog", "datasource", "external_aws_cloudwatch_logs", "external_aws_cloudwatch_metrics", "external_elasticsearch_logs", "external_google_cloud_logging", "external_opensearch_logs", "flink", "flink_external_bigquery", "flink_external_kafka", "internal_connectivity", "jolokia", "kafka_connect", "kafka_logs", "kafka_mirrormaker", "logs", "m3aggregator", "m3coordinator", "metrics", "opensearch_cross_cluster_replication", "opensearch_cross_cluster_search", "prometheus", "read_replica", "rsyslog", "schema_registry_proxy", "stresstester", "thanoscompactor", "thanosquery", "thanosstore", "vmalert"}
}

type KafkaAuthenticationMethodType string

const (
	KafkaAuthenticationMethodTypeCertificate KafkaAuthenticationMethodType = "certificate"
	KafkaAuthenticationMethodTypeSasl        KafkaAuthenticationMethodType = "sasl"
)

type KmsGetCaout struct {
	Certificate string `json:"certificate"`
}
type KmsGetKeypairOut struct {
	Certificate string `json:"certificate"`
	Key         string `json:"key"`
}
type LevelType string

const (
	LevelTypeNotice  LevelType = "notice"
	LevelTypeWarning LevelType = "warning"
)

type LikelyErrorCauseType string

const (
	LikelyErrorCauseTypeNull        LikelyErrorCauseType = "null"
	LikelyErrorCauseTypeDestination LikelyErrorCauseType = "destination"
	LikelyErrorCauseTypeIntegration LikelyErrorCauseType = "integration"
	LikelyErrorCauseTypeSource      LikelyErrorCauseType = "source"
	LikelyErrorCauseTypeUnknown     LikelyErrorCauseType = "unknown"
)

type ListOut struct {
	Services []Service `json:"services"`
}
type ListProjectServiceTypesOut struct {
	ServiceTypes *ServiceTypes `json:"service_types"`
}
type ListPublicServiceTypesOut struct {
	ServiceTypes *ServiceTypes `json:"service_types"`
}
type ListServiceVersionsOut struct {
	ServiceVersions []ServiceVersion `json:"service_versions"`
}
type Log struct {
	Msg  string     `json:"msg"`
	Time *time.Time `json:"time,omitempty"`
	Unit string     `json:"unit,omitempty"`
}
type Maintenance struct {
	Dow  DowType    `json:"dow,omitempty"`
	Time *time.Time `json:"time,omitempty"`
}
type MasterLinkStatusType string

const (
	MasterLinkStatusTypeUp   MasterLinkStatusType = "up"
	MasterLinkStatusTypeDown MasterLinkStatusType = "down"
)

type MethodType string

const (
	MethodTypePgDump MethodType = "pg_dump"
)

type MetricsFetchIn struct {
	Period PeriodType `json:"period,omitempty"`
}
type MetricsFetchOut struct {
	Metrics map[string]any `json:"metrics"`
}
type Migration struct {
	Error                  string               `json:"error,omitempty"`
	MasterLastIoSecondsAgo *int                 `json:"master_last_io_seconds_ago,omitempty"`
	MasterLinkStatus       MasterLinkStatusType `json:"master_link_status,omitempty"`
	Method                 MethodType           `json:"method"`
	Status                 MigrationStatusType  `json:"status"`
}
type MigrationCheck struct {
	IgnoreDbs         string                   `json:"ignore_dbs,omitempty"`
	Method            MigrationCheckMethodType `json:"method,omitempty"`
	SourceProjectName string                   `json:"source_project_name,omitempty"`
	SourceServiceName string                   `json:"source_service_name,omitempty"`
	SourceServiceUri  string                   `json:"source_service_uri,omitempty"`
}
type MigrationCheckMethodType string

const (
	MigrationCheckMethodTypeDump        MigrationCheckMethodType = "dump"
	MigrationCheckMethodTypeReplication MigrationCheckMethodType = "replication"
)

func MigrationCheckMethodTypeChoices() []string {
	return []string{"dump", "replication"}
}

type MigrationDetail struct {
	Dbname string                    `json:"dbname"`
	Error  string                    `json:"error,omitempty"`
	Method MethodType                `json:"method"`
	Status MigrationDetailStatusType `json:"status"`
}
type MigrationDetailStatusType string

const (
	MigrationDetailStatusTypeDone    MigrationDetailStatusType = "done"
	MigrationDetailStatusTypeFailed  MigrationDetailStatusType = "failed"
	MigrationDetailStatusTypeRunning MigrationDetailStatusType = "running"
	MigrationDetailStatusTypeSyncing MigrationDetailStatusType = "syncing"
)

type MigrationStatusType string

const (
	MigrationStatusTypeDone    MigrationStatusType = "done"
	MigrationStatusTypeFailed  MigrationStatusType = "failed"
	MigrationStatusTypeRunning MigrationStatusType = "running"
	MigrationStatusTypeSyncing MigrationStatusType = "syncing"
)

type NodeState struct {
	Name            string             `json:"name"`
	State           NodeStateStateType `json:"state"`
	ProgressUpdates []ProgressUpdate   `json:"progress_updates,omitempty"`
	Role            RoleType           `json:"role,omitempty"`
	Shard           *Shard             `json:"shard,omitempty"`
}
type NodeStateStateType string

const (
	NodeStateStateTypeLeaving     NodeStateStateType = "leaving"
	NodeStateStateTypeRunning     NodeStateStateType = "running"
	NodeStateStateTypeSettingUpVm NodeStateStateType = "setting_up_vm"
	NodeStateStateTypeSyncingData NodeStateStateType = "syncing_data"
	NodeStateStateTypeTimingOut   NodeStateStateType = "timing_out"
	NodeStateStateTypeUnknown     NodeStateStateType = "unknown"
)

type OperationType string

const (
	OperationTypeAcknowledgeRenewal OperationType = "acknowledge-renewal"
	OperationTypeResetCredentials   OperationType = "reset-credentials"
	OperationTypeSetAccessControl   OperationType = "set-access-control"
)

func OperationTypeChoices() []string {
	return []string{"acknowledge-renewal", "reset-credentials", "set-access-control"}
}

type PeriodType string

const (
	PeriodTypeHour  PeriodType = "hour"
	PeriodTypeDay   PeriodType = "day"
	PeriodTypeWeek  PeriodType = "week"
	PeriodTypeMonth PeriodType = "month"
	PeriodTypeYear  PeriodType = "year"
)

func PeriodTypeChoices() []string {
	return []string{"hour", "day", "week", "month", "year"}
}

type PermissionType string

const (
	PermissionTypeAdmin     PermissionType = "admin"
	PermissionTypeRead      PermissionType = "read"
	PermissionTypeReadwrite PermissionType = "readwrite"
	PermissionTypeWrite     PermissionType = "write"
)

type Pg struct {
	Extensions []Extension `json:"extensions"`
	Version    string      `json:"version"`
}
type PgAvailableExtensionsOut struct {
	Pg []Pg `json:"pg,omitempty"`
}
type PhaseType string

const (
	PhaseTypePrepare    PhaseType = "prepare"
	PhaseTypeBasebackup PhaseType = "basebackup"
	PhaseTypeStream     PhaseType = "stream"
	PhaseTypeFinalize   PhaseType = "finalize"
)

type PoolModeType string

const (
	PoolModeTypeSession     PoolModeType = "session"
	PoolModeTypeTransaction PoolModeType = "transaction"
	PoolModeTypeStatement   PoolModeType = "statement"
)

type ProgressUpdate struct {
	Completed bool      `json:"completed"`
	Current   *int      `json:"current,omitempty"`
	Max       *int      `json:"max,omitempty"`
	Min       *int      `json:"min,omitempty"`
	Phase     PhaseType `json:"phase"`
	Unit      UnitType  `json:"unit,omitempty"`
}
type ProjectGetServiceLogsIn struct {
	Limit     *int          `json:"limit,omitempty"`
	Offset    string        `json:"offset,omitempty"`
	SortOrder SortOrderType `json:"sort_order,omitempty"`
}
type ProjectGetServiceLogsOut struct {
	FirstLogOffset string `json:"first_log_offset"`
	Logs           []Log  `json:"logs"`
	Offset         string `json:"offset"`
}
type ProjectServiceTagsListOut struct {
	Tags map[string]string `json:"tags,omitempty"`
}
type ProjectServiceTagsReplaceIn struct {
	Tags map[string]string `json:"tags,omitempty"`
}
type ProjectServiceTagsUpdateIn struct {
	Tags map[string]string `json:"tags,omitempty"`
}
type Query struct {
	ActiveChannelSubscriptions                *int     `json:"active_channel_subscriptions,omitempty"`
	ActiveDatabase                            string   `json:"active_database,omitempty"`
	ActivePatternMatchingChannelSubscriptions *int     `json:"active_pattern_matching_channel_subscriptions,omitempty"`
	ApplicationName                           string   `json:"application_name,omitempty"`
	BackendStart                              string   `json:"backend_start,omitempty"`
	BackendType                               string   `json:"backend_type,omitempty"`
	BackendXid                                *int     `json:"backend_xid,omitempty"`
	BackendXmin                               *int     `json:"backend_xmin,omitempty"`
	QueryBuffer                               *int     `json:"query_buffer,omitempty"`
	QueryBufferFree                           *int     `json:"query_buffer_free,omitempty"`
	ClientAddr                                string   `json:"client_addr,omitempty"`
	ClientHostname                            string   `json:"client_hostname,omitempty"`
	ClientPort                                *int     `json:"client_port,omitempty"`
	ConnectionAgeSeconds                      *float64 `json:"connection_age_seconds,omitempty"`
	ConnectionIdleSeconds                     *float64 `json:"connection_idle_seconds,omitempty"`
	Datid                                     *int     `json:"datid,omitempty"`
	Datname                                   string   `json:"datname,omitempty"`
	QueryDuration                             *float64 `json:"query_duration,omitempty"`
	Flags                                     []string `json:"flags,omitempty"`
	FlagsRaw                                  string   `json:"flags_raw,omitempty"`
	Id                                        string   `json:"id,omitempty"`
	QueryId                                   *int     `json:"query_id,omitempty"`
	LeaderPid                                 *int     `json:"leader_pid,omitempty"`
	MultiExecCommands                         *int     `json:"multi_exec_commands,omitempty"`
	Name                                      string   `json:"name,omitempty"`
	OutputBuffer                              *int     `json:"output_buffer,omitempty"`
	OutputBufferMemory                        *int     `json:"output_buffer_memory,omitempty"`
	OutputListLength                          *int     `json:"output_list_length,omitempty"`
	Pid                                       *int     `json:"pid,omitempty"`
	Query                                     string   `json:"query,omitempty"`
	QueryStart                                string   `json:"query_start,omitempty"`
	State                                     string   `json:"state,omitempty"`
	StateChange                               string   `json:"state_change,omitempty"`
	Usename                                   string   `json:"usename,omitempty"`
	Usesysid                                  *int     `json:"usesysid,omitempty"`
	WaitEvent                                 string   `json:"wait_event,omitempty"`
	WaitEventType                             string   `json:"wait_event_type,omitempty"`
	Waiting                                   *bool    `json:"waiting,omitempty"`
	XactStart                                 string   `json:"xact_start,omitempty"`
}
type QueryActivityIn struct {
	Limit   *int   `json:"limit,omitempty"`
	Offset  *int   `json:"offset,omitempty"`
	OrderBy string `json:"order_by,omitempty"`
}
type QueryActivityOut struct {
	Queries []Query `json:"queries"`
}
type QueryStatisticsResetOut struct {
	Queries []map[string]any `json:"queries"`
}
type RecoveryModeType string

const (
	RecoveryModeTypeBasic RecoveryModeType = "basic"
	RecoveryModeTypePitr  RecoveryModeType = "pitr"
)

type ResultCode struct {
	Code   string `json:"code"`
	Dbname string `json:"dbname,omitempty"`
}
type RoleType string

const (
	RoleTypeMaster      RoleType = "master"
	RoleTypeStandby     RoleType = "standby"
	RoleTypeReadReplica RoleType = "read-replica"
)

type RouteType string

const (
	RouteTypeDynamic     RouteType = "dynamic"
	RouteTypePublic      RouteType = "public"
	RouteTypePrivate     RouteType = "private"
	RouteTypePrivatelink RouteType = "privatelink"
)

type SchemaRegistryAcl struct {
	Id         string                          `json:"id,omitempty"`
	Resource   string                          `json:"resource"`
	Permission SchemaRegistryAclPermissionType `json:"permission"`
	Username   string                          `json:"username"`
}
type SchemaRegistryAclPermissionType string

const (
	SchemaRegistryAclPermissionTypeSchemaRegistryRead  SchemaRegistryAclPermissionType = "schema_registry_read"
	SchemaRegistryAclPermissionTypeSchemaRegistryWrite SchemaRegistryAclPermissionType = "schema_registry_write"
)

type Service struct {
	Acl                    []Acl                    `json:"acl,omitempty"`
	Backups                []Backup                 `json:"backups,omitempty"`
	CloudDescription       string                   `json:"cloud_description,omitempty"`
	CloudName              string                   `json:"cloud_name"`
	Components             []Component              `json:"components,omitempty"`
	ConnectionInfo         map[string]any           `json:"connection_info,omitempty"`
	ConnectionPools        []ConnectionPool         `json:"connection_pools,omitempty"`
	CreateTime             time.Time                `json:"create_time"`
	Databases              []string                 `json:"databases,omitempty"`
	DiskSpaceMb            *float64                 `json:"disk_space_mb,omitempty"`
	Features               map[string]any           `json:"features,omitempty"`
	GroupList              []string                 `json:"group_list"`
	ServiceIntegrations    []ServiceIntegrationItem `json:"service_integrations"`
	Metadata               map[string]any           `json:"metadata,omitempty"`
	ServiceName            string                   `json:"service_name"`
	NodeCount              *int                     `json:"node_count,omitempty"`
	NodeCpuCount           *int                     `json:"node_cpu_count,omitempty"`
	NodeMemoryMb           *float64                 `json:"node_memory_mb,omitempty"`
	NodeStates             []NodeState              `json:"node_states,omitempty"`
	ServiceNotifications   []ServiceNotification    `json:"service_notifications,omitempty"`
	Plan                   string                   `json:"plan"`
	ProjectVpcId           string                   `json:"project_vpc_id"`
	SchemaRegistryAcl      []SchemaRegistryAcl      `json:"schema_registry_acl,omitempty"`
	Maintenance            *ServiceMaintenance      `json:"maintenance,omitempty"`
	State                  StateType                `json:"state"`
	Tags                   map[string]string        `json:"tags,omitempty"`
	TerminationProtection  bool                     `json:"termination_protection"`
	Topics                 []Topic                  `json:"topics,omitempty"`
	ServiceType            string                   `json:"service_type"`
	ServiceTypeDescription string                   `json:"service_type_description,omitempty"`
	UpdateTime             time.Time                `json:"update_time"`
	ServiceUri             string                   `json:"service_uri"`
	ServiceUriParams       map[string]any           `json:"service_uri_params,omitempty"`
	UserConfig             map[string]any           `json:"user_config"`
	Users                  []User                   `json:"users,omitempty"`
}
type ServiceIntegration struct {
	DestEndpointId   string          `json:"dest_endpoint_id,omitempty"`
	DestProject      string          `json:"dest_project,omitempty"`
	DestService      string          `json:"dest_service,omitempty"`
	IntegrationType  IntegrationType `json:"integration_type"`
	SourceEndpointId string          `json:"source_endpoint_id,omitempty"`
	SourceProject    string          `json:"source_project,omitempty"`
	SourceService    string          `json:"source_service,omitempty"`
	UserConfig       map[string]any  `json:"user_config,omitempty"`
}
type ServiceIntegrationItem struct {
	Active               bool               `json:"active"`
	Description          string             `json:"description"`
	DestEndpoint         string             `json:"dest_endpoint,omitempty"`
	DestEndpointId       string             `json:"dest_endpoint_id,omitempty"`
	DestProject          string             `json:"dest_project"`
	DestService          string             `json:"dest_service,omitempty"`
	DestServiceType      string             `json:"dest_service_type"`
	Enabled              bool               `json:"enabled"`
	IntegrationStatus    *IntegrationStatus `json:"integration_status,omitempty"`
	IntegrationType      string             `json:"integration_type"`
	ServiceIntegrationId string             `json:"service_integration_id"`
	SourceEndpoint       string             `json:"source_endpoint,omitempty"`
	SourceEndpointId     string             `json:"source_endpoint_id,omitempty"`
	SourceProject        string             `json:"source_project"`
	SourceService        string             `json:"source_service"`
	SourceServiceType    string             `json:"source_service_type"`
	UserConfig           map[string]any     `json:"user_config,omitempty"`
}
type ServiceMaintenance struct {
	Dow     ServiceMaintenanceDowType `json:"dow"`
	Time    time.Time                 `json:"time"`
	Updates []Update                  `json:"updates"`
}
type ServiceMaintenanceDowType string

const (
	ServiceMaintenanceDowTypeMonday    ServiceMaintenanceDowType = "monday"
	ServiceMaintenanceDowTypeTuesday   ServiceMaintenanceDowType = "tuesday"
	ServiceMaintenanceDowTypeWednesday ServiceMaintenanceDowType = "wednesday"
	ServiceMaintenanceDowTypeThursday  ServiceMaintenanceDowType = "thursday"
	ServiceMaintenanceDowTypeFriday    ServiceMaintenanceDowType = "friday"
	ServiceMaintenanceDowTypeSaturday  ServiceMaintenanceDowType = "saturday"
	ServiceMaintenanceDowTypeSunday    ServiceMaintenanceDowType = "sunday"
	ServiceMaintenanceDowTypeNever     ServiceMaintenanceDowType = "never"
)

type ServiceNotification struct {
	Level    LevelType                    `json:"level"`
	Message  string                       `json:"message"`
	Metadata *ServiceNotificationMetadata `json:"metadata"`
	Type     Type                         `json:"type"`
}
type ServiceNotificationMetadata struct {
	EndOfLifeHelpArticleUrl string     `json:"end_of_life_help_article_url,omitempty"`
	EndOfLifePolicyUrl      string     `json:"end_of_life_policy_url,omitempty"`
	ServiceEndOfLifeTime    *time.Time `json:"service_end_of_life_time,omitempty"`
	UpgradeToServiceType    string     `json:"upgrade_to_service_type,omitempty"`
	UpgradeToVersion        string     `json:"upgrade_to_version,omitempty"`
}
type ServicePlan struct {
	BackupConfig     *BackupConfig  `json:"backup_config"`
	MaxMemoryPercent *int           `json:"max_memory_percent,omitempty"`
	NodeCount        *int           `json:"node_count,omitempty"`
	Regions          map[string]any `json:"regions,omitempty"`
	ServicePlan      string         `json:"service_plan"`
	ServiceType      string         `json:"service_type"`
	ShardCount       *int           `json:"shard_count,omitempty"`
}
type ServiceTypes struct {
	Any *Any `json:"ANY,omitempty"`
}
type ServiceVersion struct {
	AivenEndOfLifeTime      *time.Time              `json:"aiven_end_of_life_time,omitempty"`
	AvailabilityEndTime     *time.Time              `json:"availability_end_time,omitempty"`
	AvailabilityStartTime   *time.Time              `json:"availability_start_time,omitempty"`
	EndOfLifeHelpArticleUrl string                  `json:"end_of_life_help_article_url,omitempty"`
	MajorVersion            string                  `json:"major_version,omitempty"`
	ServiceType             string                  `json:"service_type,omitempty"`
	State                   ServiceVersionStateType `json:"state,omitempty"`
	TerminationTime         *time.Time              `json:"termination_time,omitempty"`
	UpgradeToServiceType    string                  `json:"upgrade_to_service_type,omitempty"`
	UpgradeToVersion        string                  `json:"upgrade_to_version,omitempty"`
	UpstreamEndOfLifeTime   *time.Time              `json:"upstream_end_of_life_time,omitempty"`
}
type ServiceVersionStateType string

const (
	ServiceVersionStateTypeAvailable   ServiceVersionStateType = "available"
	ServiceVersionStateTypeEol         ServiceVersionStateType = "eol"
	ServiceVersionStateTypePreview     ServiceVersionStateType = "preview"
	ServiceVersionStateTypeTerminated  ServiceVersionStateType = "terminated"
	ServiceVersionStateTypeUnavailable ServiceVersionStateType = "unavailable"
)

type Shard struct {
	Name     string `json:"name,omitempty"`
	Position *int   `json:"position,omitempty"`
}
type SortOrderType string

const (
	SortOrderTypeDesc SortOrderType = "desc"
	SortOrderTypeAsc  SortOrderType = "asc"
)

func SortOrderTypeChoices() []string {
	return []string{"desc", "asc"}
}

type State struct {
	Errors           []string             `json:"errors"`
	LikelyErrorCause LikelyErrorCauseType `json:"likely_error_cause,omitempty"`
	Nodes            map[string]any       `json:"nodes"`
	Status           StatusType           `json:"status"`
}
type StateType string

const (
	StateTypePoweroff    StateType = "POWEROFF"
	StateTypeRebalancing StateType = "REBALANCING"
	StateTypeRebuilding  StateType = "REBUILDING"
	StateTypeRunning     StateType = "RUNNING"
)

type StatusType string

const (
	StatusTypeFailed   StatusType = "failed"
	StatusTypeInactive StatusType = "inactive"
	StatusTypeRunning  StatusType = "running"
	StatusTypeStarting StatusType = "starting"
	StatusTypeUnknown  StatusType = "unknown"
)

type TargetVersionType string

const (
	TargetVersionType12 TargetVersionType = "12"
	TargetVersionType13 TargetVersionType = "13"
	TargetVersionType14 TargetVersionType = "14"
	TargetVersionType15 TargetVersionType = "15"
)

func TargetVersionTypeChoices() []string {
	return []string{"12", "13", "14", "15"}
}

type Task struct {
	CreateTime  time.Time    `json:"create_time"`
	TaskId      string       `json:"task_id"`
	Result      string       `json:"result"`
	ResultCodes []ResultCode `json:"result_codes,omitempty"`
	Success     bool         `json:"success"`
	TaskType    string       `json:"task_type"`
}
type TaskCreateIn struct {
	DatasetImport  *DatasetImport    `json:"dataset_import,omitempty"`
	MigrationCheck *MigrationCheck   `json:"migration_check,omitempty"`
	TargetVersion  TargetVersionType `json:"target_version,omitempty"`
	TaskType       TaskType          `json:"task_type"`
}
type TaskCreateOut struct {
	Task *Task `json:"task"`
}
type TaskGetOut struct {
	Task *Task `json:"task"`
}
type TaskType string

const (
	TaskTypeUpgradeCheck   TaskType = "upgrade_check"
	TaskTypeMigrationCheck TaskType = "migration_check"
	TaskTypeDatasetImport  TaskType = "dataset_import"
)

func TaskTypeChoices() []string {
	return []string{"upgrade_check", "migration_check", "dataset_import"}
}

type Topic struct {
	CleanupPolicy     string         `json:"cleanup_policy"`
	MinInsyncReplicas int            `json:"min_insync_replicas"`
	TopicName         string         `json:"topic_name"`
	Partitions        int            `json:"partitions"`
	Replication       int            `json:"replication"`
	RetentionBytes    int            `json:"retention_bytes"`
	RetentionHours    int            `json:"retention_hours"`
	State             TopicStateType `json:"state,omitempty"`
}
type TopicStateType string

const (
	TopicStateTypeActive      TopicStateType = "ACTIVE"
	TopicStateTypeConfiguring TopicStateType = "CONFIGURING"
	TopicStateTypeDeleting    TopicStateType = "DELETING"
)

type Type string

const (
	TypeServiceEndOfLife         Type = "service_end_of_life"
	TypeServicePoweredOffRemoval Type = "service_powered_off_removal"
)

type UnitType string

const (
	UnitTypeBinlogs           UnitType = "binlogs"
	UnitTypeBytesCompressed   UnitType = "bytes_compressed"
	UnitTypeBytesUncompressed UnitType = "bytes_uncompressed"
	UnitTypeWalLsn            UnitType = "wal_lsn"
)

type Update struct {
	Deadline    string     `json:"deadline,omitempty"`
	Description string     `json:"description,omitempty"`
	StartAfter  string     `json:"start_after,omitempty"`
	StartAt     *time.Time `json:"start_at,omitempty"`
}
type UpdateIn struct {
	Cloud                 string         `json:"cloud,omitempty"`
	DiskSpaceMb           *float64       `json:"disk_space_mb,omitempty"`
	GroupName             string         `json:"group_name,omitempty"`
	Karapace              *bool          `json:"karapace,omitempty"`
	Maintenance           *Maintenance   `json:"maintenance,omitempty"`
	Plan                  string         `json:"plan,omitempty"`
	Powered               *bool          `json:"powered,omitempty"`
	ProjectVpcId          string         `json:"project_vpc_id,omitempty"`
	SchemaRegistryAuthz   *bool          `json:"schema_registry_authz,omitempty"`
	TerminationProtection *bool          `json:"termination_protection,omitempty"`
	UserConfig            map[string]any `json:"user_config,omitempty"`
}
type UpdateOut struct {
	Service *Service `json:"service"`
}
type UsageType string

const (
	UsageTypePrimary UsageType = "primary"
	UsageTypeReplica UsageType = "replica"
)

type User struct {
	Username                      string             `json:"username"`
	AccessCert                    string             `json:"access_cert,omitempty"`
	AccessCertNotValidAfterTime   *time.Time         `json:"access_cert_not_valid_after_time,omitempty"`
	AccessControl                 *AccessControl     `json:"access_control,omitempty"`
	AccessKey                     string             `json:"access_key,omitempty"`
	Authentication                AuthenticationType `json:"authentication,omitempty"`
	ExpiringCertNotValidAfterTime *time.Time         `json:"expiring_cert_not_valid_after_time,omitempty"`
	Password                      string             `json:"password"`
	Type                          string             `json:"type"`
}
type UserCreateIn struct {
	AccessControl  *AccessControl     `json:"access_control,omitempty"`
	Authentication AuthenticationType `json:"authentication,omitempty"`
	Username       string             `json:"username"`
}
type UserCreateOut struct {
	User *User `json:"user"`
}
type UserCredentialsModifyIn struct {
	AccessControl  *AccessControl     `json:"access_control,omitempty"`
	Authentication AuthenticationType `json:"authentication,omitempty"`
	NewPassword    string             `json:"new_password,omitempty"`
	Operation      OperationType      `json:"operation"`
}
type UserCredentialsModifyOut struct {
	Service *Service `json:"service"`
}
type UserCredentialsResetOut struct {
	Service *Service `json:"service"`
}
type UserGetOut struct {
	User *User `json:"user"`
}
