// Code generated by Aiven. DO NOT EDIT.

package flinkjob

import (
	"context"
	"encoding/json"
	"fmt"
)

type Handler interface {
	// Details get a Flink job info
	// ServiceFlinkJobDetails GET /project/{project}/service/{service_name}/flink/job/{job_id}
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkJobDetails
	Details(ctx context.Context, project string, serviceName string, jobId string) (*DetailsOut, error)

	// List get all Flink jobs
	// ServiceFlinkJobsList GET /project/{project}/service/{service_name}/flink/job
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkJobsList
	List(ctx context.Context, project string, serviceName string) ([]Job, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) Details(ctx context.Context, project string, serviceName string, jobId string) (*DetailsOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/flink/job/%s", project, serviceName, jobId)
	b, err := h.doer.Do(ctx, "ServiceFlinkJobDetails", "GET", path, nil)
	out := new(DetailsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) List(ctx context.Context, project string, serviceName string) ([]Job, error) {
	path := fmt.Sprintf("/project/%s/service/%s/flink/job", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceFlinkJobsList", "GET", path, nil)
	out := new(ListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Jobs, nil
}

type DetailsOut struct {
	Duration       *int             `json:"duration,omitempty"`
	EndTime        *int             `json:"end-time,omitempty"`
	IsStoppable    *bool            `json:"isStoppable,omitempty"`
	Jid            string           `json:"jid,omitempty"`
	MaxParallelism *int             `json:"maxParallelism,omitempty"`
	Name           string           `json:"name,omitempty"`
	Now            *int             `json:"now,omitempty"`
	Plan           map[string]any   `json:"plan,omitempty"`
	StartTime      *int             `json:"start-time,omitempty"`
	State          StateType        `json:"state,omitempty"`
	StatusCounts   *StatusCounts    `json:"status-counts,omitempty"`
	Timestamps     map[string]any   `json:"timestamps,omitempty"`
	Vertices       []map[string]any `json:"vertices,omitempty"`
}
type Job struct {
	Id     string     `json:"id,omitempty"`
	Status StatusType `json:"status,omitempty"`
}
type ListOut struct {
	Jobs []Job `json:"jobs,omitempty"`
}
type StateType string

const (
	StateTypeInitializing StateType = "INITIALIZING"
	StateTypeCreated      StateType = "CREATED"
	StateTypeRunning      StateType = "RUNNING"
	StateTypeFailing      StateType = "FAILING"
	StateTypeFailed       StateType = "FAILED"
	StateTypeCancelling   StateType = "CANCELLING"
	StateTypeCanceled     StateType = "CANCELED"
	StateTypeFinished     StateType = "FINISHED"
	StateTypeRestarting   StateType = "RESTARTING"
	StateTypeSuspended    StateType = "SUSPENDED"
	StateTypeReconciling  StateType = "RECONCILING"
)

type StatusCounts struct {
	Canceled     *int `json:"CANCELED,omitempty"`
	Canceling    *int `json:"CANCELING,omitempty"`
	Created      *int `json:"CREATED,omitempty"`
	Deploying    *int `json:"DEPLOYING,omitempty"`
	Failed       *int `json:"FAILED,omitempty"`
	Finished     *int `json:"FINISHED,omitempty"`
	Initializing *int `json:"INITIALIZING,omitempty"`
	Reconciling  *int `json:"RECONCILING,omitempty"`
	Running      *int `json:"RUNNING,omitempty"`
	Scheduled    *int `json:"SCHEDULED,omitempty"`
}
type StatusType string

const (
	StatusTypeInitializing StatusType = "INITIALIZING"
	StatusTypeCreated      StatusType = "CREATED"
	StatusTypeRunning      StatusType = "RUNNING"
	StatusTypeFailing      StatusType = "FAILING"
	StatusTypeFailed       StatusType = "FAILED"
	StatusTypeCancelling   StatusType = "CANCELLING"
	StatusTypeCanceled     StatusType = "CANCELED"
	StatusTypeFinished     StatusType = "FINISHED"
	StatusTypeRestarting   StatusType = "RESTARTING"
	StatusTypeSuspended    StatusType = "SUSPENDED"
	StatusTypeReconciling  StatusType = "RECONCILING"
)
