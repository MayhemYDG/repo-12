// Code generated by Aiven. DO NOT EDIT.

package account

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// AttachPaymentMethod attach payment method for account
	// AccountAttachPaymentMethod POST /account/{account_id}/payment_methods
	// https://api.aiven.io/doc/#tag/Account/operation/AccountAttachPaymentMethod
	AttachPaymentMethod(ctx context.Context, id string, in *AttachPaymentMethodIn) (*Card, error)

	// AuthenticationMethodCreate create a new authentication method
	// AccountAuthenticationMethodCreate POST /account/{account_id}/authentication
	// https://api.aiven.io/doc/#tag/Account/operation/AccountAuthenticationMethodCreate
	AuthenticationMethodCreate(ctx context.Context, id string, in *AuthenticationMethodCreateIn) (*AuthenticationMethod, error)

	// AuthenticationMethodDelete delete authentication method
	// AccountAuthenticationMethodDelete DELETE /account/{account_id}/authentication/{account_authentication_method_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountAuthenticationMethodDelete
	AuthenticationMethodDelete(ctx context.Context, id string, authenticationMethodId string) error

	// AuthenticationMethodGet get details of a single authentication method
	// AccountAuthenticationMethodGet GET /account/{account_id}/authentication/{account_authentication_method_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountAuthenticationMethodGet
	AuthenticationMethodGet(ctx context.Context, id string, authenticationMethodId string) (*AuthenticationMethod, error)

	// AuthenticationMethodUpdate update authentication method
	// AccountAuthenticationMethodUpdate PUT /account/{account_id}/authentication/{account_authentication_method_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountAuthenticationMethodUpdate
	AuthenticationMethodUpdate(ctx context.Context, id string, authenticationMethodId string, in *AuthenticationMethodUpdateIn) (*AuthenticationMethod, error)

	// AuthenticationMethodsList list authentication methods
	// AccountAuthenticationMethodsList GET /account/{account_id}/authentication
	// https://api.aiven.io/doc/#tag/Account/operation/AccountAuthenticationMethodsList
	AuthenticationMethodsList(ctx context.Context, id string) ([]AuthenticationMethod, error)

	// BillingGroupList list account billing groups
	// AccountBillingGroupList GET /account/{account_id}/billing-group
	// https://api.aiven.io/doc/#tag/Account/operation/AccountBillingGroupList
	BillingGroupList(ctx context.Context, id string) ([]AccountBillingGroup, error)

	// Create create a new account
	// AccountCreate POST /account
	// https://api.aiven.io/doc/#tag/Account/operation/AccountCreate
	Create(ctx context.Context, in *CreateIn) (*Account, error)

	// Delete delete empty account
	// AccountDelete DELETE /account/{account_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountDelete
	Delete(ctx context.Context, id string) error

	// EventList list account events
	// AccountEventList GET /account/{account_id}/events
	// https://api.aiven.io/doc/#tag/Account/operation/AccountEventList
	EventList(ctx context.Context, id string) ([]Event, error)

	// Get get account details
	// AccountGet GET /account/{account_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountGet
	Get(ctx context.Context, id string) (*Account, error)

	// List list accounts you have access to
	// AccountList GET /account
	// https://api.aiven.io/doc/#tag/Account/operation/AccountList
	List(ctx context.Context) ([]Account, error)

	// Move move an existing organization unitself
	// AccountMove PUT /account/{account_id}/parent_account
	// https://api.aiven.io/doc/#tag/Account/operation/AccountMove
	Move(ctx context.Context, id string, in *MoveIn) (*Account, error)

	// PaymentMethodDelete delete credit card attached to the account as a payment method
	// AccountPaymentMethodDelete DELETE /account/{account_id}/payment_method/{card_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountPaymentMethodDelete
	PaymentMethodDelete(ctx context.Context, id string, cardId string) error

	// PaymentMethodsList list credit cards attached as a payment method to the account
	// AccountPaymentMethodsList GET /account/{account_id}/payment_methods
	// https://api.aiven.io/doc/#tag/Account/operation/AccountPaymentMethodsList
	PaymentMethodsList(ctx context.Context, id string) ([]CardItem, error)

	// ProjectsList list projects belonging to account
	// AccountProjectsList GET /account/{account_id}/projects
	// https://api.aiven.io/doc/#tag/Account/operation/AccountProjectsList
	ProjectsList(ctx context.Context, id string) (*ProjectsListOut, error)

	// TeamDelete delete a team
	// AccountTeamDelete DELETE /account/{account_id}/team/{team_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamDelete
	TeamDelete(ctx context.Context, id string, teamId string) error

	// TeamGet get details for a single team
	// AccountTeamGet GET /account/{account_id}/team/{team_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamGet
	TeamGet(ctx context.Context, id string, teamId string) (*Team, error)

	// TeamInvitesList list pending invites
	// AccountTeamInvitesList GET /account/{account_id}/team/{team_id}/invites
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamInvitesList
	TeamInvitesList(ctx context.Context, id string, teamId string) ([]AccountInvite, error)

	// TeamList list teams belonging to an account
	// AccountTeamList GET /account/{account_id}/teams
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamList
	TeamList(ctx context.Context, id string) ([]Team, error)

	// TeamMemberCancelInvite cancel pending user invite
	// AccountTeamMemberCancelInvite DELETE /account/{account_id}/team/{team_id}/invites/{user_email}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamMemberCancelInvite
	TeamMemberCancelInvite(ctx context.Context, id string, teamId string, userEmail string) error

	// TeamMemberVerifyInvite confirm account team invite
	// AccountTeamMemberVerifyInvite POST /account/{account_id}/invite/{invite_verification_code}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamMemberVerifyInvite
	TeamMemberVerifyInvite(ctx context.Context, id string, inviteVerificationCode string) (*InviteDetails, error)

	// TeamMembersInvite invite a new member to join the team
	// AccountTeamMembersInvite POST /account/{account_id}/team/{team_id}/members
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamMembersInvite
	TeamMembersInvite(ctx context.Context, id string, teamId string, in *TeamMembersInviteIn) error

	// TeamMembersList list members of a single team
	// AccountTeamMembersList GET /account/{account_id}/team/{team_id}/members
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamMembersList
	TeamMembersList(ctx context.Context, id string, teamId string) ([]Member, error)

	// TeamProjectAssociate associate team to a project
	// AccountTeamProjectAssociate POST /account/{account_id}/team/{team_id}/project/{project}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamProjectAssociate
	TeamProjectAssociate(ctx context.Context, id string, teamId string, project string, in *TeamProjectAssociateIn) error

	// TeamProjectDisassociate disassociate team from a project
	// AccountTeamProjectDisassociate DELETE /account/{account_id}/team/{team_id}/project/{project}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamProjectDisassociate
	TeamProjectDisassociate(ctx context.Context, id string, teamId string, project string) error

	// TeamUpdate update team details
	// AccountTeamUpdate PUT /account/{account_id}/team/{team_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamUpdate
	TeamUpdate(ctx context.Context, id string, teamId string, in *TeamUpdateIn) (*Team, error)

	// Update update existing account
	// AccountUpdate PUT /account/{account_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountUpdate
	Update(ctx context.Context, id string, in *UpdateIn) (*Account, error)

	// UserProjectsList list projects associated with this account that user has access to
	// AccountUserProjectsList GET /account/{account_id}/user/{user_id}/projects
	// https://api.aiven.io/doc/#tag/Account/operation/AccountUserProjectsList
	UserProjectsList(ctx context.Context, id string, userId string) ([]UserProject, error)

	// UsersSearch list/search users who are members of any team on this account
	// AccountUsersSearch POST /account/{account_id}/users/search
	// https://api.aiven.io/doc/#tag/Account/operation/AccountUsersSearch
	UsersSearch(ctx context.Context, id string, in *UsersSearchIn) ([]User, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) AttachPaymentMethod(ctx context.Context, id string, in *AttachPaymentMethodIn) (*Card, error) {
	path := fmt.Sprintf("/account/%s/payment_methods", id)
	b, err := h.doer.Do(ctx, "AccountAttachPaymentMethod", "POST", path, in)
	out := new(AttachPaymentMethodOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Card, nil
}
func (h *handler) AuthenticationMethodCreate(ctx context.Context, id string, in *AuthenticationMethodCreateIn) (*AuthenticationMethod, error) {
	path := fmt.Sprintf("/account/%s/authentication", id)
	b, err := h.doer.Do(ctx, "AccountAuthenticationMethodCreate", "POST", path, in)
	out := new(AuthenticationMethodCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AuthenticationMethod, nil
}
func (h *handler) AuthenticationMethodDelete(ctx context.Context, id string, authenticationMethodId string) error {
	path := fmt.Sprintf("/account/%s/authentication/%s", id, authenticationMethodId)
	_, err := h.doer.Do(ctx, "AccountAuthenticationMethodDelete", "DELETE", path, nil)
	return err
}
func (h *handler) AuthenticationMethodGet(ctx context.Context, id string, authenticationMethodId string) (*AuthenticationMethod, error) {
	path := fmt.Sprintf("/account/%s/authentication/%s", id, authenticationMethodId)
	b, err := h.doer.Do(ctx, "AccountAuthenticationMethodGet", "GET", path, nil)
	out := new(AuthenticationMethodGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AuthenticationMethod, nil
}
func (h *handler) AuthenticationMethodUpdate(ctx context.Context, id string, authenticationMethodId string, in *AuthenticationMethodUpdateIn) (*AuthenticationMethod, error) {
	path := fmt.Sprintf("/account/%s/authentication/%s", id, authenticationMethodId)
	b, err := h.doer.Do(ctx, "AccountAuthenticationMethodUpdate", "PUT", path, in)
	out := new(AuthenticationMethodUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AuthenticationMethod, nil
}
func (h *handler) AuthenticationMethodsList(ctx context.Context, id string) ([]AuthenticationMethod, error) {
	path := fmt.Sprintf("/account/%s/authentication", id)
	b, err := h.doer.Do(ctx, "AccountAuthenticationMethodsList", "GET", path, nil)
	out := new(AuthenticationMethodsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AuthenticationMethods, nil
}
func (h *handler) BillingGroupList(ctx context.Context, id string) ([]AccountBillingGroup, error) {
	path := fmt.Sprintf("/account/%s/billing-group", id)
	b, err := h.doer.Do(ctx, "AccountBillingGroupList", "GET", path, nil)
	out := new(BillingGroupListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AccountBillingGroups, nil
}
func (h *handler) Create(ctx context.Context, in *CreateIn) (*Account, error) {
	path := fmt.Sprintf("/account")
	b, err := h.doer.Do(ctx, "AccountCreate", "POST", path, in)
	out := new(CreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Account, nil
}
func (h *handler) Delete(ctx context.Context, id string) error {
	path := fmt.Sprintf("/account/%s", id)
	_, err := h.doer.Do(ctx, "AccountDelete", "DELETE", path, nil)
	return err
}
func (h *handler) EventList(ctx context.Context, id string) ([]Event, error) {
	path := fmt.Sprintf("/account/%s/events", id)
	b, err := h.doer.Do(ctx, "AccountEventList", "GET", path, nil)
	out := new(EventListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Events, nil
}
func (h *handler) Get(ctx context.Context, id string) (*Account, error) {
	path := fmt.Sprintf("/account/%s", id)
	b, err := h.doer.Do(ctx, "AccountGet", "GET", path, nil)
	out := new(GetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Account, nil
}
func (h *handler) List(ctx context.Context) ([]Account, error) {
	path := fmt.Sprintf("/account")
	b, err := h.doer.Do(ctx, "AccountList", "GET", path, nil)
	out := new(ListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Accounts, nil
}
func (h *handler) Move(ctx context.Context, id string, in *MoveIn) (*Account, error) {
	path := fmt.Sprintf("/account/%s/parent_account", id)
	b, err := h.doer.Do(ctx, "AccountMove", "PUT", path, in)
	out := new(MoveOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Account, nil
}
func (h *handler) PaymentMethodDelete(ctx context.Context, id string, cardId string) error {
	path := fmt.Sprintf("/account/%s/payment_method/%s", id, cardId)
	_, err := h.doer.Do(ctx, "AccountPaymentMethodDelete", "DELETE", path, nil)
	return err
}
func (h *handler) PaymentMethodsList(ctx context.Context, id string) ([]CardItem, error) {
	path := fmt.Sprintf("/account/%s/payment_methods", id)
	b, err := h.doer.Do(ctx, "AccountPaymentMethodsList", "GET", path, nil)
	out := new(PaymentMethodsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Cards, nil
}
func (h *handler) ProjectsList(ctx context.Context, id string) (*ProjectsListOut, error) {
	path := fmt.Sprintf("/account/%s/projects", id)
	b, err := h.doer.Do(ctx, "AccountProjectsList", "GET", path, nil)
	out := new(ProjectsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) TeamDelete(ctx context.Context, id string, teamId string) error {
	path := fmt.Sprintf("/account/%s/team/%s", id, teamId)
	_, err := h.doer.Do(ctx, "AccountTeamDelete", "DELETE", path, nil)
	return err
}
func (h *handler) TeamGet(ctx context.Context, id string, teamId string) (*Team, error) {
	path := fmt.Sprintf("/account/%s/team/%s", id, teamId)
	b, err := h.doer.Do(ctx, "AccountTeamGet", "GET", path, nil)
	out := new(TeamGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Team, nil
}
func (h *handler) TeamInvitesList(ctx context.Context, id string, teamId string) ([]AccountInvite, error) {
	path := fmt.Sprintf("/account/%s/team/%s/invites", id, teamId)
	b, err := h.doer.Do(ctx, "AccountTeamInvitesList", "GET", path, nil)
	out := new(TeamInvitesListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AccountInvites, nil
}
func (h *handler) TeamList(ctx context.Context, id string) ([]Team, error) {
	path := fmt.Sprintf("/account/%s/teams", id)
	b, err := h.doer.Do(ctx, "AccountTeamList", "GET", path, nil)
	out := new(TeamListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Teams, nil
}
func (h *handler) TeamMemberCancelInvite(ctx context.Context, id string, teamId string, userEmail string) error {
	path := fmt.Sprintf("/account/%s/team/%s/invites/%s", id, teamId, userEmail)
	_, err := h.doer.Do(ctx, "AccountTeamMemberCancelInvite", "DELETE", path, nil)
	return err
}
func (h *handler) TeamMemberVerifyInvite(ctx context.Context, id string, inviteVerificationCode string) (*InviteDetails, error) {
	path := fmt.Sprintf("/account/%s/invite/%s", id, inviteVerificationCode)
	b, err := h.doer.Do(ctx, "AccountTeamMemberVerifyInvite", "POST", path, nil)
	out := new(TeamMemberVerifyInviteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.InviteDetails, nil
}
func (h *handler) TeamMembersInvite(ctx context.Context, id string, teamId string, in *TeamMembersInviteIn) error {
	path := fmt.Sprintf("/account/%s/team/%s/members", id, teamId)
	_, err := h.doer.Do(ctx, "AccountTeamMembersInvite", "POST", path, in)
	return err
}
func (h *handler) TeamMembersList(ctx context.Context, id string, teamId string) ([]Member, error) {
	path := fmt.Sprintf("/account/%s/team/%s/members", id, teamId)
	b, err := h.doer.Do(ctx, "AccountTeamMembersList", "GET", path, nil)
	out := new(TeamMembersListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Members, nil
}
func (h *handler) TeamProjectAssociate(ctx context.Context, id string, teamId string, project string, in *TeamProjectAssociateIn) error {
	path := fmt.Sprintf("/account/%s/team/%s/project/%s", id, teamId, project)
	_, err := h.doer.Do(ctx, "AccountTeamProjectAssociate", "POST", path, in)
	return err
}
func (h *handler) TeamProjectDisassociate(ctx context.Context, id string, teamId string, project string) error {
	path := fmt.Sprintf("/account/%s/team/%s/project/%s", id, teamId, project)
	_, err := h.doer.Do(ctx, "AccountTeamProjectDisassociate", "DELETE", path, nil)
	return err
}
func (h *handler) TeamUpdate(ctx context.Context, id string, teamId string, in *TeamUpdateIn) (*Team, error) {
	path := fmt.Sprintf("/account/%s/team/%s", id, teamId)
	b, err := h.doer.Do(ctx, "AccountTeamUpdate", "PUT", path, in)
	out := new(TeamUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Team, nil
}
func (h *handler) Update(ctx context.Context, id string, in *UpdateIn) (*Account, error) {
	path := fmt.Sprintf("/account/%s", id)
	b, err := h.doer.Do(ctx, "AccountUpdate", "PUT", path, in)
	out := new(UpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Account, nil
}
func (h *handler) UserProjectsList(ctx context.Context, id string, userId string) ([]UserProject, error) {
	path := fmt.Sprintf("/account/%s/user/%s/projects", id, userId)
	b, err := h.doer.Do(ctx, "AccountUserProjectsList", "GET", path, nil)
	out := new(UserProjectsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.UserProjects, nil
}
func (h *handler) UsersSearch(ctx context.Context, id string, in *UsersSearchIn) ([]User, error) {
	path := fmt.Sprintf("/account/%s/users/search", id)
	b, err := h.doer.Do(ctx, "AccountUsersSearch", "POST", path, in)
	out := new(UsersSearchOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Users, nil
}

type AccessSourceType string

const (
	AccessSourceTypeDescendantMembership   AccessSourceType = "descendant_membership"
	AccessSourceTypeOrganizationMembership AccessSourceType = "organization_membership"
	AccessSourceTypeProjectMembership      AccessSourceType = "project_membership"
	AccessSourceTypeTeamMembership         AccessSourceType = "team_membership"
)

type Account struct {
	AccessSource          AccessSourceType `json:"access_source,omitempty"`
	CreateTime            time.Time        `json:"create_time"`
	Features              map[string]any   `json:"features,omitempty"`
	AccountId             string           `json:"account_id"`
	IsAccountMember       *bool            `json:"is_account_member,omitempty"`
	IsAccountOwner        bool             `json:"is_account_owner"`
	AccountName           string           `json:"account_name"`
	OrganizationId        string           `json:"organization_id"`
	AccountOwnerTeamId    string           `json:"account_owner_team_id"`
	ParentAccountId       string           `json:"parent_account_id,omitempty"`
	PrimaryBillingGroupId string           `json:"primary_billing_group_id"`
	RootAccountId         string           `json:"root_account_id"`
	TenantId              string           `json:"tenant_id,omitempty"`
	UpdateTime            time.Time        `json:"update_time"`
}
type AccountBillingGroup struct {
	AccountId             string              `json:"account_id"`
	AccountName           string              `json:"account_name"`
	AddressLines          []string            `json:"address_lines"`
	BillingAddress        string              `json:"billing_address,omitempty"`
	BillingCurrency       BillingCurrencyType `json:"billing_currency"`
	BillingEmails         []BillingEmail      `json:"billing_emails"`
	BillingExtraText      string              `json:"billing_extra_text"`
	BillingGroupId        string              `json:"billing_group_id"`
	BillingGroupName      string              `json:"billing_group_name"`
	CardInfo              *CardInfo           `json:"card_info"`
	City                  string              `json:"city"`
	Company               string              `json:"company"`
	Country               string              `json:"country"`
	CountryCode           string              `json:"country_code"`
	EstimatedBalanceLocal string              `json:"estimated_balance_local"`
	EstimatedBalanceUsd   string              `json:"estimated_balance_usd"`
	PaymentMethod         PaymentMethodType   `json:"payment_method"`
	State                 string              `json:"state"`
	VatId                 string              `json:"vat_id"`
	ZipCode               string              `json:"zip_code"`
}
type AccountInvite struct {
	AccountId          string    `json:"account_id"`
	AccountName        string    `json:"account_name"`
	CreateTime         time.Time `json:"create_time"`
	InvitedByUserEmail string    `json:"invited_by_user_email"`
	TeamId             string    `json:"team_id"`
	TeamName           string    `json:"team_name"`
	UserEmail          string    `json:"user_email"`
}
type AttachPaymentMethodIn struct {
	PaymentMethodId string `json:"payment_method_id"`
}
type AttachPaymentMethodOut struct {
	Card *Card `json:"card"`
}
type AuthenticationMethod struct {
	AccountId                        string                     `json:"account_id"`
	AutoJoinTeamId                   string                     `json:"auto_join_team_id"`
	AutoJoinUserGroupId              string                     `json:"auto_join_user_group_id"`
	CreateTime                       time.Time                  `json:"create_time"`
	DeleteTime                       time.Time                  `json:"delete_time"`
	AuthenticationMethodEnabled      bool                       `json:"authentication_method_enabled"`
	AuthenticationMethodId           string                     `json:"authentication_method_id"`
	AuthenticationMethodName         string                     `json:"authentication_method_name,omitempty"`
	OrganizationId                   string                     `json:"organization_id,omitempty"`
	SamlAcsUrl                       string                     `json:"saml_acs_url,omitempty"`
	SamlAssertionSignedEnabled       *bool                      `json:"saml_assertion_signed_enabled,omitempty"`
	SamlAuthnRequestsSignedEnabled   *bool                      `json:"saml_authn_requests_signed_enabled,omitempty"`
	SamlCert                         SamlCertType               `json:"saml_cert,omitempty"`
	SamlCertificate                  string                     `json:"saml_certificate,omitempty"`
	SamlCertificateIssuer            string                     `json:"saml_certificate_issuer,omitempty"`
	SamlCertificateNotValidAfter     string                     `json:"saml_certificate_not_valid_after,omitempty"`
	SamlCertificateNotValidBefore    string                     `json:"saml_certificate_not_valid_before,omitempty"`
	SamlCertificateSubject           string                     `json:"saml_certificate_subject,omitempty"`
	SamlDigestAlgorithm              SamlDigestAlgorithmType    `json:"saml_digest_algorithm,omitempty"`
	SamlEntityId                     string                     `json:"saml_entity_id,omitempty"`
	SamlFieldMapping                 *SamlFieldMapping          `json:"saml_field_mapping,omitempty"`
	SamlIdpLoginAllowed              *bool                      `json:"saml_idp_login_allowed,omitempty"`
	SamlIdpUrl                       string                     `json:"saml_idp_url,omitempty"`
	SamlMetadataUrl                  string                     `json:"saml_metadata_url,omitempty"`
	SamlRequestedAuthnContextEnabled *bool                      `json:"saml_requested_authn_context_enabled,omitempty"`
	SamlSignatureAlgorithm           SamlSignatureAlgorithmType `json:"saml_signature_algorithm,omitempty"`
	SamlSpCertificate                string                     `json:"saml_sp_certificate,omitempty"`
	SamlVariant                      SamlVariantType            `json:"saml_variant,omitempty"`
	State                            StateType                  `json:"state"`
	AuthenticationMethodType         Type                       `json:"authentication_method_type"`
	UpdateTime                       time.Time                  `json:"update_time"`
}
type AuthenticationMethodCreateIn struct {
	AuthenticationMethodName         string                     `json:"authentication_method_name"`
	AuthenticationMethodType         AuthenticationMethodType   `json:"authentication_method_type"`
	AutoJoinTeamId                   string                     `json:"auto_join_team_id,omitempty"`
	AutoJoinUserGroupId              string                     `json:"auto_join_user_group_id,omitempty"`
	SamlAssertionSignedEnabled       *bool                      `json:"saml_assertion_signed_enabled,omitempty"`
	SamlAuthnRequestsSignedEnabled   *bool                      `json:"saml_authn_requests_signed_enabled,omitempty"`
	SamlCertificate                  string                     `json:"saml_certificate,omitempty"`
	SamlDigestAlgorithm              SamlDigestAlgorithmType    `json:"saml_digest_algorithm,omitempty"`
	SamlEntityId                     string                     `json:"saml_entity_id,omitempty"`
	SamlFieldMapping                 *SamlFieldMapping          `json:"saml_field_mapping,omitempty"`
	SamlIdpLoginAllowed              *bool                      `json:"saml_idp_login_allowed,omitempty"`
	SamlIdpUrl                       string                     `json:"saml_idp_url,omitempty"`
	SamlRequestedAuthnContextEnabled *bool                      `json:"saml_requested_authn_context_enabled,omitempty"`
	SamlSignatureAlgorithm           SamlSignatureAlgorithmType `json:"saml_signature_algorithm,omitempty"`
	SamlVariant                      SamlVariantType            `json:"saml_variant,omitempty"`
}
type AuthenticationMethodCreateOut struct {
	AuthenticationMethod *AuthenticationMethod `json:"authentication_method"`
}
type AuthenticationMethodGetOut struct {
	AuthenticationMethod *AuthenticationMethod `json:"authentication_method"`
}
type AuthenticationMethodType string

const (
	AuthenticationMethodTypeInternal AuthenticationMethodType = "internal"
	AuthenticationMethodTypeSaml     AuthenticationMethodType = "saml"
)

func AuthenticationMethodTypeChoices() []string {
	return []string{"internal", "saml"}
}

type AuthenticationMethodUpdateIn struct {
	AuthenticationMethodEnabled      *bool                      `json:"authentication_method_enabled,omitempty"`
	AuthenticationMethodName         string                     `json:"authentication_method_name,omitempty"`
	AutoJoinTeamId                   string                     `json:"auto_join_team_id,omitempty"`
	AutoJoinUserGroupId              string                     `json:"auto_join_user_group_id,omitempty"`
	SamlAssertionSignedEnabled       *bool                      `json:"saml_assertion_signed_enabled,omitempty"`
	SamlAuthnRequestsSignedEnabled   *bool                      `json:"saml_authn_requests_signed_enabled,omitempty"`
	SamlCertificate                  string                     `json:"saml_certificate,omitempty"`
	SamlDigestAlgorithm              SamlDigestAlgorithmType    `json:"saml_digest_algorithm,omitempty"`
	SamlEntityId                     string                     `json:"saml_entity_id,omitempty"`
	SamlFieldMapping                 *SamlFieldMapping          `json:"saml_field_mapping,omitempty"`
	SamlIdpLoginAllowed              *bool                      `json:"saml_idp_login_allowed,omitempty"`
	SamlIdpUrl                       string                     `json:"saml_idp_url,omitempty"`
	SamlRequestedAuthnContextEnabled *bool                      `json:"saml_requested_authn_context_enabled,omitempty"`
	SamlSignatureAlgorithm           SamlSignatureAlgorithmType `json:"saml_signature_algorithm,omitempty"`
	SamlVariant                      SamlVariantType            `json:"saml_variant,omitempty"`
}
type AuthenticationMethodUpdateOut struct {
	AuthenticationMethod *AuthenticationMethod `json:"authentication_method"`
}
type AuthenticationMethodsListOut struct {
	AuthenticationMethods []AuthenticationMethod `json:"authentication_methods"`
}
type BillingCurrencyType string

const (
	BillingCurrencyTypeAud BillingCurrencyType = "AUD"
	BillingCurrencyTypeCad BillingCurrencyType = "CAD"
	BillingCurrencyTypeChf BillingCurrencyType = "CHF"
	BillingCurrencyTypeDkk BillingCurrencyType = "DKK"
	BillingCurrencyTypeEur BillingCurrencyType = "EUR"
	BillingCurrencyTypeGbp BillingCurrencyType = "GBP"
	BillingCurrencyTypeJpy BillingCurrencyType = "JPY"
	BillingCurrencyTypeNok BillingCurrencyType = "NOK"
	BillingCurrencyTypeNzd BillingCurrencyType = "NZD"
	BillingCurrencyTypeSek BillingCurrencyType = "SEK"
	BillingCurrencyTypeSgd BillingCurrencyType = "SGD"
	BillingCurrencyTypeUsd BillingCurrencyType = "USD"
)

type BillingEmail struct {
	Email string `json:"email"`
}
type BillingGroupListOut struct {
	AccountBillingGroups []AccountBillingGroup `json:"account_billing_groups"`
}
type Card struct {
	Brand          string   `json:"brand"`
	Country        string   `json:"country"`
	CountryCode    string   `json:"country_code"`
	ExpMonth       int      `json:"exp_month"`
	ExpYear        int      `json:"exp_year"`
	CardId         string   `json:"card_id"`
	Last4          string   `json:"last4"`
	Name           string   `json:"name"`
	OrganizationId string   `json:"organization_id,omitempty"`
	Projects       []string `json:"projects"`
}
type CardInfo struct {
	Brand       string `json:"brand"`
	CardId      string `json:"card_id"`
	Country     string `json:"country"`
	CountryCode string `json:"country_code"`
	ExpMonth    int    `json:"exp_month"`
	ExpYear     int    `json:"exp_year"`
	Last4       string `json:"last4"`
	Name        string `json:"name"`
	UserEmail   string `json:"user_email"`
}
type CardItem struct {
	Brand       string `json:"brand"`
	CardId      string `json:"card_id"`
	Country     string `json:"country"`
	CountryCode string `json:"country_code"`
	ExpMonth    int    `json:"exp_month"`
	ExpYear     int    `json:"exp_year"`
	Last4       string `json:"last4"`
	Name        string `json:"name"`
}
type CreateIn struct {
	AccountName           string `json:"account_name"`
	ParentAccountId       string `json:"parent_account_id,omitempty"`
	PrimaryBillingGroupId string `json:"primary_billing_group_id,omitempty"`
}
type CreateOut struct {
	Account *Account `json:"account"`
}
type Elasticsearch struct {
	EolDate string `json:"eol_date"`
	Version string `json:"version"`
}
type EndOfLifeExtension struct {
	Elasticsearch *Elasticsearch `json:"elasticsearch,omitempty"`
}
type Event struct {
	AccountId         string    `json:"account_id"`
	ActionDescription string    `json:"action_description"`
	ActionType        string    `json:"action_type"`
	Actor             string    `json:"actor"`
	ActorUserId       string    `json:"actor_user_id"`
	CreateTime        time.Time `json:"create_time"`
	LogEntryId        int       `json:"log_entry_id"`
	TeamId            string    `json:"team_id"`
}
type EventListOut struct {
	Events []Event `json:"events"`
}
type GetOut struct {
	Account *Account `json:"account"`
}
type InviteDetails struct {
	UserEmail string `json:"user_email"`
}
type ListOut struct {
	Accounts []Account `json:"accounts"`
}
type Member struct {
	CreateTime time.Time `json:"create_time"`
	RealName   string    `json:"real_name"`
	TeamId     string    `json:"team_id"`
	TeamName   string    `json:"team_name"`
	UpdateTime time.Time `json:"update_time"`
	UserEmail  string    `json:"user_email"`
	UserId     string    `json:"user_id"`
}
type MemberType string

const (
	MemberTypeAdmin     MemberType = "admin"
	MemberTypeDeveloper MemberType = "developer"
	MemberTypeOperator  MemberType = "operator"
	MemberTypeReadOnly  MemberType = "read_only"
)

type MoveIn struct {
	ParentAccountId string `json:"parent_account_id"`
}
type MoveOut struct {
	Account *Account `json:"account"`
}
type OrderByType string

const (
	OrderByTypeUserEmailasc  OrderByType = "user_email:asc"
	OrderByTypeUserEmaildesc OrderByType = "user_email:desc"
	OrderByTypeUserIdasc     OrderByType = "user_id:asc"
	OrderByTypeUserIddesc    OrderByType = "user_id:desc"
	OrderByTypeRealNameasc   OrderByType = "real_name:asc"
	OrderByTypeRealNamedesc  OrderByType = "real_name:desc"
)

func OrderByTypeChoices() []string {
	return []string{"user_email:asc", "user_email:desc", "user_id:asc", "user_id:desc", "real_name:asc", "real_name:desc"}
}

type PaymentMethodType string

const (
	PaymentMethodTypeAccrual           PaymentMethodType = "accrual"
	PaymentMethodTypeCard              PaymentMethodType = "card"
	PaymentMethodTypeDisabled          PaymentMethodType = "disabled"
	PaymentMethodTypeEmail             PaymentMethodType = "email"
	PaymentMethodTypeNoPaymentExpected PaymentMethodType = "no_payment_expected"
	PaymentMethodTypePartner           PaymentMethodType = "partner"
)

type PaymentMethodsListOut struct {
	Cards []CardItem `json:"cards"`
}
type Project struct {
	AccountId             string              `json:"account_id"`
	AccountName           string              `json:"account_name,omitempty"`
	AddressLines          []string            `json:"address_lines"`
	AvailableCredits      string              `json:"available_credits,omitempty"`
	BillingAddress        string              `json:"billing_address"`
	BillingCurrency       BillingCurrencyType `json:"billing_currency,omitempty"`
	BillingEmails         []BillingEmail      `json:"billing_emails"`
	BillingExtraText      string              `json:"billing_extra_text,omitempty"`
	BillingGroupId        string              `json:"billing_group_id"`
	BillingGroupName      string              `json:"billing_group_name"`
	CardInfo              *CardInfo           `json:"card_info,omitempty"`
	City                  string              `json:"city,omitempty"`
	Company               string              `json:"company,omitempty"`
	Country               string              `json:"country"`
	CountryCode           string              `json:"country_code"`
	DefaultCloud          string              `json:"default_cloud"`
	EndOfLifeExtension    *EndOfLifeExtension `json:"end_of_life_extension,omitempty"`
	EstimatedBalance      string              `json:"estimated_balance"`
	EstimatedBalanceLocal string              `json:"estimated_balance_local,omitempty"`
	Features              map[string]any      `json:"features,omitempty"`
	ProjectName           string              `json:"project_name"`
	OrganizationId        string              `json:"organization_id"`
	PaymentMethod         string              `json:"payment_method"`
	State                 string              `json:"state,omitempty"`
	Tags                  map[string]string   `json:"tags,omitempty"`
	TechEmails            []TechEmail         `json:"tech_emails"`
	TenantId              string              `json:"tenant_id,omitempty"`
	TrialExpirationTime   *time.Time          `json:"trial_expiration_time,omitempty"`
	VatId                 string              `json:"vat_id"`
	ZipCode               string              `json:"zip_code,omitempty"`
}
type ProjectsListOut struct {
	Projects          []Project `json:"projects"`
	TotalProjectCount *int      `json:"total_project_count,omitempty"`
}
type SamlCertType string

const (
	SamlCertTypeAdfs SamlCertType = "adfs"
)

type SamlDigestAlgorithmType string

const (
	SamlDigestAlgorithmTypeSha1   SamlDigestAlgorithmType = "sha1"
	SamlDigestAlgorithmTypeSha256 SamlDigestAlgorithmType = "sha256"
	SamlDigestAlgorithmTypeSha384 SamlDigestAlgorithmType = "sha384"
	SamlDigestAlgorithmTypeSha512 SamlDigestAlgorithmType = "sha512"
)

type SamlFieldMapping struct {
	Email     string `json:"email,omitempty"`
	FirstName string `json:"first_name,omitempty"`
	Identity  string `json:"identity,omitempty"`
	LastName  string `json:"last_name,omitempty"`
	RealName  string `json:"real_name,omitempty"`
}
type SamlSignatureAlgorithmType string

const (
	SamlSignatureAlgorithmTypeRsaSha1   SamlSignatureAlgorithmType = "rsa-sha1"
	SamlSignatureAlgorithmTypeDsaSha1   SamlSignatureAlgorithmType = "dsa-sha1"
	SamlSignatureAlgorithmTypeRsaSha256 SamlSignatureAlgorithmType = "rsa-sha256"
	SamlSignatureAlgorithmTypeRsaSha384 SamlSignatureAlgorithmType = "rsa-sha384"
	SamlSignatureAlgorithmTypeRsaSha512 SamlSignatureAlgorithmType = "rsa-sha512"
)

type SamlVariantType string

const (
	SamlVariantTypeAdfs SamlVariantType = "adfs"
)

type StateType string

const (
	StateTypeActive               StateType = "active"
	StateTypeDeleted              StateType = "deleted"
	StateTypePendingConfiguration StateType = "pending_configuration"
)

type Team struct {
	AccountId  string     `json:"account_id,omitempty"`
	CreateTime *time.Time `json:"create_time,omitempty"`
	TeamId     string     `json:"team_id"`
	TeamName   string     `json:"team_name"`
	UpdateTime *time.Time `json:"update_time,omitempty"`
}
type TeamGetOut struct {
	Team *Team `json:"team"`
}
type TeamInvitesListOut struct {
	AccountInvites []AccountInvite `json:"account_invites"`
}
type TeamListOut struct {
	Teams []Team `json:"teams"`
}
type TeamMemberVerifyInviteOut struct {
	InviteDetails *InviteDetails `json:"invite_details"`
}
type TeamMembersInviteIn struct {
	Email string `json:"email"`
}
type TeamMembersListOut struct {
	Members []Member `json:"members"`
}
type TeamProjectAssociateIn struct {
	TeamType TeamType `json:"team_type"`
}
type TeamType string

const (
	TeamTypeAdmin     TeamType = "admin"
	TeamTypeOperator  TeamType = "operator"
	TeamTypeDeveloper TeamType = "developer"
	TeamTypeReadOnly  TeamType = "read_only"
)

func TeamTypeChoices() []string {
	return []string{"admin", "operator", "developer", "read_only"}
}

type TeamUpdateIn struct {
	TeamName string `json:"team_name"`
}
type TeamUpdateOut struct {
	Team *Team `json:"team"`
}
type TechEmail struct {
	Email string `json:"email"`
}
type Type string

const (
	TypeInternal Type = "internal"
	TypeSaml     Type = "saml"
)

type UpdateIn struct {
	AccountName           string `json:"account_name,omitempty"`
	PrimaryBillingGroupId string `json:"primary_billing_group_id,omitempty"`
}
type UpdateOut struct {
	Account *Account `json:"account"`
}
type User struct {
	UserEmail string `json:"user_email"`
	UserId    string `json:"user_id"`
	RealName  string `json:"real_name"`
}
type UserProject struct {
	AccessType  string     `json:"access_type,omitempty"`
	AccountId   string     `json:"account_id"`
	CreateTime  time.Time  `json:"create_time"`
	MemberType  MemberType `json:"member_type"`
	ProjectName string     `json:"project_name"`
	RealName    string     `json:"real_name"`
	TeamId      string     `json:"team_id"`
	TeamName    string     `json:"team_name"`
	UserEmail   string     `json:"user_email"`
}
type UserProjectsListOut struct {
	UserProjects []UserProject `json:"user_projects"`
}
type UsersSearchIn struct {
	Limit   *int        `json:"limit,omitempty"`
	OrderBy OrderByType `json:"order_by,omitempty"`
	Query   string      `json:"query,omitempty"`
}
type UsersSearchOut struct {
	Users []User `json:"users"`
}
