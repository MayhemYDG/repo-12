// Code generated by Aiven. DO NOT EDIT.

package accountteam

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// AccountTeamDelete delete a team
	// DELETE /account/{account_id}/team/{team_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamDelete
	AccountTeamDelete(ctx context.Context, accountId string, teamId string) error

	// AccountTeamGet get details for a single team
	// GET /account/{account_id}/team/{team_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamGet
	AccountTeamGet(ctx context.Context, accountId string, teamId string) (*Team, error)

	// AccountTeamInvitesList list pending invites
	// GET /account/{account_id}/team/{team_id}/invites
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamInvitesList
	AccountTeamInvitesList(ctx context.Context, accountId string, teamId string) ([]AccountInvite, error)

	// AccountTeamList list teams belonging to an account
	// GET /account/{account_id}/teams
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamList
	AccountTeamList(ctx context.Context, accountId string) ([]Team, error)

	// AccountTeamProjectAssociate associate team to a project
	// POST /account/{account_id}/team/{team_id}/project/{project}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamProjectAssociate
	AccountTeamProjectAssociate(ctx context.Context, accountId string, teamId string, project string, in *AccountTeamProjectAssociateIn) error

	// AccountTeamProjectDisassociate disassociate team from a project
	// DELETE /account/{account_id}/team/{team_id}/project/{project}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamProjectDisassociate
	AccountTeamProjectDisassociate(ctx context.Context, accountId string, teamId string, project string) error

	// AccountTeamUpdate update team details
	// PUT /account/{account_id}/team/{team_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamUpdate
	AccountTeamUpdate(ctx context.Context, accountId string, teamId string, in *AccountTeamUpdateIn) (*Team, error)
}

func NewHandler(doer doer) AccountTeamHandler {
	return AccountTeamHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type AccountTeamHandler struct {
	doer doer
}

func (h *AccountTeamHandler) AccountTeamDelete(ctx context.Context, accountId string, teamId string) error {
	path := fmt.Sprintf("/account/%s/team/%s", accountId, teamId)
	_, err := h.doer.Do(ctx, "AccountTeamDelete", "DELETE", path, nil)
	return err
}
func (h *AccountTeamHandler) AccountTeamGet(ctx context.Context, accountId string, teamId string) (*Team, error) {
	path := fmt.Sprintf("/account/%s/team/%s", accountId, teamId)
	b, err := h.doer.Do(ctx, "AccountTeamGet", "GET", path, nil)
	out := new(accountTeamGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Team, nil
}
func (h *AccountTeamHandler) AccountTeamInvitesList(ctx context.Context, accountId string, teamId string) ([]AccountInvite, error) {
	path := fmt.Sprintf("/account/%s/team/%s/invites", accountId, teamId)
	b, err := h.doer.Do(ctx, "AccountTeamInvitesList", "GET", path, nil)
	out := new(accountTeamInvitesListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AccountInvites, nil
}
func (h *AccountTeamHandler) AccountTeamList(ctx context.Context, accountId string) ([]Team, error) {
	path := fmt.Sprintf("/account/%s/teams", accountId)
	b, err := h.doer.Do(ctx, "AccountTeamList", "GET", path, nil)
	out := new(accountTeamListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Teams, nil
}
func (h *AccountTeamHandler) AccountTeamProjectAssociate(ctx context.Context, accountId string, teamId string, project string, in *AccountTeamProjectAssociateIn) error {
	path := fmt.Sprintf("/account/%s/team/%s/project/%s", accountId, teamId, project)
	_, err := h.doer.Do(ctx, "AccountTeamProjectAssociate", "POST", path, in)
	return err
}
func (h *AccountTeamHandler) AccountTeamProjectDisassociate(ctx context.Context, accountId string, teamId string, project string) error {
	path := fmt.Sprintf("/account/%s/team/%s/project/%s", accountId, teamId, project)
	_, err := h.doer.Do(ctx, "AccountTeamProjectDisassociate", "DELETE", path, nil)
	return err
}
func (h *AccountTeamHandler) AccountTeamUpdate(ctx context.Context, accountId string, teamId string, in *AccountTeamUpdateIn) (*Team, error) {
	path := fmt.Sprintf("/account/%s/team/%s", accountId, teamId)
	b, err := h.doer.Do(ctx, "AccountTeamUpdate", "PUT", path, in)
	out := new(accountTeamUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Team, nil
}

type AccountInvite struct {
	AccountId          string    `json:"account_id"`
	AccountName        string    `json:"account_name"`
	CreateTime         time.Time `json:"create_time"`
	InvitedByUserEmail string    `json:"invited_by_user_email"`
	TeamId             string    `json:"team_id"`
	TeamName           string    `json:"team_name"`
	UserEmail          string    `json:"user_email"`
}
type accountTeamGetOut struct {
	Team *Team `json:"team"`
}
type accountTeamInvitesListOut struct {
	AccountInvites []AccountInvite `json:"account_invites"`
}
type accountTeamListOut struct {
	Teams []Team `json:"teams"`
}
type AccountTeamProjectAssociateIn struct {
	TeamType TeamType `json:"team_type"`
}
type AccountTeamUpdateIn struct {
	TeamName string `json:"team_name"`
}
type accountTeamUpdateOut struct {
	Team *Team `json:"team"`
}
type Team struct {
	AccountId  string     `json:"account_id,omitempty"`
	CreateTime *time.Time `json:"create_time,omitempty"`
	TeamId     string     `json:"team_id"`
	TeamName   string     `json:"team_name"`
	UpdateTime *time.Time `json:"update_time,omitempty"`
}
type TeamType string

const (
	TeamTypeAdmin     TeamType = "admin"
	TeamTypeOperator  TeamType = "operator"
	TeamTypeDeveloper TeamType = "developer"
	TeamTypeReadOnly  TeamType = "read_only"
)

func TeamTypeChoices() []string {
	return []string{"admin", "operator", "developer", "read_only"}
}
