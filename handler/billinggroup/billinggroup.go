// Code generated by Aiven. DO NOT EDIT.

package billinggroup

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// Create create a billing group
	// BillingGroupCreate POST /billing-group
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupCreate
	Create(ctx context.Context, in *CreateIn) (*BillingGroup, error)

	// CreditsClaim claim a credit code
	// BillingGroupCreditsClaim POST /billing-group/{billing_group_id}/credits
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupCreditsClaim
	CreditsClaim(ctx context.Context, id string, in *CreditsClaimIn) (*Credit, error)

	// CreditsList list billing group credits
	// BillingGroupCreditsList GET /billing-group/{billing_group_id}/credits
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupCreditsList
	CreditsList(ctx context.Context, id string) ([]Credit, error)

	// Delete delete billing group
	// BillingGroupDelete DELETE /billing-group/{billing_group_id}
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupDelete
	Delete(ctx context.Context, id string) error

	// EventList list billing group events
	// BillingGroupEventList GET /billing-group/{billing_group_id}/events
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupEventList
	EventList(ctx context.Context, id string) ([]Event, error)

	// Get get billing group details
	// BillingGroupGet GET /billing-group/{billing_group_id}
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupGet
	Get(ctx context.Context, id string) (*BillingGroup, error)

	// InvoiceLinesList get invoice lines for a single invoice
	// BillingGroupInvoiceLinesList GET /billing-group/{billing_group_id}/invoice/{invoice_number}/lines
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupInvoiceLinesList
	InvoiceLinesList(ctx context.Context, id string, invoiceNumber string) ([]Line, error)

	// InvoiceList get invoices generated for billing group
	// BillingGroupInvoiceList GET /billing-group/{billing_group_id}/invoice
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupInvoiceList
	InvoiceList(ctx context.Context, id string) ([]Invoice, error)

	// List list billing groups
	// BillingGroupList GET /billing-group
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupList
	List(ctx context.Context) ([]BillingGroup, error)

	// ProjectAssign assign project to billing group
	// BillingGroupProjectAssign POST /billing-group/{billing_group_id}/project-assign/{project}
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupProjectAssign
	ProjectAssign(ctx context.Context, id string, project string) error

	// ProjectList get projects assigned to billing group
	// BillingGroupProjectList GET /billing-group/{billing_group_id}/projects
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupProjectList
	ProjectList(ctx context.Context, id string) ([]Project, error)

	// ProjectsAssign assign projects to billing group
	// BillingGroupProjectsAssign POST /billing-group/{billing_group_id}/projects-assign
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupProjectsAssign
	ProjectsAssign(ctx context.Context, id string, in *ProjectsAssignIn) error

	// Update update billing group
	// BillingGroupUpdate PUT /billing-group/{billing_group_id}
	// https://api.aiven.io/doc/#tag/BillingGroup/operation/BillingGroupUpdate
	Update(ctx context.Context, id string, in *UpdateIn) (*BillingGroup, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) Create(ctx context.Context, in *CreateIn) (*BillingGroup, error) {
	path := fmt.Sprintf("/billing-group")
	b, err := h.doer.Do(ctx, "BillingGroupCreate", "POST", path, in)
	out := new(createOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.BillingGroup, nil
}
func (h *handler) CreditsClaim(ctx context.Context, id string, in *CreditsClaimIn) (*Credit, error) {
	path := fmt.Sprintf("/billing-group/%s/credits", id)
	b, err := h.doer.Do(ctx, "BillingGroupCreditsClaim", "POST", path, in)
	out := new(creditsClaimOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Credit, nil
}
func (h *handler) CreditsList(ctx context.Context, id string) ([]Credit, error) {
	path := fmt.Sprintf("/billing-group/%s/credits", id)
	b, err := h.doer.Do(ctx, "BillingGroupCreditsList", "GET", path, nil)
	out := new(creditsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Credits, nil
}
func (h *handler) Delete(ctx context.Context, id string) error {
	path := fmt.Sprintf("/billing-group/%s", id)
	_, err := h.doer.Do(ctx, "BillingGroupDelete", "DELETE", path, nil)
	return err
}
func (h *handler) EventList(ctx context.Context, id string) ([]Event, error) {
	path := fmt.Sprintf("/billing-group/%s/events", id)
	b, err := h.doer.Do(ctx, "BillingGroupEventList", "GET", path, nil)
	out := new(eventListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Events, nil
}
func (h *handler) Get(ctx context.Context, id string) (*BillingGroup, error) {
	path := fmt.Sprintf("/billing-group/%s", id)
	b, err := h.doer.Do(ctx, "BillingGroupGet", "GET", path, nil)
	out := new(getOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.BillingGroup, nil
}
func (h *handler) InvoiceLinesList(ctx context.Context, id string, invoiceNumber string) ([]Line, error) {
	path := fmt.Sprintf("/billing-group/%s/invoice/%s/lines", id, invoiceNumber)
	b, err := h.doer.Do(ctx, "BillingGroupInvoiceLinesList", "GET", path, nil)
	out := new(invoiceLinesListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Lines, nil
}
func (h *handler) InvoiceList(ctx context.Context, id string) ([]Invoice, error) {
	path := fmt.Sprintf("/billing-group/%s/invoice", id)
	b, err := h.doer.Do(ctx, "BillingGroupInvoiceList", "GET", path, nil)
	out := new(invoiceListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Invoices, nil
}
func (h *handler) List(ctx context.Context) ([]BillingGroup, error) {
	path := fmt.Sprintf("/billing-group")
	b, err := h.doer.Do(ctx, "BillingGroupList", "GET", path, nil)
	out := new(listOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.BillingGroups, nil
}
func (h *handler) ProjectAssign(ctx context.Context, id string, project string) error {
	path := fmt.Sprintf("/billing-group/%s/project-assign/%s", id, project)
	_, err := h.doer.Do(ctx, "BillingGroupProjectAssign", "POST", path, nil)
	return err
}
func (h *handler) ProjectList(ctx context.Context, id string) ([]Project, error) {
	path := fmt.Sprintf("/billing-group/%s/projects", id)
	b, err := h.doer.Do(ctx, "BillingGroupProjectList", "GET", path, nil)
	out := new(projectListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Projects, nil
}
func (h *handler) ProjectsAssign(ctx context.Context, id string, in *ProjectsAssignIn) error {
	path := fmt.Sprintf("/billing-group/%s/projects-assign", id)
	_, err := h.doer.Do(ctx, "BillingGroupProjectsAssign", "POST", path, in)
	return err
}
func (h *handler) Update(ctx context.Context, id string, in *UpdateIn) (*BillingGroup, error) {
	path := fmt.Sprintf("/billing-group/%s", id)
	b, err := h.doer.Do(ctx, "BillingGroupUpdate", "PUT", path, in)
	out := new(updateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.BillingGroup, nil
}

type BillingCurrencyType string

const (
	BillingCurrencyTypeAud BillingCurrencyType = "AUD"
	BillingCurrencyTypeCad BillingCurrencyType = "CAD"
	BillingCurrencyTypeChf BillingCurrencyType = "CHF"
	BillingCurrencyTypeDkk BillingCurrencyType = "DKK"
	BillingCurrencyTypeEur BillingCurrencyType = "EUR"
	BillingCurrencyTypeGbp BillingCurrencyType = "GBP"
	BillingCurrencyTypeJpy BillingCurrencyType = "JPY"
	BillingCurrencyTypeNok BillingCurrencyType = "NOK"
	BillingCurrencyTypeNzd BillingCurrencyType = "NZD"
	BillingCurrencyTypeSek BillingCurrencyType = "SEK"
	BillingCurrencyTypeSgd BillingCurrencyType = "SGD"
	BillingCurrencyTypeUsd BillingCurrencyType = "USD"
)

type BillingEmail struct {
	Email string `json:"email"`
}
type BillingGroup struct {
	AccountId             string              `json:"account_id"`
	AccountName           string              `json:"account_name"`
	AddressLines          []string            `json:"address_lines"`
	BillingAddress        string              `json:"billing_address,omitempty"`
	BillingCurrency       BillingCurrencyType `json:"billing_currency"`
	BillingEmails         []BillingEmail      `json:"billing_emails"`
	BillingExtraText      string              `json:"billing_extra_text"`
	CardInfo              *CardInfo           `json:"card_info"`
	City                  string              `json:"city"`
	Company               string              `json:"company"`
	Country               string              `json:"country"`
	CountryCode           string              `json:"country_code"`
	EstimatedBalanceLocal string              `json:"estimated_balance_local"`
	EstimatedBalanceUsd   string              `json:"estimated_balance_usd"`
	BillingGroupId        string              `json:"billing_group_id"`
	BillingGroupName      string              `json:"billing_group_name"`
	PaymentMethod         PaymentMethodType   `json:"payment_method"`
	State                 string              `json:"state"`
	VatId                 string              `json:"vat_id"`
	ZipCode               string              `json:"zip_code"`
}
type BillingGroupStateType string

const (
	BillingGroupStateTypeActive  BillingGroupStateType = "active"
	BillingGroupStateTypeDeleted BillingGroupStateType = "deleted"
)

type CardInfo struct {
	Brand       string `json:"brand"`
	CardId      string `json:"card_id"`
	Country     string `json:"country"`
	CountryCode string `json:"country_code"`
	ExpMonth    int    `json:"exp_month"`
	ExpYear     int    `json:"exp_year"`
	Last4       string `json:"last4"`
	Name        string `json:"name"`
	UserEmail   string `json:"user_email"`
}
type CreateIn struct {
	AccountId            string              `json:"account_id,omitempty"`
	AddressLines         []string            `json:"address_lines"`
	BillingCurrency      BillingCurrencyType `json:"billing_currency,omitempty"`
	BillingEmails        []BillingEmail      `json:"billing_emails"`
	BillingExtraText     string              `json:"billing_extra_text,omitempty"`
	BillingGroupName     string              `json:"billing_group_name"`
	CardId               string              `json:"card_id,omitempty"`
	City                 string              `json:"city,omitempty"`
	Company              string              `json:"company,omitempty"`
	CopyFromBillingGroup string              `json:"copy_from_billing_group,omitempty"`
	CountryCode          string              `json:"country_code,omitempty"`
	State                string              `json:"state,omitempty"`
	VatId                string              `json:"vat_id,omitempty"`
	ZipCode              string              `json:"zip_code,omitempty"`
}
type createOut struct {
	BillingGroup *BillingGroup `json:"billing_group"`
}
type Credit struct {
	Code           string     `json:"code,omitempty"`
	ExpireTime     *time.Time `json:"expire_time,omitempty"`
	RemainingValue string     `json:"remaining_value,omitempty"`
	StartTime      *time.Time `json:"start_time,omitempty"`
	Type           Type       `json:"type,omitempty"`
	Value          string     `json:"value,omitempty"`
}
type CreditsClaimIn struct {
	Code string `json:"code"`
}
type creditsClaimOut struct {
	Credit *Credit `json:"credit"`
}
type creditsListOut struct {
	Credits []Credit `json:"credits"`
}
type CurrencyType string

const (
	CurrencyTypeAud CurrencyType = "AUD"
	CurrencyTypeCad CurrencyType = "CAD"
	CurrencyTypeChf CurrencyType = "CHF"
	CurrencyTypeDkk CurrencyType = "DKK"
	CurrencyTypeEur CurrencyType = "EUR"
	CurrencyTypeGbp CurrencyType = "GBP"
	CurrencyTypeJpy CurrencyType = "JPY"
	CurrencyTypeNok CurrencyType = "NOK"
	CurrencyTypeNzd CurrencyType = "NZD"
	CurrencyTypeSek CurrencyType = "SEK"
	CurrencyTypeSgd CurrencyType = "SGD"
	CurrencyTypeUsd CurrencyType = "USD"
)

type Event struct {
	Actor          string     `json:"actor,omitempty"`
	BillingGroupId string     `json:"billing_group_id,omitempty"`
	CreateTime     *time.Time `json:"create_time,omitempty"`
	EventDesc      string     `json:"event_desc,omitempty"`
	LogEntryId     *int       `json:"log_entry_id,omitempty"`
	ProjectId      string     `json:"project_id,omitempty"`
	ProjectName    string     `json:"project_name,omitempty"`
	EventType      string     `json:"event_type,omitempty"`
}
type eventListOut struct {
	Events []Event `json:"events"`
}
type getOut struct {
	BillingGroup *BillingGroup `json:"billing_group"`
}
type Invoice struct {
	BillingGroupId    string                `json:"billing_group_id"`
	BillingGroupName  string                `json:"billing_group_name"`
	BillingGroupState BillingGroupStateType `json:"billing_group_state"`
	Currency          CurrencyType          `json:"currency"`
	DownloadCookie    string                `json:"download_cookie"`
	GeneratedAt       *time.Time            `json:"generated_at,omitempty"`
	InvoiceNumber     string                `json:"invoice_number"`
	PeriodBegin       string                `json:"period_begin"`
	PeriodEnd         string                `json:"period_end"`
	State             StateType             `json:"state"`
	TotalIncVat       string                `json:"total_inc_vat"`
	TotalVatZero      string                `json:"total_vat_zero"`
}
type invoiceLinesListOut struct {
	Lines []Line `json:"lines"`
}
type invoiceListOut struct {
	Invoices []Invoice `json:"invoices"`
}
type Line struct {
	CloudName            string            `json:"cloud_name,omitempty"`
	CommitmentName       string            `json:"commitment_name,omitempty"`
	Description          string            `json:"description"`
	LineType             LineType          `json:"line_type"`
	LocalCurrency        string            `json:"local_currency,omitempty"`
	LinePreDiscountLocal string            `json:"line_pre_discount_local,omitempty"`
	ProjectName          string            `json:"project_name,omitempty"`
	ServiceName          string            `json:"service_name,omitempty"`
	ServicePlan          string            `json:"service_plan,omitempty"`
	ServiceType          ServiceType       `json:"service_type,omitempty"`
	Tags                 map[string]string `json:"tags,omitempty"`
	TimestampBegin       string            `json:"timestamp_begin,omitempty"`
	TimestampEnd         string            `json:"timestamp_end,omitempty"`
	LineTotalLocal       string            `json:"line_total_local,omitempty"`
	LineTotalUsd         string            `json:"line_total_usd"`
}
type LineType string

const (
	LineTypeCommitmentFee     LineType = "commitment_fee"
	LineTypeCreditConsumption LineType = "credit_consumption"
	LineTypeExtraCharge       LineType = "extra_charge"
	LineTypeMultiplier        LineType = "multiplier"
	LineTypeOtherEvent        LineType = "other_event"
	LineTypeRounding          LineType = "rounding"
	LineTypeServiceCharge     LineType = "service_charge"
	LineTypeSupportCharge     LineType = "support_charge"
)

type listOut struct {
	BillingGroups []BillingGroup `json:"billing_groups"`
}
type PaymentMethodType string

const (
	PaymentMethodTypeAccrual           PaymentMethodType = "accrual"
	PaymentMethodTypeCard              PaymentMethodType = "card"
	PaymentMethodTypeDisabled          PaymentMethodType = "disabled"
	PaymentMethodTypeEmail             PaymentMethodType = "email"
	PaymentMethodTypeNoPaymentExpected PaymentMethodType = "no_payment_expected"
	PaymentMethodTypePartner           PaymentMethodType = "partner"
)

type Project struct {
	AvailableCredits string `json:"available_credits"`
	EstimatedBalance string `json:"estimated_balance"`
	ProjectName      string `json:"project_name"`
}
type projectListOut struct {
	Projects []Project `json:"projects"`
}
type ProjectsAssignIn struct {
	ProjectsNames []string `json:"projects_names"`
}
type ServiceType string

const (
	ServiceTypeAlertmanager     ServiceType = "alertmanager"
	ServiceTypeCassandra        ServiceType = "cassandra"
	ServiceTypeClickhouse       ServiceType = "clickhouse"
	ServiceTypeDragonfly        ServiceType = "dragonfly"
	ServiceTypeElasticsearch    ServiceType = "elasticsearch"
	ServiceTypeFlink            ServiceType = "flink"
	ServiceTypeGrafana          ServiceType = "grafana"
	ServiceTypeInfluxdb         ServiceType = "influxdb"
	ServiceTypeKafka            ServiceType = "kafka"
	ServiceTypeKafkaConnect     ServiceType = "kafka_connect"
	ServiceTypeKafkaMirrormaker ServiceType = "kafka_mirrormaker"
	ServiceTypeM3Aggregator     ServiceType = "m3aggregator"
	ServiceTypeM3Db             ServiceType = "m3db"
	ServiceTypeMysql            ServiceType = "mysql"
	ServiceTypeOpensearch       ServiceType = "opensearch"
	ServiceTypePg               ServiceType = "pg"
	ServiceTypeRedis            ServiceType = "redis"
	ServiceTypeStresstester     ServiceType = "stresstester"
	ServiceTypeSw               ServiceType = "sw"
	ServiceTypeThanos           ServiceType = "thanos"
	ServiceTypeThanoscompactor  ServiceType = "thanoscompactor"
	ServiceTypeThanosquery      ServiceType = "thanosquery"
	ServiceTypeThanosreceiver   ServiceType = "thanosreceiver"
	ServiceTypeThanosstore      ServiceType = "thanosstore"
	ServiceTypeVector           ServiceType = "vector"
	ServiceTypeVmalert          ServiceType = "vmalert"
)

type StateType string

const (
	StateTypeAccrual                StateType = "accrual"
	StateTypeConsolidated           StateType = "consolidated"
	StateTypeDue                    StateType = "due"
	StateTypeEstimate               StateType = "estimate"
	StateTypeFailedCreditCardCharge StateType = "failed_credit_card_charge"
	StateTypeFailedNoCreditCard     StateType = "failed_no_credit_card"
	StateTypeMailed                 StateType = "mailed"
	StateTypeNoPaymentExpected      StateType = "no_payment_expected"
	StateTypePaid                   StateType = "paid"
	StateTypePartnerMetering        StateType = "partner_metering"
	StateTypeUncollectible          StateType = "uncollectible"
	StateTypeWaived                 StateType = "waived"
)

type Type string

const (
	TypeDiscount    Type = "discount"
	TypeEmployee    Type = "employee"
	TypeEvaluation  Type = "evaluation"
	TypeInternal    Type = "internal"
	TypeOther       Type = "other"
	TypeOutage      Type = "outage"
	TypePartner     Type = "partner"
	TypePromotion   Type = "promotion"
	TypePurchase    Type = "purchase"
	TypeReferral    Type = "referral"
	TypeSponsorship Type = "sponsorship"
	TypeTrial       Type = "trial"
	TypeTrialOver   Type = "trial_over"
)

type UpdateIn struct {
	AccountId        string              `json:"account_id,omitempty"`
	AddressLines     []string            `json:"address_lines"`
	BillingCurrency  BillingCurrencyType `json:"billing_currency,omitempty"`
	BillingEmails    []BillingEmail      `json:"billing_emails"`
	BillingExtraText string              `json:"billing_extra_text,omitempty"`
	BillingGroupName string              `json:"billing_group_name,omitempty"`
	CardId           string              `json:"card_id,omitempty"`
	City             string              `json:"city,omitempty"`
	Company          string              `json:"company,omitempty"`
	CountryCode      string              `json:"country_code,omitempty"`
	State            string              `json:"state,omitempty"`
	VatId            string              `json:"vat_id,omitempty"`
	ZipCode          string              `json:"zip_code,omitempty"`
}
type updateOut struct {
	BillingGroup *BillingGroup `json:"billing_group"`
}
