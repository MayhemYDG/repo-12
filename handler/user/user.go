// Code generated by Aiven. DO NOT EDIT.

package user

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// AccessTokenCreate create new access token
	// AccessTokenCreate POST /access_token
	// https://api.aiven.io/doc/#tag/Users/operation/AccessTokenCreate
	AccessTokenCreate(ctx context.Context, in *AccessTokenCreateIn) (*AccessTokenCreateOut, error)

	// AccessTokenList list all valid access tokens
	// AccessTokenList GET /access_token
	// https://api.aiven.io/doc/#tag/Users/operation/AccessTokenList
	AccessTokenList(ctx context.Context) ([]Token, error)

	// AccessTokenRevoke revoke an access token
	// AccessTokenRevoke DELETE /access_token/{token_prefix}
	// https://api.aiven.io/doc/#tag/Users/operation/AccessTokenRevoke
	AccessTokenRevoke(ctx context.Context, tokenPrefix string) error

	// AccessTokenUpdate update an existing access token
	// AccessTokenUpdate PUT /access_token/{token_prefix}
	// https://api.aiven.io/doc/#tag/Users/operation/AccessTokenUpdate
	AccessTokenUpdate(ctx context.Context, tokenPrefix string, in *AccessTokenUpdateIn) (*AccessTokenUpdateOut, error)

	// AccountInvitesAccept accept all invites for a single account
	// UserAccountInvitesAccept POST /me/account/invites/accept
	// https://api.aiven.io/doc/#tag/Users/operation/UserAccountInvitesAccept
	AccountInvitesAccept(ctx context.Context, in *AccountInvitesAcceptIn) ([]AccountInvite, error)

	// AccountInvitesList list pending account invites
	// UserAccountInvitesList GET /me/account/invites
	// https://api.aiven.io/doc/#tag/Users/operation/UserAccountInvitesList
	AccountInvitesList(ctx context.Context) ([]AccountInvite, error)

	// Auth authenticate user
	// UserAuth POST /userauth
	// https://api.aiven.io/doc/#tag/Users/operation/UserAuth
	Auth(ctx context.Context, in *AuthIn) (*AuthOut, error)

	// AuthLoginOptions get available login options
	// UserAuthLoginOptions POST /userauth/login_options
	// https://api.aiven.io/doc/#tag/Users/operation/UserAuthLoginOptions
	AuthLoginOptions(ctx context.Context, in *AuthLoginOptionsIn) (*AuthLoginOptionsOut, error)

	// AuthenticationMethodDelete delete linked authentication method, and revoke all associated access tokens
	// UserAuthenticationMethodDelete DELETE /me/authentication_methods/{user_authentication_method_id}
	// https://api.aiven.io/doc/#tag/Users/operation/UserAuthenticationMethodDelete
	AuthenticationMethodDelete(ctx context.Context, authenticationMethodId string) error

	// AuthenticationMethodsList list linked authentication methods
	// UserAuthenticationMethodsList GET /me/authentication_methods
	// https://api.aiven.io/doc/#tag/Users/operation/UserAuthenticationMethodsList
	AuthenticationMethodsList(ctx context.Context) ([]AuthenticationMethod, error)

	// CheckPasswordStrengthExistingUser check password strength for an existing user
	// CheckPasswordStrengthExistingUser POST /me/password_strength
	// https://api.aiven.io/doc/#tag/Users/operation/CheckPasswordStrengthExistingUser
	CheckPasswordStrengthExistingUser(ctx context.Context, in *CheckPasswordStrengthExistingUserIn) (*PasswordStrength, error)

	// CheckPasswordStrengthNewUser check password strength for a new user
	// CheckPasswordStrengthNewUser POST /user/password_strength
	// https://api.aiven.io/doc/#tag/Users/operation/CheckPasswordStrengthNewUser
	CheckPasswordStrengthNewUser(ctx context.Context, in *CheckPasswordStrengthNewUserIn) (*PasswordStrength, error)

	// Create create a user
	// UserCreate POST /user
	// https://api.aiven.io/doc/#tag/Users/operation/UserCreate
	Create(ctx context.Context, in *CreateIn) (*CreateOut, error)

	// ExpireTokens expire all authorization tokens
	// UserExpireTokens POST /me/expire_tokens
	// https://api.aiven.io/doc/#tag/Users/operation/UserExpireTokens
	ExpireTokens(ctx context.Context) error

	// Info get information for the current session's user
	// UserInfo GET /me
	// https://api.aiven.io/doc/#tag/Users/operation/UserInfo
	Info(ctx context.Context) (*InfoOutUser, error)

	// Logout logout user, removing current authentication token
	// UserLogout POST /me/logout
	// https://api.aiven.io/doc/#tag/Users/operation/UserLogout
	Logout(ctx context.Context) error

	// OrganizationMemberGroupsList list user groups of the organization's member
	// OrganizationMemberGroupsList GET /organization/{organization_id}/user/{member_user_id}/user-groups
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationMemberGroupsList
	OrganizationMemberGroupsList(ctx context.Context, organizationId string, memberUserId string) ([]UserGroup, error)

	// OrganizationUserAuthenticationMethodsList list authentication methods for a user in the organization
	// OrganizationUserAuthenticationMethodsList GET /organization/{organization_id}/user/{member_user_id}/authentication_methods
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserAuthenticationMethodsList
	OrganizationUserAuthenticationMethodsList(ctx context.Context, organizationId string, memberUserId string) ([]AuthenticationMethodItem, error)

	// OrganizationUserDelete remove a user from the organization
	// OrganizationUserDelete DELETE /organization/{organization_id}/user/{member_user_id}
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserDelete
	OrganizationUserDelete(ctx context.Context, organizationId string, memberUserId string) error

	// OrganizationUserGet get details on a user of the organization
	// OrganizationUserGet GET /organization/{organization_id}/user/{member_user_id}
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserGet
	OrganizationUserGet(ctx context.Context, organizationId string, memberUserId string) (*OrganizationUserGetOut, error)

	// OrganizationUserList list users of the organization
	// OrganizationUserList GET /organization/{organization_id}/user
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserList
	OrganizationUserList(ctx context.Context, organizationId string) ([]UserItem, error)

	// OrganizationUserPasswordReset reset the password of a managed user in the organization
	// OrganizationUserPasswordReset POST /organization/{organization_id}/user/{member_user_id}/reset_password
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserPasswordReset
	OrganizationUserPasswordReset(ctx context.Context, organizationId string, memberUserId string) error

	// OrganizationUserRevokeToken revoke the token of a managed user in the organization
	// OrganizationUserRevokeToken DELETE /organization/{organization_id}/user/{member_user_id}/access-token/{token_prefix}
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserRevokeToken
	OrganizationUserRevokeToken(ctx context.Context, organizationId string, memberUserId string, tokenPrefix string) error

	// OrganizationUserSet add or modify a user of the organization
	// OrganizationUserSet PUT /organization/{organization_id}/user/{member_user_id}
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserSet
	OrganizationUserSet(ctx context.Context, organizationId string, memberUserId string) (*OrganizationUserSetOut, error)

	// OrganizationUserTokensList list tokens from an organization's member
	// OrganizationUserTokensList GET /organization/{organization_id}/user/{member_user_id}/access-tokens
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserTokensList
	OrganizationUserTokensList(ctx context.Context, organizationId string, memberUserId string) ([]TokenItem, error)

	// OrganizationUserUpdate update details on a user of the organization
	// OrganizationUserUpdate PATCH /organization/{organization_id}/user/{member_user_id}
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserUpdate
	OrganizationUserUpdate(ctx context.Context, organizationId string, memberUserId string, in *OrganizationUserUpdateIn) (*OrganizationUserUpdateOut, error)

	// PasswordChange change user password
	// UserPasswordChange PUT /me/password
	// https://api.aiven.io/doc/#tag/Users/operation/UserPasswordChange
	PasswordChange(ctx context.Context, in *PasswordChangeIn) (string, error)

	// PasswordReset confirm user password reset
	// UserPasswordReset POST /user/password_reset/{verification_code}
	// https://api.aiven.io/doc/#tag/Users/operation/UserPasswordReset
	PasswordReset(ctx context.Context, verificationCode string, in *PasswordResetIn) error

	// PasswordResetRequest request user password reset
	// UserPasswordResetRequest POST /user/password_reset_request
	// https://api.aiven.io/doc/#tag/Users/operation/UserPasswordResetRequest
	PasswordResetRequest(ctx context.Context, in *PasswordResetRequestIn) error

	// TwoFactorAuthConfigure configure two-factor authentication
	// TwoFactorAuthConfigure PUT /me/2fa
	// https://api.aiven.io/doc/#tag/Users/operation/TwoFactorAuthConfigure
	TwoFactorAuthConfigure(ctx context.Context, in *TwoFactorAuthConfigureIn) (*TwoFactorAuthConfigureOut, error)

	// TwoFactorAuthConfigureOTP complete one-time password configuration
	// TwoFactorAuthConfigureOTP PUT /me/2fa/otp
	// https://api.aiven.io/doc/#tag/Users/operation/TwoFactorAuthConfigureOTP
	TwoFactorAuthConfigureOTP(ctx context.Context, in *TwoFactorAuthConfigureOtpin) (*TwoFactorAuthConfigureOtpout, error)

	// Update edit profile
	// UserUpdate PATCH /me
	// https://api.aiven.io/doc/#tag/Users/operation/UserUpdate
	Update(ctx context.Context, in *UpdateIn) (*UpdateOutUser, error)

	// ValidateCreditCode validate campaign credit code
	// ValidateCreditCode GET /user/credit_code/{credit_code}
	// https://api.aiven.io/doc/#tag/Users/operation/ValidateCreditCode
	ValidateCreditCode(ctx context.Context, creditCode string) error

	// ValidateReferralCode validate referral_code code
	// ValidateReferralCode GET /me/referral/validation/{referral_code}
	// https://api.aiven.io/doc/#tag/Users/operation/ValidateReferralCode
	ValidateReferralCode(ctx context.Context, referralCode string) error

	// VerifyEmail confirm user email address
	// UserVerifyEmail POST /user/verify_email/{verification_code}
	// https://api.aiven.io/doc/#tag/Users/operation/UserVerifyEmail
	VerifyEmail(ctx context.Context, verificationCode string) (*InviteDetails, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) AccessTokenCreate(ctx context.Context, in *AccessTokenCreateIn) (*AccessTokenCreateOut, error) {
	path := fmt.Sprintf("/access_token")
	b, err := h.doer.Do(ctx, "AccessTokenCreate", "POST", path, in)
	out := new(AccessTokenCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) AccessTokenList(ctx context.Context) ([]Token, error) {
	path := fmt.Sprintf("/access_token")
	b, err := h.doer.Do(ctx, "AccessTokenList", "GET", path, nil)
	out := new(AccessTokenListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Tokens, nil
}
func (h *handler) AccessTokenRevoke(ctx context.Context, tokenPrefix string) error {
	path := fmt.Sprintf("/access_token/%s", tokenPrefix)
	_, err := h.doer.Do(ctx, "AccessTokenRevoke", "DELETE", path, nil)
	return err
}
func (h *handler) AccessTokenUpdate(ctx context.Context, tokenPrefix string, in *AccessTokenUpdateIn) (*AccessTokenUpdateOut, error) {
	path := fmt.Sprintf("/access_token/%s", tokenPrefix)
	b, err := h.doer.Do(ctx, "AccessTokenUpdate", "PUT", path, in)
	out := new(AccessTokenUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) AccountInvitesAccept(ctx context.Context, in *AccountInvitesAcceptIn) ([]AccountInvite, error) {
	path := fmt.Sprintf("/me/account/invites/accept")
	b, err := h.doer.Do(ctx, "UserAccountInvitesAccept", "POST", path, in)
	out := new(AccountInvitesAcceptOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AccountInvites, nil
}
func (h *handler) AccountInvitesList(ctx context.Context) ([]AccountInvite, error) {
	path := fmt.Sprintf("/me/account/invites")
	b, err := h.doer.Do(ctx, "UserAccountInvitesList", "GET", path, nil)
	out := new(AccountInvitesListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AccountInvites, nil
}
func (h *handler) Auth(ctx context.Context, in *AuthIn) (*AuthOut, error) {
	path := fmt.Sprintf("/userauth")
	b, err := h.doer.Do(ctx, "UserAuth", "POST", path, in)
	out := new(AuthOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) AuthLoginOptions(ctx context.Context, in *AuthLoginOptionsIn) (*AuthLoginOptionsOut, error) {
	path := fmt.Sprintf("/userauth/login_options")
	b, err := h.doer.Do(ctx, "UserAuthLoginOptions", "POST", path, in)
	out := new(AuthLoginOptionsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) AuthenticationMethodDelete(ctx context.Context, authenticationMethodId string) error {
	path := fmt.Sprintf("/me/authentication_methods/%s", authenticationMethodId)
	_, err := h.doer.Do(ctx, "UserAuthenticationMethodDelete", "DELETE", path, nil)
	return err
}
func (h *handler) AuthenticationMethodsList(ctx context.Context) ([]AuthenticationMethod, error) {
	path := fmt.Sprintf("/me/authentication_methods")
	b, err := h.doer.Do(ctx, "UserAuthenticationMethodsList", "GET", path, nil)
	out := new(AuthenticationMethodsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AuthenticationMethods, nil
}
func (h *handler) CheckPasswordStrengthExistingUser(ctx context.Context, in *CheckPasswordStrengthExistingUserIn) (*PasswordStrength, error) {
	path := fmt.Sprintf("/me/password_strength")
	b, err := h.doer.Do(ctx, "CheckPasswordStrengthExistingUser", "POST", path, in)
	out := new(CheckPasswordStrengthExistingUserOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.PasswordStrength, nil
}
func (h *handler) CheckPasswordStrengthNewUser(ctx context.Context, in *CheckPasswordStrengthNewUserIn) (*PasswordStrength, error) {
	path := fmt.Sprintf("/user/password_strength")
	b, err := h.doer.Do(ctx, "CheckPasswordStrengthNewUser", "POST", path, in)
	out := new(CheckPasswordStrengthNewUserOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.PasswordStrength, nil
}
func (h *handler) Create(ctx context.Context, in *CreateIn) (*CreateOut, error) {
	path := fmt.Sprintf("/user")
	b, err := h.doer.Do(ctx, "UserCreate", "POST", path, in)
	out := new(CreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) ExpireTokens(ctx context.Context) error {
	path := fmt.Sprintf("/me/expire_tokens")
	_, err := h.doer.Do(ctx, "UserExpireTokens", "POST", path, nil)
	return err
}
func (h *handler) Info(ctx context.Context) (*InfoOutUser, error) {
	path := fmt.Sprintf("/me")
	b, err := h.doer.Do(ctx, "UserInfo", "GET", path, nil)
	out := new(InfoOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.User, nil
}
func (h *handler) Logout(ctx context.Context) error {
	path := fmt.Sprintf("/me/logout")
	_, err := h.doer.Do(ctx, "UserLogout", "POST", path, nil)
	return err
}
func (h *handler) OrganizationMemberGroupsList(ctx context.Context, organizationId string, memberUserId string) ([]UserGroup, error) {
	path := fmt.Sprintf("/organization/%s/user/%s/user-groups", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationMemberGroupsList", "GET", path, nil)
	out := new(OrganizationMemberGroupsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.UserGroups, nil
}
func (h *handler) OrganizationUserAuthenticationMethodsList(ctx context.Context, organizationId string, memberUserId string) ([]AuthenticationMethodItem, error) {
	path := fmt.Sprintf("/organization/%s/user/%s/authentication_methods", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationUserAuthenticationMethodsList", "GET", path, nil)
	out := new(OrganizationUserAuthenticationMethodsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AuthenticationMethods, nil
}
func (h *handler) OrganizationUserDelete(ctx context.Context, organizationId string, memberUserId string) error {
	path := fmt.Sprintf("/organization/%s/user/%s", organizationId, memberUserId)
	_, err := h.doer.Do(ctx, "OrganizationUserDelete", "DELETE", path, nil)
	return err
}
func (h *handler) OrganizationUserGet(ctx context.Context, organizationId string, memberUserId string) (*OrganizationUserGetOut, error) {
	path := fmt.Sprintf("/organization/%s/user/%s", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationUserGet", "GET", path, nil)
	out := new(OrganizationUserGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) OrganizationUserList(ctx context.Context, organizationId string) ([]UserItem, error) {
	path := fmt.Sprintf("/organization/%s/user", organizationId)
	b, err := h.doer.Do(ctx, "OrganizationUserList", "GET", path, nil)
	out := new(OrganizationUserListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Users, nil
}
func (h *handler) OrganizationUserPasswordReset(ctx context.Context, organizationId string, memberUserId string) error {
	path := fmt.Sprintf("/organization/%s/user/%s/reset_password", organizationId, memberUserId)
	_, err := h.doer.Do(ctx, "OrganizationUserPasswordReset", "POST", path, nil)
	return err
}
func (h *handler) OrganizationUserRevokeToken(ctx context.Context, organizationId string, memberUserId string, tokenPrefix string) error {
	path := fmt.Sprintf("/organization/%s/user/%s/access-token/%s", organizationId, memberUserId, tokenPrefix)
	_, err := h.doer.Do(ctx, "OrganizationUserRevokeToken", "DELETE", path, nil)
	return err
}
func (h *handler) OrganizationUserSet(ctx context.Context, organizationId string, memberUserId string) (*OrganizationUserSetOut, error) {
	path := fmt.Sprintf("/organization/%s/user/%s", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationUserSet", "PUT", path, nil)
	out := new(OrganizationUserSetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) OrganizationUserTokensList(ctx context.Context, organizationId string, memberUserId string) ([]TokenItem, error) {
	path := fmt.Sprintf("/organization/%s/user/%s/access-tokens", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationUserTokensList", "GET", path, nil)
	out := new(OrganizationUserTokensListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Tokens, nil
}
func (h *handler) OrganizationUserUpdate(ctx context.Context, organizationId string, memberUserId string, in *OrganizationUserUpdateIn) (*OrganizationUserUpdateOut, error) {
	path := fmt.Sprintf("/organization/%s/user/%s", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationUserUpdate", "PATCH", path, in)
	out := new(OrganizationUserUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) PasswordChange(ctx context.Context, in *PasswordChangeIn) (string, error) {
	path := fmt.Sprintf("/me/password")
	b, err := h.doer.Do(ctx, "UserPasswordChange", "PUT", path, in)
	out := new(PasswordChangeOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return "", err
	}
	return out.Token, nil
}
func (h *handler) PasswordReset(ctx context.Context, verificationCode string, in *PasswordResetIn) error {
	path := fmt.Sprintf("/user/password_reset/%s", verificationCode)
	_, err := h.doer.Do(ctx, "UserPasswordReset", "POST", path, in)
	return err
}
func (h *handler) PasswordResetRequest(ctx context.Context, in *PasswordResetRequestIn) error {
	path := fmt.Sprintf("/user/password_reset_request")
	_, err := h.doer.Do(ctx, "UserPasswordResetRequest", "POST", path, in)
	return err
}
func (h *handler) TwoFactorAuthConfigure(ctx context.Context, in *TwoFactorAuthConfigureIn) (*TwoFactorAuthConfigureOut, error) {
	path := fmt.Sprintf("/me/2fa")
	b, err := h.doer.Do(ctx, "TwoFactorAuthConfigure", "PUT", path, in)
	out := new(TwoFactorAuthConfigureOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) TwoFactorAuthConfigureOTP(ctx context.Context, in *TwoFactorAuthConfigureOtpin) (*TwoFactorAuthConfigureOtpout, error) {
	path := fmt.Sprintf("/me/2fa/otp")
	b, err := h.doer.Do(ctx, "TwoFactorAuthConfigureOTP", "PUT", path, in)
	out := new(TwoFactorAuthConfigureOtpout)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) Update(ctx context.Context, in *UpdateIn) (*UpdateOutUser, error) {
	path := fmt.Sprintf("/me")
	b, err := h.doer.Do(ctx, "UserUpdate", "PATCH", path, in)
	out := new(UpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.User, nil
}
func (h *handler) ValidateCreditCode(ctx context.Context, creditCode string) error {
	path := fmt.Sprintf("/user/credit_code/%s", creditCode)
	_, err := h.doer.Do(ctx, "ValidateCreditCode", "GET", path, nil)
	return err
}
func (h *handler) ValidateReferralCode(ctx context.Context, referralCode string) error {
	path := fmt.Sprintf("/me/referral/validation/%s", referralCode)
	_, err := h.doer.Do(ctx, "ValidateReferralCode", "GET", path, nil)
	return err
}
func (h *handler) VerifyEmail(ctx context.Context, verificationCode string) (*InviteDetails, error) {
	path := fmt.Sprintf("/user/verify_email/%s", verificationCode)
	b, err := h.doer.Do(ctx, "UserVerifyEmail", "POST", path, nil)
	out := new(VerifyEmailOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.InviteDetails, nil
}

type AccessTokenCreateIn struct {
	Description    string   `json:"description"`
	ExtendWhenUsed *bool    `json:"extend_when_used,omitempty"`
	MaxAgeSeconds  *float64 `json:"max_age_seconds,omitempty"`
	Scopes         []string `json:"scopes"`
}
type AccessTokenCreateOut struct {
	CreateTime                 time.Time  `json:"create_time"`
	CreatedManually            bool       `json:"created_manually"`
	CurrentlyActive            *bool      `json:"currently_active,omitempty"`
	Description                string     `json:"description,omitempty"`
	ExpiryTime                 *time.Time `json:"expiry_time,omitempty"`
	ExtendWhenUsed             bool       `json:"extend_when_used"`
	FullToken                  string     `json:"full_token"`
	LastIp                     string     `json:"last_ip,omitempty"`
	LastUsedTime               *time.Time `json:"last_used_time,omitempty"`
	LastUserAgent              string     `json:"last_user_agent,omitempty"`
	LastUserAgentHumanReadable string     `json:"last_user_agent_human_readable,omitempty"`
	MaxAgeSeconds              float64    `json:"max_age_seconds"`
	Scopes                     []string   `json:"scopes"`
	TokenPrefix                string     `json:"token_prefix"`
}
type AccessTokenListOut struct {
	Tokens []Token `json:"tokens"`
}
type AccessTokenUpdateIn struct {
	Description string `json:"description"`
}
type AccessTokenUpdateOut struct {
	CreateTime                 time.Time  `json:"create_time"`
	CreatedManually            *bool      `json:"created_manually,omitempty"`
	CurrentlyActive            *bool      `json:"currently_active,omitempty"`
	Description                string     `json:"description,omitempty"`
	ExpiryTime                 *time.Time `json:"expiry_time,omitempty"`
	ExtendWhenUsed             bool       `json:"extend_when_used"`
	LastIp                     string     `json:"last_ip,omitempty"`
	LastUsedTime               *time.Time `json:"last_used_time,omitempty"`
	LastUserAgent              string     `json:"last_user_agent,omitempty"`
	LastUserAgentHumanReadable string     `json:"last_user_agent_human_readable,omitempty"`
	MaxAgeSeconds              float64    `json:"max_age_seconds"`
	Scopes                     []string   `json:"scopes"`
	TokenPrefix                string     `json:"token_prefix"`
}
type AccountInvite struct {
	AccountId          string    `json:"account_id"`
	AccountName        string    `json:"account_name"`
	CreateTime         time.Time `json:"create_time"`
	InvitedByUserEmail string    `json:"invited_by_user_email"`
	TeamId             string    `json:"team_id"`
	TeamName           string    `json:"team_name"`
	UserEmail          string    `json:"user_email"`
}
type AccountInvitesAcceptIn struct {
	AccountId string `json:"account_id"`
	TeamId    string `json:"team_id,omitempty"`
}
type AccountInvitesAcceptOut struct {
	AccountInvites []AccountInvite `json:"account_invites"`
}
type AccountInvitesListOut struct {
	AccountInvites []AccountInvite `json:"account_invites"`
}
type ActionType string

const (
	ActionTypeAzureOauth  ActionType = "azure_oauth"
	ActionTypeGithubOauth ActionType = "github_oauth"
	ActionTypeGoogleOauth ActionType = "google_oauth"
	ActionTypeHasuraOauth ActionType = "hasura_oauth"
	ActionTypePassword    ActionType = "password"
	ActionTypeSaml        ActionType = "saml"
	ActionTypeSignup      ActionType = "signup"
)

type AnyType string

const (
	AnyTypeAdmin     AnyType = "admin"
	AnyTypeDeveloper AnyType = "developer"
	AnyTypeOperator  AnyType = "operator"
	AnyTypeReadOnly  AnyType = "read_only"
)

type AuthIn struct {
	Email    string `json:"email"`
	Otp      string `json:"otp,omitempty"`
	Password string `json:"password"`
}
type AuthLoginOptionsIn struct {
	Email string `json:"email,omitempty"`
}
type AuthLoginOptionsOut struct {
	Action      ActionType       `json:"action"`
	Method      MethodType       `json:"method,omitempty"`
	Name        string           `json:"name,omitempty"`
	None        []map[string]any `json:"None"`
	RedirectUrl string           `json:"redirect_url,omitempty"`
}
type AuthOut struct {
	ReturnUrl string `json:"return_url,omitempty"`
	State     string `json:"state"`
	Token     string `json:"token"`
	UserEmail string `json:"user_email"`
}
type AuthenticationMethod struct {
	AuthenticationMethodAccountId string    `json:"authentication_method_account_id"`
	CreateTime                    time.Time `json:"create_time"`
	CurrentlyActive               bool      `json:"currently_active"`
	DeleteTime                    time.Time `json:"delete_time"`
	LastUsedTime                  time.Time `json:"last_used_time"`
	MethodId                      string    `json:"method_id"`
	Name                          string    `json:"name,omitempty"`
	PublicRemoteIdentity          string    `json:"public_remote_identity"`
	RemoteProviderId              string    `json:"remote_provider_id"`
	State                         StateType `json:"state"`
	UpdateTime                    time.Time `json:"update_time"`
	UserEmail                     string    `json:"user_email"`
}
type AuthenticationMethodItem struct {
	IsEnabled2Fa     *bool      `json:"is_enabled_2fa,omitempty"`
	LastUsedTime     *time.Time `json:"last_used_time,omitempty"`
	LocalProviderId  string     `json:"local_provider_id,omitempty"`
	MethodId         string     `json:"method_id,omitempty"`
	Name             string     `json:"name,omitempty"`
	OrganizationId   string     `json:"organization_id,omitempty"`
	RemoteProviderId string     `json:"remote_provider_id"`
	Type             string     `json:"type,omitempty"`
	UserEmail        string     `json:"user_email,omitempty"`
	UserId           string     `json:"user_id,omitempty"`
}
type AuthenticationMethodsListOut struct {
	AuthenticationMethods []AuthenticationMethod `json:"authentication_methods"`
}
type CheckPasswordStrengthExistingUserIn struct {
	NewPassword string `json:"new_password"`
	OldPassword string `json:"old_password"`
}
type CheckPasswordStrengthExistingUserOut struct {
	PasswordStrength *PasswordStrength `json:"password_strength"`
}
type CheckPasswordStrengthNewUserIn struct {
	Email    string `json:"email,omitempty"`
	Password string `json:"password"`
	RealName string `json:"real_name,omitempty"`
}
type CheckPasswordStrengthNewUserOut struct {
	PasswordStrength *PasswordStrength `json:"password_strength"`
}
type CreateIn struct {
	Company                      string   `json:"company,omitempty"`
	CountryCode                  string   `json:"country_code,omitempty"`
	CreditCode                   string   `json:"credit_code,omitempty"`
	Email                        string   `json:"email"`
	EmailCommunicationCategories []string `json:"email_communication_categories"`
	Origin                       string   `json:"origin,omitempty"`
	Password                     string   `json:"password,omitempty"`
	RealName                     string   `json:"real_name"`
	State                        string   `json:"state,omitempty"`
	Token                        string   `json:"token,omitempty"`
}
type CreateOut struct {
	State     string `json:"state"`
	Token     string `json:"token"`
	User      *User  `json:"user"`
	UserEmail string `json:"user_email"`
}
type InfoOut struct {
	User *InfoOutUser `json:"user"`
}
type InfoOutUser struct {
	Auth                   []string            `json:"auth"`
	City                   string              `json:"city,omitempty"`
	Country                string              `json:"country,omitempty"`
	CreateTime             *time.Time          `json:"create_time,omitempty"`
	Department             string              `json:"department,omitempty"`
	Features               map[string]any      `json:"features,omitempty"`
	Intercom               *Intercom           `json:"intercom"`
	Invitations            []Invitation        `json:"invitations"`
	JobTitle               string              `json:"job_title,omitempty"`
	ManagedByScim          *bool               `json:"managed_by_scim,omitempty"`
	ManagingOrganizationId string              `json:"managing_organization_id,omitempty"`
	ProjectMembership      *ProjectMembership  `json:"project_membership"`
	ProjectMemberships     *ProjectMemberships `json:"project_memberships,omitempty"`
	Projects               []string            `json:"projects"`
	RealName               string              `json:"real_name"`
	State                  string              `json:"state"`
	TokenValidityBegin     string              `json:"token_validity_begin,omitempty"`
	User                   string              `json:"user"`
	UserId                 string              `json:"user_id"`
}
type Intercom struct {
	AppId string `json:"app_id"`
	Hmac  string `json:"hmac"`
}
type Invitation struct {
	InviteCode        string    `json:"invite_code"`
	InviteTime        time.Time `json:"invite_time"`
	InvitingUserEmail string    `json:"inviting_user_email"`
	ProjectName       string    `json:"project_name"`
}
type InviteDetails struct {
	UserEmail string `json:"user_email"`
}
type MethodType string

const (
	MethodTypePost MethodType = "POST"
	MethodTypeGet  MethodType = "GET"
)

type OrganizationMemberGroupsListOut struct {
	UserGroups []UserGroup `json:"user_groups"`
}
type OrganizationUserAuthenticationMethodsListOut struct {
	AuthenticationMethods []AuthenticationMethodItem `json:"authentication_methods"`
}
type OrganizationUserGetOut struct {
	IsSuperAdmin     bool      `json:"is_super_admin"`
	JoinTime         time.Time `json:"join_time"`
	LastActivityTime time.Time `json:"last_activity_time"`
	UserId           string    `json:"user_id"`
	UserInfo         *UserInfo `json:"user_info,omitempty"`
}
type OrganizationUserListOut struct {
	Users []UserItem `json:"users"`
}
type OrganizationUserSetOut struct {
	IsSuperAdmin     bool      `json:"is_super_admin"`
	JoinTime         time.Time `json:"join_time"`
	LastActivityTime time.Time `json:"last_activity_time"`
	UserId           string    `json:"user_id"`
	UserInfo         *UserInfo `json:"user_info,omitempty"`
}
type OrganizationUserTokensListOut struct {
	Tokens []TokenItem `json:"tokens"`
}
type OrganizationUserUpdateIn struct {
	City         string `json:"city,omitempty"`
	Country      string `json:"country,omitempty"`
	Department   string `json:"department,omitempty"`
	IsSuperAdmin *bool  `json:"is_super_admin,omitempty"`
	JobTitle     string `json:"job_title,omitempty"`
	RealName     string `json:"real_name,omitempty"`
}
type OrganizationUserUpdateOut struct {
	IsSuperAdmin     bool      `json:"is_super_admin"`
	JoinTime         time.Time `json:"join_time"`
	LastActivityTime time.Time `json:"last_activity_time"`
	UserId           string    `json:"user_id"`
	UserInfo         *UserInfo `json:"user_info,omitempty"`
}
type PasswordChangeIn struct {
	NewPassword string `json:"new_password"`
	Password    string `json:"password"`
}
type PasswordChangeOut struct {
	Token string `json:"token"`
}
type PasswordResetIn struct {
	NewPassword string `json:"new_password"`
}
type PasswordResetRequestIn struct {
	Email string `json:"email"`
}
type PasswordStrength struct {
	IsAcceptable *bool  `json:"is_acceptable,omitempty"`
	Message      string `json:"message"`
	Score        int    `json:"score"`
}
type ProjectMembership struct {
	Any AnyType `json:"ANY,omitempty"`
}
type ProjectMemberships struct {
	Any []string `json:"ANY"`
}
type StateType string

const (
	StateTypeActive  StateType = "active"
	StateTypeDeleted StateType = "deleted"
)

type Token struct {
	CreateTime                 time.Time  `json:"create_time"`
	CreatedManually            bool       `json:"created_manually"`
	CurrentlyActive            *bool      `json:"currently_active,omitempty"`
	Description                string     `json:"description,omitempty"`
	ExpiryTime                 *time.Time `json:"expiry_time,omitempty"`
	ExtendWhenUsed             bool       `json:"extend_when_used"`
	LastIp                     string     `json:"last_ip,omitempty"`
	LastUsedTime               *time.Time `json:"last_used_time,omitempty"`
	LastUserAgent              string     `json:"last_user_agent,omitempty"`
	LastUserAgentHumanReadable string     `json:"last_user_agent_human_readable,omitempty"`
	MaxAgeSeconds              float64    `json:"max_age_seconds"`
	TokenPrefix                string     `json:"token_prefix"`
	Scopes                     []string   `json:"scopes"`
}
type TokenItem struct {
	Description   string    `json:"description"`
	LastIp        string    `json:"last_ip"`
	LastUsedTime  time.Time `json:"last_used_time"`
	LastUserAgent string    `json:"last_user_agent"`
	TokenPrefix   string    `json:"token_prefix"`
}
type TwoFactorAuthConfigureIn struct {
	Method   string `json:"method"`
	Password string `json:"password"`
}
type TwoFactorAuthConfigureOtpin struct {
	Otp      string `json:"otp"`
	Password string `json:"password"`
	Uri      string `json:"uri"`
}
type TwoFactorAuthConfigureOtpout struct {
	Method string `json:"method"`
	Token  string `json:"token"`
}
type TwoFactorAuthConfigureOut struct {
	Method string `json:"method"`
	Qrcode string `json:"qrcode,omitempty"`
	Uri    string `json:"uri,omitempty"`
}
type UpdateIn struct {
	City       string `json:"city,omitempty"`
	Country    string `json:"country,omitempty"`
	Department string `json:"department,omitempty"`
	JobTitle   string `json:"job_title,omitempty"`
	RealName   string `json:"real_name"`
}
type UpdateOut struct {
	User *UpdateOutUser `json:"user"`
}
type UpdateOutUser struct {
	Auth                   []string            `json:"auth"`
	City                   string              `json:"city,omitempty"`
	Country                string              `json:"country,omitempty"`
	CreateTime             *time.Time          `json:"create_time,omitempty"`
	Department             string              `json:"department,omitempty"`
	Features               map[string]any      `json:"features,omitempty"`
	Intercom               *Intercom           `json:"intercom"`
	Invitations            []Invitation        `json:"invitations"`
	JobTitle               string              `json:"job_title,omitempty"`
	ManagedByScim          *bool               `json:"managed_by_scim,omitempty"`
	ManagingOrganizationId string              `json:"managing_organization_id,omitempty"`
	ProjectMembership      *ProjectMembership  `json:"project_membership"`
	ProjectMemberships     *ProjectMemberships `json:"project_memberships,omitempty"`
	Projects               []string            `json:"projects"`
	RealName               string              `json:"real_name"`
	State                  string              `json:"state"`
	TokenValidityBegin     string              `json:"token_validity_begin,omitempty"`
	User                   string              `json:"user"`
	UserId                 string              `json:"user_id"`
}
type User struct {
	Auth                   []string            `json:"auth"`
	City                   string              `json:"city,omitempty"`
	Country                string              `json:"country,omitempty"`
	CreateTime             *time.Time          `json:"create_time,omitempty"`
	Department             string              `json:"department,omitempty"`
	Features               map[string]any      `json:"features,omitempty"`
	UserId                 string              `json:"user_id"`
	Invitations            []Invitation        `json:"invitations"`
	JobTitle               string              `json:"job_title,omitempty"`
	ManagedByScim          *bool               `json:"managed_by_scim,omitempty"`
	ManagingOrganizationId string              `json:"managing_organization_id,omitempty"`
	ProjectMembership      *ProjectMembership  `json:"project_membership"`
	ProjectMemberships     *ProjectMemberships `json:"project_memberships,omitempty"`
	Projects               []string            `json:"projects"`
	RealName               string              `json:"real_name"`
	State                  string              `json:"state"`
	TokenValidityBegin     string              `json:"token_validity_begin,omitempty"`
	User                   string              `json:"user"`
}
type UserGroup struct {
	CreateTime    time.Time `json:"create_time"`
	Description   string    `json:"description"`
	UserGroupId   string    `json:"user_group_id"`
	UserGroupName string    `json:"user_group_name"`
	UpdateTime    time.Time `json:"update_time"`
}
type UserInfo struct {
	City                   string    `json:"city,omitempty"`
	Country                string    `json:"country,omitempty"`
	CreateTime             time.Time `json:"create_time"`
	Department             string    `json:"department,omitempty"`
	IsApplicationUser      bool      `json:"is_application_user"`
	JobTitle               string    `json:"job_title,omitempty"`
	ManagedByScim          bool      `json:"managed_by_scim"`
	ManagingOrganizationId string    `json:"managing_organization_id,omitempty"`
	RealName               string    `json:"real_name"`
	State                  string    `json:"state"`
	UserEmail              string    `json:"user_email"`
}
type UserItem struct {
	IsSuperAdmin     bool      `json:"is_super_admin"`
	JoinTime         time.Time `json:"join_time"`
	LastActivityTime time.Time `json:"last_activity_time"`
	UserId           string    `json:"user_id"`
	UserInfo         *UserInfo `json:"user_info,omitempty"`
}
type VerifyEmailOut struct {
	InviteDetails *InviteDetails `json:"invite_details"`
}
