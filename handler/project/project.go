// Code generated by Aiven. DO NOT EDIT.

package project

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// AlertsList list active alerts for a project
	// ProjectAlertsList GET /project/{project}/alerts
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectAlertsList
	AlertsList(ctx context.Context, project string) ([]Alert, error)

	// Create create a project
	// ProjectCreate POST /project
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectCreate
	Create(ctx context.Context, in *CreateIn) (*Project, error)

	// Delete delete project
	// ProjectDelete DELETE /project/{project}
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectDelete
	Delete(ctx context.Context, project string) error

	// GenerateSbomDownloadUrl generate SBOM for project
	// ProjectGenerateSbomDownloadUrl GET /project/{project}/generate-sbom-download-url/{file_format}
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectGenerateSbomDownloadUrl
	GenerateSbomDownloadUrl(ctx context.Context, project string, fileFormat string) (string, error)

	// Get get project details
	// ProjectGet GET /project/{project}
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectGet
	Get(ctx context.Context, project string) (*Project, error)

	// GetEventLogs get project event log entries
	// ProjectGetEventLogs GET /project/{project}/events
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectGetEventLogs
	GetEventLogs(ctx context.Context, project string) ([]Event, error)

	// Invite send project membership invitation
	// ProjectInvite POST /project/{project}/invite
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectInvite
	Invite(ctx context.Context, project string, in *InviteIn) error

	// InviteAccept confirm project invite
	// ProjectInviteAccept POST /project/{project}/invite/{invite_verification_code}
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectInviteAccept
	InviteAccept(ctx context.Context, project string, inviteVerificationCode string) (*InviteDetails, error)

	// InviteDelete delete an invitation to a project
	// ProjectInviteDelete DELETE /project/{project}/invite/{invited_email}
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectInviteDelete
	InviteDelete(ctx context.Context, project string, invitedEmail string) error

	// List list projects
	// ProjectList GET /project
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectList
	List(ctx context.Context) (*ListOut, error)

	// ListProjectVpcPeeringConnectionTypes list VPC peering connection types for a project
	// ListProjectVpcPeeringConnectionTypes GET /project/{project}/vpc-peering-connection-types
	// https://api.aiven.io/doc/#tag/Project/operation/ListProjectVpcPeeringConnectionTypes
	ListProjectVpcPeeringConnectionTypes(ctx context.Context, project string) ([]VpcPeeringConnectionType, error)

	// TagsList list all tags attached to this project
	// ProjectTagsList GET /project/{project}/tags
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectTagsList
	TagsList(ctx context.Context, project string) (map[string]string, error)

	// TagsReplace replace all project tags with a new set of tags, deleting old ones
	// ProjectTagsReplace PUT /project/{project}/tags
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectTagsReplace
	TagsReplace(ctx context.Context, project string, in *TagsReplaceIn) error

	// TagsUpdate update one or more tags, creating ones that don't exist, and deleting ones given NULL value
	// ProjectTagsUpdate PATCH /project/{project}/tags
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectTagsUpdate
	TagsUpdate(ctx context.Context, project string, in *TagsUpdateIn) error

	// Update update project
	// ProjectUpdate PUT /project/{project}
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectUpdate
	Update(ctx context.Context, project string, in *UpdateIn) (*Project, error)

	// UserList list users with access to the project. May contain same user multiple times if they belong to multiple teams associated to the project
	// ProjectUserList GET /project/{project}/users
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectUserList
	UserList(ctx context.Context, project string) (*UserListOut, error)

	// UserRemove remove user from the project
	// ProjectUserRemove DELETE /project/{project}/user/{user_email}
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectUserRemove
	UserRemove(ctx context.Context, project string, userEmail string) error

	// UserUpdate update a project user
	// ProjectUserUpdate PUT /project/{project}/user/{user_email}
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectUserUpdate
	UserUpdate(ctx context.Context, project string, userEmail string, in *UserUpdateIn) error

	// VpcCreate create a VPC in a cloud for the project
	// VpcCreate POST /project/{project}/vpcs
	// https://api.aiven.io/doc/#tag/Project/operation/VpcCreate
	VpcCreate(ctx context.Context, project string, in *VpcCreateIn) (*VpcCreateOut, error)

	// VpcDelete delete a project VPC
	// VpcDelete DELETE /project/{project}/vpcs/{project_vpc_id}
	// https://api.aiven.io/doc/#tag/Project/operation/VpcDelete
	VpcDelete(ctx context.Context, project string, vpcId string) (*VpcDeleteOut, error)

	// VpcGet get VPC information
	// VpcGet GET /project/{project}/vpcs/{project_vpc_id}
	// https://api.aiven.io/doc/#tag/Project/operation/VpcGet
	VpcGet(ctx context.Context, project string, vpcId string) (*VpcGetOut, error)

	// VpcList list VPCs for a project
	// VpcList GET /project/{project}/vpcs
	// https://api.aiven.io/doc/#tag/Project/operation/VpcList
	VpcList(ctx context.Context, project string) ([]Vpc, error)

	// VpcPeeringConnectionCreate create a peering connection for a project VPC
	// VpcPeeringConnectionCreate POST /project/{project}/vpcs/{project_vpc_id}/peering-connections
	// https://api.aiven.io/doc/#tag/Project/operation/VpcPeeringConnectionCreate
	VpcPeeringConnectionCreate(ctx context.Context, project string, vpcId string, in *VpcPeeringConnectionCreateIn) (*VpcPeeringConnectionCreateOut, error)

	// VpcPeeringConnectionDelete delete a peering connection for a project VPC
	// VpcPeeringConnectionDelete DELETE /project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-vpcs/{peer_vpc}
	// https://api.aiven.io/doc/#tag/Project/operation/VpcPeeringConnectionDelete
	VpcPeeringConnectionDelete(ctx context.Context, project string, vpcId string, peerCloudAccount string, peerVpc string) (*VpcPeeringConnectionDeleteOut, error)

	// VpcPeeringConnectionUpdate update user-defined peer network CIDRs for a project VPC
	// VpcPeeringConnectionUpdate PUT /project/{project}/vpcs/{project_vpc_id}/user-peer-network-cidrs
	// https://api.aiven.io/doc/#tag/Project/operation/VpcPeeringConnectionUpdate
	VpcPeeringConnectionUpdate(ctx context.Context, project string, vpcId string, in *VpcPeeringConnectionUpdateIn) (*VpcPeeringConnectionUpdateOut, error)

	// VpcPeeringConnectionWithRegionDelete delete a peering connection for a project VPC
	// VpcPeeringConnectionWithRegionDelete DELETE /project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-vpcs/{peer_vpc}/peer-regions/{peer_region}
	// https://api.aiven.io/doc/#tag/Project/operation/VpcPeeringConnectionWithRegionDelete
	VpcPeeringConnectionWithRegionDelete(ctx context.Context, project string, vpcId string, peerCloudAccount string, peerVpc string, peerRegion string) (*VpcPeeringConnectionWithRegionDeleteOut, error)

	// VpcPeeringConnectionWithResourceGroupDelete delete a peering connection for a project VPC
	// VpcPeeringConnectionWithResourceGroupDelete DELETE /project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-resource-groups/{peer_resource_group}/peer-vpcs/{peer_vpc}
	// https://api.aiven.io/doc/#tag/Project/operation/VpcPeeringConnectionWithResourceGroupDelete
	VpcPeeringConnectionWithResourceGroupDelete(ctx context.Context, project string, vpcId string, peerCloudAccount string, peerResourceGroup string, peerVpc string) (*VpcPeeringConnectionWithResourceGroupDeleteOut, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) AlertsList(ctx context.Context, project string) ([]Alert, error) {
	path := fmt.Sprintf("/project/%s/alerts", project)
	b, err := h.doer.Do(ctx, "ProjectAlertsList", "GET", path, nil)
	out := new(AlertsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Alerts, nil
}
func (h *handler) Create(ctx context.Context, in *CreateIn) (*Project, error) {
	path := fmt.Sprintf("/project")
	b, err := h.doer.Do(ctx, "ProjectCreate", "POST", path, in)
	out := new(CreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Project, nil
}
func (h *handler) Delete(ctx context.Context, project string) error {
	path := fmt.Sprintf("/project/%s", project)
	_, err := h.doer.Do(ctx, "ProjectDelete", "DELETE", path, nil)
	return err
}
func (h *handler) GenerateSbomDownloadUrl(ctx context.Context, project string, fileFormat string) (string, error) {
	path := fmt.Sprintf("/project/%s/generate-sbom-download-url/%s", project, fileFormat)
	b, err := h.doer.Do(ctx, "ProjectGenerateSbomDownloadUrl", "GET", path, nil)
	out := new(GenerateSbomDownloadUrlOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return "", err
	}
	return out.DownloadUrl, nil
}
func (h *handler) Get(ctx context.Context, project string) (*Project, error) {
	path := fmt.Sprintf("/project/%s", project)
	b, err := h.doer.Do(ctx, "ProjectGet", "GET", path, nil)
	out := new(GetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Project, nil
}
func (h *handler) GetEventLogs(ctx context.Context, project string) ([]Event, error) {
	path := fmt.Sprintf("/project/%s/events", project)
	b, err := h.doer.Do(ctx, "ProjectGetEventLogs", "GET", path, nil)
	out := new(GetEventLogsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Events, nil
}
func (h *handler) Invite(ctx context.Context, project string, in *InviteIn) error {
	path := fmt.Sprintf("/project/%s/invite", project)
	_, err := h.doer.Do(ctx, "ProjectInvite", "POST", path, in)
	return err
}
func (h *handler) InviteAccept(ctx context.Context, project string, inviteVerificationCode string) (*InviteDetails, error) {
	path := fmt.Sprintf("/project/%s/invite/%s", project, inviteVerificationCode)
	b, err := h.doer.Do(ctx, "ProjectInviteAccept", "POST", path, nil)
	out := new(InviteAcceptOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.InviteDetails, nil
}
func (h *handler) InviteDelete(ctx context.Context, project string, invitedEmail string) error {
	path := fmt.Sprintf("/project/%s/invite/%s", project, invitedEmail)
	_, err := h.doer.Do(ctx, "ProjectInviteDelete", "DELETE", path, nil)
	return err
}
func (h *handler) List(ctx context.Context) (*ListOut, error) {
	path := fmt.Sprintf("/project")
	b, err := h.doer.Do(ctx, "ProjectList", "GET", path, nil)
	out := new(ListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) ListProjectVpcPeeringConnectionTypes(ctx context.Context, project string) ([]VpcPeeringConnectionType, error) {
	path := fmt.Sprintf("/project/%s/vpc-peering-connection-types", project)
	b, err := h.doer.Do(ctx, "ListProjectVpcPeeringConnectionTypes", "GET", path, nil)
	out := new(ListProjectVpcPeeringConnectionTypesOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.VpcPeeringConnectionTypes, nil
}
func (h *handler) TagsList(ctx context.Context, project string) (map[string]string, error) {
	path := fmt.Sprintf("/project/%s/tags", project)
	b, err := h.doer.Do(ctx, "ProjectTagsList", "GET", path, nil)
	out := new(TagsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Tags, nil
}
func (h *handler) TagsReplace(ctx context.Context, project string, in *TagsReplaceIn) error {
	path := fmt.Sprintf("/project/%s/tags", project)
	_, err := h.doer.Do(ctx, "ProjectTagsReplace", "PUT", path, in)
	return err
}
func (h *handler) TagsUpdate(ctx context.Context, project string, in *TagsUpdateIn) error {
	path := fmt.Sprintf("/project/%s/tags", project)
	_, err := h.doer.Do(ctx, "ProjectTagsUpdate", "PATCH", path, in)
	return err
}
func (h *handler) Update(ctx context.Context, project string, in *UpdateIn) (*Project, error) {
	path := fmt.Sprintf("/project/%s", project)
	b, err := h.doer.Do(ctx, "ProjectUpdate", "PUT", path, in)
	out := new(UpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Project, nil
}
func (h *handler) UserList(ctx context.Context, project string) (*UserListOut, error) {
	path := fmt.Sprintf("/project/%s/users", project)
	b, err := h.doer.Do(ctx, "ProjectUserList", "GET", path, nil)
	out := new(UserListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) UserRemove(ctx context.Context, project string, userEmail string) error {
	path := fmt.Sprintf("/project/%s/user/%s", project, userEmail)
	_, err := h.doer.Do(ctx, "ProjectUserRemove", "DELETE", path, nil)
	return err
}
func (h *handler) UserUpdate(ctx context.Context, project string, userEmail string, in *UserUpdateIn) error {
	path := fmt.Sprintf("/project/%s/user/%s", project, userEmail)
	_, err := h.doer.Do(ctx, "ProjectUserUpdate", "PUT", path, in)
	return err
}
func (h *handler) VpcCreate(ctx context.Context, project string, in *VpcCreateIn) (*VpcCreateOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs", project)
	b, err := h.doer.Do(ctx, "VpcCreate", "POST", path, in)
	out := new(VpcCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) VpcDelete(ctx context.Context, project string, vpcId string) (*VpcDeleteOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s", project, vpcId)
	b, err := h.doer.Do(ctx, "VpcDelete", "DELETE", path, nil)
	out := new(VpcDeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) VpcGet(ctx context.Context, project string, vpcId string) (*VpcGetOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s", project, vpcId)
	b, err := h.doer.Do(ctx, "VpcGet", "GET", path, nil)
	out := new(VpcGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) VpcList(ctx context.Context, project string) ([]Vpc, error) {
	path := fmt.Sprintf("/project/%s/vpcs", project)
	b, err := h.doer.Do(ctx, "VpcList", "GET", path, nil)
	out := new(VpcListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Vpcs, nil
}
func (h *handler) VpcPeeringConnectionCreate(ctx context.Context, project string, vpcId string, in *VpcPeeringConnectionCreateIn) (*VpcPeeringConnectionCreateOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s/peering-connections", project, vpcId)
	b, err := h.doer.Do(ctx, "VpcPeeringConnectionCreate", "POST", path, in)
	out := new(VpcPeeringConnectionCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) VpcPeeringConnectionDelete(ctx context.Context, project string, vpcId string, peerCloudAccount string, peerVpc string) (*VpcPeeringConnectionDeleteOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s/peering-connections/peer-accounts/%s/peer-vpcs/%s", project, vpcId, peerCloudAccount, peerVpc)
	b, err := h.doer.Do(ctx, "VpcPeeringConnectionDelete", "DELETE", path, nil)
	out := new(VpcPeeringConnectionDeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) VpcPeeringConnectionUpdate(ctx context.Context, project string, vpcId string, in *VpcPeeringConnectionUpdateIn) (*VpcPeeringConnectionUpdateOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s/user-peer-network-cidrs", project, vpcId)
	b, err := h.doer.Do(ctx, "VpcPeeringConnectionUpdate", "PUT", path, in)
	out := new(VpcPeeringConnectionUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) VpcPeeringConnectionWithRegionDelete(ctx context.Context, project string, vpcId string, peerCloudAccount string, peerVpc string, peerRegion string) (*VpcPeeringConnectionWithRegionDeleteOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s/peering-connections/peer-accounts/%s/peer-vpcs/%s/peer-regions/%s", project, vpcId, peerCloudAccount, peerVpc, peerRegion)
	b, err := h.doer.Do(ctx, "VpcPeeringConnectionWithRegionDelete", "DELETE", path, nil)
	out := new(VpcPeeringConnectionWithRegionDeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) VpcPeeringConnectionWithResourceGroupDelete(ctx context.Context, project string, vpcId string, peerCloudAccount string, peerResourceGroup string, peerVpc string) (*VpcPeeringConnectionWithResourceGroupDeleteOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s/peering-connections/peer-accounts/%s/peer-resource-groups/%s/peer-vpcs/%s", project, vpcId, peerCloudAccount, peerResourceGroup, peerVpc)
	b, err := h.doer.Do(ctx, "VpcPeeringConnectionWithResourceGroupDelete", "DELETE", path, nil)
	out := new(VpcPeeringConnectionWithResourceGroupDeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type Add struct {
	Cidr              string `json:"cidr"`
	PeerCloudAccount  string `json:"peer_cloud_account"`
	PeerResourceGroup string `json:"peer_resource_group,omitempty"`
	PeerVpc           string `json:"peer_vpc"`
}
type Alert struct {
	CreateTime  time.Time `json:"create_time"`
	Event       string    `json:"event"`
	ProjectName string    `json:"project_name"`
	ServiceName string    `json:"service_name,omitempty"`
	ServiceType string    `json:"service_type,omitempty"`
	Severity    string    `json:"severity"`
}
type AlertsListOut struct {
	Alerts []Alert `json:"alerts"`
}
type AnyType string

const (
	AnyTypeAdmin     AnyType = "admin"
	AnyTypeDeveloper AnyType = "developer"
	AnyTypeOperator  AnyType = "operator"
	AnyTypeReadOnly  AnyType = "read_only"
)

type BillingCurrencyType string

const (
	BillingCurrencyTypeAud BillingCurrencyType = "AUD"
	BillingCurrencyTypeCad BillingCurrencyType = "CAD"
	BillingCurrencyTypeChf BillingCurrencyType = "CHF"
	BillingCurrencyTypeDkk BillingCurrencyType = "DKK"
	BillingCurrencyTypeEur BillingCurrencyType = "EUR"
	BillingCurrencyTypeGbp BillingCurrencyType = "GBP"
	BillingCurrencyTypeJpy BillingCurrencyType = "JPY"
	BillingCurrencyTypeNok BillingCurrencyType = "NOK"
	BillingCurrencyTypeNzd BillingCurrencyType = "NZD"
	BillingCurrencyTypeSek BillingCurrencyType = "SEK"
	BillingCurrencyTypeSgd BillingCurrencyType = "SGD"
	BillingCurrencyTypeUsd BillingCurrencyType = "USD"
)

type BillingEmail struct {
	Email string `json:"email"`
}
type CardInfo struct {
	Brand       string `json:"brand"`
	CardId      string `json:"card_id"`
	Country     string `json:"country"`
	CountryCode string `json:"country_code"`
	ExpMonth    int    `json:"exp_month"`
	ExpYear     int    `json:"exp_year"`
	Last4       string `json:"last4"`
	Name        string `json:"name"`
	UserEmail   string `json:"user_email"`
}
type CreateIn struct {
	AccountId                    string              `json:"account_id,omitempty"`
	AddAccountOwnersAdminAccess  *bool               `json:"add_account_owners_admin_access,omitempty"`
	AddressLines                 []string            `json:"address_lines,omitempty"`
	BillingAddress               string              `json:"billing_address,omitempty"`
	BillingCurrency              BillingCurrencyType `json:"billing_currency,omitempty"`
	BillingEmails                []BillingEmail      `json:"billing_emails,omitempty"`
	BillingExtraText             string              `json:"billing_extra_text,omitempty"`
	BillingGroupId               string              `json:"billing_group_id,omitempty"`
	CardId                       string              `json:"card_id,omitempty"`
	City                         string              `json:"city,omitempty"`
	Cloud                        string              `json:"cloud,omitempty"`
	Company                      string              `json:"company,omitempty"`
	CopyFromProject              string              `json:"copy_from_project,omitempty"`
	CopyTags                     *bool               `json:"copy_tags,omitempty"`
	CountryCode                  string              `json:"country_code,omitempty"`
	Project                      string              `json:"project"`
	State                        string              `json:"state,omitempty"`
	Tags                         map[string]string   `json:"tags,omitempty"`
	TechEmails                   []TechEmail         `json:"tech_emails,omitempty"`
	UseSourceProjectBillingGroup *bool               `json:"use_source_project_billing_group,omitempty"`
	VatId                        string              `json:"vat_id,omitempty"`
	ZipCode                      string              `json:"zip_code,omitempty"`
}
type CreateOut struct {
	Project *Project `json:"project"`
}
type Elasticsearch struct {
	EolDate string `json:"eol_date"`
	Version string `json:"version"`
}
type EndOfLifeExtension struct {
	Elasticsearch *Elasticsearch `json:"elasticsearch,omitempty"`
}
type Event struct {
	Actor       string    `json:"actor"`
	EventDesc   string    `json:"event_desc"`
	Id          string    `json:"id"`
	ServiceName string    `json:"service_name"`
	Time        time.Time `json:"time"`
	EventType   string    `json:"event_type"`
}
type GenerateSbomDownloadUrlOut struct {
	DownloadUrl string `json:"download_url"`
}
type GetEventLogsOut struct {
	Events []Event `json:"events"`
}
type GetOut struct {
	Project *Project `json:"project"`
}
type GroupUser struct {
	MemberType  MemberType `json:"member_type"`
	RealName    string     `json:"real_name"`
	UserEmail   string     `json:"user_email"`
	UserGroupId string     `json:"user_group_id"`
}
type Invitation struct {
	InviteTime        time.Time  `json:"invite_time"`
	InvitedUserEmail  string     `json:"invited_user_email"`
	InvitingUserEmail string     `json:"inviting_user_email"`
	MemberType        MemberType `json:"member_type"`
}
type InviteAcceptOut struct {
	InviteDetails *InviteDetails `json:"invite_details"`
}
type InviteDetails struct {
	UserEmail string `json:"user_email"`
}
type InviteIn struct {
	MemberType MemberType `json:"member_type,omitempty"`
	UserEmail  string     `json:"user_email"`
}
type ListOut struct {
	ProjectMembership  *ProjectMembership  `json:"project_membership"`
	ProjectMemberships *ProjectMemberships `json:"project_memberships,omitempty"`
	Projects           []Project           `json:"projects"`
}
type ListProjectVpcPeeringConnectionTypesOut struct {
	VpcPeeringConnectionTypes []VpcPeeringConnectionType `json:"vpc_peering_connection_types"`
}
type MemberType string

const (
	MemberTypeAdmin     MemberType = "admin"
	MemberTypeDeveloper MemberType = "developer"
	MemberTypeOperator  MemberType = "operator"
	MemberTypeReadOnly  MemberType = "read_only"
)

func MemberTypeChoices() []string {
	return []string{"admin", "developer", "operator", "read_only"}
}

type PeeringConnection struct {
	PeerAzureAppId       string   `json:"peer_azure_app_id,omitempty"`
	PeerAzureTenantId    string   `json:"peer_azure_tenant_id,omitempty"`
	PeerCloudAccount     string   `json:"peer_cloud_account"`
	PeerRegion           string   `json:"peer_region,omitempty"`
	PeerResourceGroup    string   `json:"peer_resource_group,omitempty"`
	PeerVpc              string   `json:"peer_vpc"`
	UserPeerNetworkCidrs []string `json:"user_peer_network_cidrs,omitempty"`
}
type PeeringConnectionItem struct {
	CreateTime               time.Time                                     `json:"create_time"`
	PeerAzureAppId           string                                        `json:"peer_azure_app_id"`
	PeerAzureTenantId        string                                        `json:"peer_azure_tenant_id"`
	PeerCloudAccount         string                                        `json:"peer_cloud_account"`
	PeerRegion               string                                        `json:"peer_region,omitempty"`
	PeerResourceGroup        string                                        `json:"peer_resource_group"`
	PeerVpc                  string                                        `json:"peer_vpc"`
	State                    PeeringConnectionItemStateType                `json:"state"`
	VpcPeeringConnectionType PeeringConnectionItemVpcPeeringConnectionType `json:"vpc_peering_connection_type"`
	StateInfo                *StateInfo                                    `json:"state_info"`
	UpdateTime               time.Time                                     `json:"update_time"`
	UserPeerNetworkCidrs     []string                                      `json:"user_peer_network_cidrs"`
}
type PeeringConnectionItemStateType string

const (
	PeeringConnectionItemStateTypeActive                PeeringConnectionItemStateType = "ACTIVE"
	PeeringConnectionItemStateTypeApproved              PeeringConnectionItemStateType = "APPROVED"
	PeeringConnectionItemStateTypeApprovedPeerRequested PeeringConnectionItemStateType = "APPROVED_PEER_REQUESTED"
	PeeringConnectionItemStateTypeDeleted               PeeringConnectionItemStateType = "DELETED"
	PeeringConnectionItemStateTypeDeletedByPeer         PeeringConnectionItemStateType = "DELETED_BY_PEER"
	PeeringConnectionItemStateTypeDeleting              PeeringConnectionItemStateType = "DELETING"
	PeeringConnectionItemStateTypeInvalidSpecification  PeeringConnectionItemStateType = "INVALID_SPECIFICATION"
	PeeringConnectionItemStateTypePendingPeer           PeeringConnectionItemStateType = "PENDING_PEER"
	PeeringConnectionItemStateTypeRejectedByPeer        PeeringConnectionItemStateType = "REJECTED_BY_PEER"
)

type PeeringConnectionItemVpcPeeringConnectionType string

const (
	PeeringConnectionItemVpcPeeringConnectionTypeAwsTgwVpcAttachment     PeeringConnectionItemVpcPeeringConnectionType = "aws-tgw-vpc-attachment"
	PeeringConnectionItemVpcPeeringConnectionTypeAwsVpcPeeringConnection PeeringConnectionItemVpcPeeringConnectionType = "aws-vpc-peering-connection"
	PeeringConnectionItemVpcPeeringConnectionTypeAzureVnetPeering        PeeringConnectionItemVpcPeeringConnectionType = "azure-vnet-peering"
	PeeringConnectionItemVpcPeeringConnectionTypeGoogleVpcPeering        PeeringConnectionItemVpcPeeringConnectionType = "google-vpc-peering"
	PeeringConnectionItemVpcPeeringConnectionTypeUpcloudVpcPeering       PeeringConnectionItemVpcPeeringConnectionType = "upcloud-vpc-peering"
)

type Project struct {
	AccountId             string              `json:"account_id"`
	AccountName           string              `json:"account_name,omitempty"`
	AddressLines          []string            `json:"address_lines,omitempty"`
	AvailableCredits      string              `json:"available_credits,omitempty"`
	BillingAddress        string              `json:"billing_address"`
	BillingCurrency       BillingCurrencyType `json:"billing_currency,omitempty"`
	BillingEmails         []BillingEmail      `json:"billing_emails"`
	BillingExtraText      string              `json:"billing_extra_text,omitempty"`
	BillingGroupId        string              `json:"billing_group_id"`
	BillingGroupName      string              `json:"billing_group_name"`
	CardInfo              *CardInfo           `json:"card_info,omitempty"`
	City                  string              `json:"city,omitempty"`
	Company               string              `json:"company,omitempty"`
	Country               string              `json:"country"`
	CountryCode           string              `json:"country_code"`
	DefaultCloud          string              `json:"default_cloud"`
	EndOfLifeExtension    *EndOfLifeExtension `json:"end_of_life_extension,omitempty"`
	EstimatedBalance      string              `json:"estimated_balance"`
	EstimatedBalanceLocal string              `json:"estimated_balance_local,omitempty"`
	Features              map[string]any      `json:"features,omitempty"`
	ProjectName           string              `json:"project_name"`
	PaymentMethod         string              `json:"payment_method"`
	State                 string              `json:"state,omitempty"`
	Tags                  map[string]string   `json:"tags,omitempty"`
	TechEmails            []TechEmail         `json:"tech_emails,omitempty"`
	TenantId              string              `json:"tenant_id,omitempty"`
	TrialExpirationTime   *time.Time          `json:"trial_expiration_time,omitempty"`
	VatId                 string              `json:"vat_id"`
	ZipCode               string              `json:"zip_code,omitempty"`
}
type ProjectMembership struct {
	Any AnyType `json:"ANY,omitempty"`
}
type ProjectMemberships struct {
	Any []string `json:"ANY,omitempty"`
}
type StateInfo struct {
	Message  string    `json:"message"`
	Type     string    `json:"type"`
	Warnings []Warning `json:"warnings,omitempty"`
}
type StateType string

const (
	StateTypeActive   StateType = "ACTIVE"
	StateTypeApproved StateType = "APPROVED"
	StateTypeDeleted  StateType = "DELETED"
	StateTypeDeleting StateType = "DELETING"
)

type TagsListOut struct {
	Tags map[string]string `json:"tags,omitempty"`
}
type TagsReplaceIn struct {
	Tags map[string]string `json:"tags,omitempty"`
}
type TagsUpdateIn struct {
	Tags map[string]string `json:"tags,omitempty"`
}
type TechEmail struct {
	Email string `json:"email"`
}
type Type string

const (
	TypeOverlappingPeerVpcIpRanges Type = "overlapping-peer-vpc-ip-ranges"
)

type UpdateIn struct {
	AccountId                   string              `json:"account_id,omitempty"`
	AddAccountOwnersAdminAccess *bool               `json:"add_account_owners_admin_access,omitempty"`
	AddressLines                []string            `json:"address_lines,omitempty"`
	BillingAddress              string              `json:"billing_address,omitempty"`
	BillingCurrency             BillingCurrencyType `json:"billing_currency,omitempty"`
	BillingEmails               []BillingEmail      `json:"billing_emails,omitempty"`
	BillingExtraText            string              `json:"billing_extra_text,omitempty"`
	BillingGroupId              string              `json:"billing_group_id,omitempty"`
	CardId                      string              `json:"card_id,omitempty"`
	City                        string              `json:"city,omitempty"`
	Cloud                       string              `json:"cloud,omitempty"`
	Company                     string              `json:"company,omitempty"`
	CountryCode                 string              `json:"country_code,omitempty"`
	ProjectName                 string              `json:"project_name,omitempty"`
	State                       string              `json:"state,omitempty"`
	Tags                        map[string]string   `json:"tags,omitempty"`
	TechEmails                  []TechEmail         `json:"tech_emails,omitempty"`
	VatId                       string              `json:"vat_id,omitempty"`
	ZipCode                     string              `json:"zip_code,omitempty"`
}
type UpdateOut struct {
	Project *Project `json:"project"`
}
type User struct {
	Auth           []string   `json:"auth"`
	BillingContact bool       `json:"billing_contact"`
	CreateTime     time.Time  `json:"create_time"`
	UserEmail      string     `json:"user_email"`
	MemberType     MemberType `json:"member_type"`
	RealName       string     `json:"real_name,omitempty"`
	TeamId         string     `json:"team_id"`
	TeamName       string     `json:"team_name"`
}
type UserListOut struct {
	GroupUsers  []GroupUser  `json:"group_users"`
	Invitations []Invitation `json:"invitations"`
	Users       []User       `json:"users"`
}
type UserUpdateIn struct {
	MemberType MemberType `json:"member_type"`
}
type Vpc struct {
	CloudName    string    `json:"cloud_name"`
	CreateTime   time.Time `json:"create_time"`
	NetworkCidr  string    `json:"network_cidr"`
	ProjectVpcId string    `json:"project_vpc_id"`
	State        StateType `json:"state"`
	UpdateTime   time.Time `json:"update_time"`
}
type VpcCreateIn struct {
	CloudName          string              `json:"cloud_name"`
	NetworkCidr        string              `json:"network_cidr"`
	PeeringConnections []PeeringConnection `json:"peering_connections"`
}
type VpcCreateOut struct {
	CloudName                          string                  `json:"cloud_name"`
	CreateTime                         time.Time               `json:"create_time"`
	NetworkCidr                        string                  `json:"network_cidr"`
	PeeringConnections                 []PeeringConnectionItem `json:"peering_connections"`
	PendingBuildOnlyPeeringConnections string                  `json:"pending_build_only_peering_connections,omitempty"`
	ProjectVpcId                       string                  `json:"project_vpc_id"`
	State                              StateType               `json:"state"`
	UpdateTime                         time.Time               `json:"update_time"`
}
type VpcDeleteOut struct {
	CloudName                          string                  `json:"cloud_name"`
	CreateTime                         time.Time               `json:"create_time"`
	NetworkCidr                        string                  `json:"network_cidr"`
	PeeringConnections                 []PeeringConnectionItem `json:"peering_connections"`
	PendingBuildOnlyPeeringConnections string                  `json:"pending_build_only_peering_connections,omitempty"`
	ProjectVpcId                       string                  `json:"project_vpc_id"`
	State                              StateType               `json:"state"`
	UpdateTime                         time.Time               `json:"update_time"`
}
type VpcGetOut struct {
	CloudName                          string                  `json:"cloud_name"`
	CreateTime                         time.Time               `json:"create_time"`
	NetworkCidr                        string                  `json:"network_cidr"`
	PeeringConnections                 []PeeringConnectionItem `json:"peering_connections"`
	PendingBuildOnlyPeeringConnections string                  `json:"pending_build_only_peering_connections,omitempty"`
	ProjectVpcId                       string                  `json:"project_vpc_id"`
	State                              StateType               `json:"state"`
	UpdateTime                         time.Time               `json:"update_time"`
}
type VpcListOut struct {
	Vpcs []Vpc `json:"vpcs"`
}
type VpcPeeringConnectionCreateIn struct {
	PeerAzureAppId       string   `json:"peer_azure_app_id,omitempty"`
	PeerAzureTenantId    string   `json:"peer_azure_tenant_id,omitempty"`
	PeerCloudAccount     string   `json:"peer_cloud_account"`
	PeerRegion           string   `json:"peer_region,omitempty"`
	PeerResourceGroup    string   `json:"peer_resource_group,omitempty"`
	PeerVpc              string   `json:"peer_vpc"`
	UserPeerNetworkCidrs []string `json:"user_peer_network_cidrs,omitempty"`
}
type VpcPeeringConnectionCreateOut struct {
	CreateTime               time.Time                                             `json:"create_time"`
	PeerAzureAppId           string                                                `json:"peer_azure_app_id"`
	PeerAzureTenantId        string                                                `json:"peer_azure_tenant_id"`
	PeerCloudAccount         string                                                `json:"peer_cloud_account"`
	PeerRegion               string                                                `json:"peer_region,omitempty"`
	PeerResourceGroup        string                                                `json:"peer_resource_group"`
	PeerVpc                  string                                                `json:"peer_vpc"`
	StateInfo                *StateInfo                                            `json:"state_info"`
	UpdateTime               time.Time                                             `json:"update_time"`
	UserPeerNetworkCidrs     []string                                              `json:"user_peer_network_cidrs"`
	State                    VpcPeeringConnectionCreateOutStateType                `json:"state"`
	VpcPeeringConnectionType VpcPeeringConnectionCreateOutVpcPeeringConnectionType `json:"vpc_peering_connection_type"`
}
type VpcPeeringConnectionCreateOutStateType string

const (
	VpcPeeringConnectionCreateOutStateTypeActive                VpcPeeringConnectionCreateOutStateType = "ACTIVE"
	VpcPeeringConnectionCreateOutStateTypeApproved              VpcPeeringConnectionCreateOutStateType = "APPROVED"
	VpcPeeringConnectionCreateOutStateTypeApprovedPeerRequested VpcPeeringConnectionCreateOutStateType = "APPROVED_PEER_REQUESTED"
	VpcPeeringConnectionCreateOutStateTypeDeleted               VpcPeeringConnectionCreateOutStateType = "DELETED"
	VpcPeeringConnectionCreateOutStateTypeDeletedByPeer         VpcPeeringConnectionCreateOutStateType = "DELETED_BY_PEER"
	VpcPeeringConnectionCreateOutStateTypeDeleting              VpcPeeringConnectionCreateOutStateType = "DELETING"
	VpcPeeringConnectionCreateOutStateTypeInvalidSpecification  VpcPeeringConnectionCreateOutStateType = "INVALID_SPECIFICATION"
	VpcPeeringConnectionCreateOutStateTypePendingPeer           VpcPeeringConnectionCreateOutStateType = "PENDING_PEER"
	VpcPeeringConnectionCreateOutStateTypeRejectedByPeer        VpcPeeringConnectionCreateOutStateType = "REJECTED_BY_PEER"
)

type VpcPeeringConnectionCreateOutVpcPeeringConnectionType string

const (
	VpcPeeringConnectionCreateOutVpcPeeringConnectionTypeAwsTgwVpcAttachment     VpcPeeringConnectionCreateOutVpcPeeringConnectionType = "aws-tgw-vpc-attachment"
	VpcPeeringConnectionCreateOutVpcPeeringConnectionTypeAwsVpcPeeringConnection VpcPeeringConnectionCreateOutVpcPeeringConnectionType = "aws-vpc-peering-connection"
	VpcPeeringConnectionCreateOutVpcPeeringConnectionTypeAzureVnetPeering        VpcPeeringConnectionCreateOutVpcPeeringConnectionType = "azure-vnet-peering"
	VpcPeeringConnectionCreateOutVpcPeeringConnectionTypeGoogleVpcPeering        VpcPeeringConnectionCreateOutVpcPeeringConnectionType = "google-vpc-peering"
	VpcPeeringConnectionCreateOutVpcPeeringConnectionTypeUpcloudVpcPeering       VpcPeeringConnectionCreateOutVpcPeeringConnectionType = "upcloud-vpc-peering"
)

type VpcPeeringConnectionDeleteOut struct {
	CreateTime               time.Time                                             `json:"create_time"`
	PeerAzureAppId           string                                                `json:"peer_azure_app_id"`
	PeerAzureTenantId        string                                                `json:"peer_azure_tenant_id"`
	PeerCloudAccount         string                                                `json:"peer_cloud_account"`
	PeerRegion               string                                                `json:"peer_region,omitempty"`
	PeerResourceGroup        string                                                `json:"peer_resource_group"`
	PeerVpc                  string                                                `json:"peer_vpc"`
	StateInfo                *StateInfo                                            `json:"state_info"`
	UpdateTime               time.Time                                             `json:"update_time"`
	UserPeerNetworkCidrs     []string                                              `json:"user_peer_network_cidrs"`
	State                    VpcPeeringConnectionDeleteOutStateType                `json:"state"`
	VpcPeeringConnectionType VpcPeeringConnectionDeleteOutVpcPeeringConnectionType `json:"vpc_peering_connection_type"`
}
type VpcPeeringConnectionDeleteOutStateType string

const (
	VpcPeeringConnectionDeleteOutStateTypeActive                VpcPeeringConnectionDeleteOutStateType = "ACTIVE"
	VpcPeeringConnectionDeleteOutStateTypeApproved              VpcPeeringConnectionDeleteOutStateType = "APPROVED"
	VpcPeeringConnectionDeleteOutStateTypeApprovedPeerRequested VpcPeeringConnectionDeleteOutStateType = "APPROVED_PEER_REQUESTED"
	VpcPeeringConnectionDeleteOutStateTypeDeleted               VpcPeeringConnectionDeleteOutStateType = "DELETED"
	VpcPeeringConnectionDeleteOutStateTypeDeletedByPeer         VpcPeeringConnectionDeleteOutStateType = "DELETED_BY_PEER"
	VpcPeeringConnectionDeleteOutStateTypeDeleting              VpcPeeringConnectionDeleteOutStateType = "DELETING"
	VpcPeeringConnectionDeleteOutStateTypeInvalidSpecification  VpcPeeringConnectionDeleteOutStateType = "INVALID_SPECIFICATION"
	VpcPeeringConnectionDeleteOutStateTypePendingPeer           VpcPeeringConnectionDeleteOutStateType = "PENDING_PEER"
	VpcPeeringConnectionDeleteOutStateTypeRejectedByPeer        VpcPeeringConnectionDeleteOutStateType = "REJECTED_BY_PEER"
)

type VpcPeeringConnectionDeleteOutVpcPeeringConnectionType string

const (
	VpcPeeringConnectionDeleteOutVpcPeeringConnectionTypeAwsTgwVpcAttachment     VpcPeeringConnectionDeleteOutVpcPeeringConnectionType = "aws-tgw-vpc-attachment"
	VpcPeeringConnectionDeleteOutVpcPeeringConnectionTypeAwsVpcPeeringConnection VpcPeeringConnectionDeleteOutVpcPeeringConnectionType = "aws-vpc-peering-connection"
	VpcPeeringConnectionDeleteOutVpcPeeringConnectionTypeAzureVnetPeering        VpcPeeringConnectionDeleteOutVpcPeeringConnectionType = "azure-vnet-peering"
	VpcPeeringConnectionDeleteOutVpcPeeringConnectionTypeGoogleVpcPeering        VpcPeeringConnectionDeleteOutVpcPeeringConnectionType = "google-vpc-peering"
	VpcPeeringConnectionDeleteOutVpcPeeringConnectionTypeUpcloudVpcPeering       VpcPeeringConnectionDeleteOutVpcPeeringConnectionType = "upcloud-vpc-peering"
)

type VpcPeeringConnectionType struct {
	CloudName                string                                           `json:"cloud_name"`
	PriceUsd                 string                                           `json:"price_usd"`
	VpcPeeringConnectionType VpcPeeringConnectionTypeVpcPeeringConnectionType `json:"vpc_peering_connection_type"`
}
type VpcPeeringConnectionTypeVpcPeeringConnectionType string

const (
	VpcPeeringConnectionTypeVpcPeeringConnectionTypeAwsTgwVpcAttachment     VpcPeeringConnectionTypeVpcPeeringConnectionType = "aws-tgw-vpc-attachment"
	VpcPeeringConnectionTypeVpcPeeringConnectionTypeAwsVpcPeeringConnection VpcPeeringConnectionTypeVpcPeeringConnectionType = "aws-vpc-peering-connection"
	VpcPeeringConnectionTypeVpcPeeringConnectionTypeAzureVnetPeering        VpcPeeringConnectionTypeVpcPeeringConnectionType = "azure-vnet-peering"
	VpcPeeringConnectionTypeVpcPeeringConnectionTypeGoogleVpcPeering        VpcPeeringConnectionTypeVpcPeeringConnectionType = "google-vpc-peering"
	VpcPeeringConnectionTypeVpcPeeringConnectionTypeUpcloudVpcPeering       VpcPeeringConnectionTypeVpcPeeringConnectionType = "upcloud-vpc-peering"
)

type VpcPeeringConnectionUpdateIn struct {
	Add    []Add    `json:"add,omitempty"`
	Delete []string `json:"delete,omitempty"`
}
type VpcPeeringConnectionUpdateOut struct {
	CloudName                          string                  `json:"cloud_name"`
	CreateTime                         time.Time               `json:"create_time"`
	NetworkCidr                        string                  `json:"network_cidr"`
	PeeringConnections                 []PeeringConnectionItem `json:"peering_connections"`
	PendingBuildOnlyPeeringConnections string                  `json:"pending_build_only_peering_connections,omitempty"`
	ProjectVpcId                       string                  `json:"project_vpc_id"`
	State                              StateType               `json:"state"`
	UpdateTime                         time.Time               `json:"update_time"`
}
type VpcPeeringConnectionWithRegionDeleteOut struct {
	CreateTime               time.Time                                                       `json:"create_time"`
	PeerAzureAppId           string                                                          `json:"peer_azure_app_id"`
	PeerAzureTenantId        string                                                          `json:"peer_azure_tenant_id"`
	PeerCloudAccount         string                                                          `json:"peer_cloud_account"`
	PeerRegion               string                                                          `json:"peer_region,omitempty"`
	PeerResourceGroup        string                                                          `json:"peer_resource_group"`
	PeerVpc                  string                                                          `json:"peer_vpc"`
	StateInfo                *StateInfo                                                      `json:"state_info"`
	UpdateTime               time.Time                                                       `json:"update_time"`
	UserPeerNetworkCidrs     []string                                                        `json:"user_peer_network_cidrs"`
	State                    VpcPeeringConnectionWithRegionDeleteOutStateType                `json:"state"`
	VpcPeeringConnectionType VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionType `json:"vpc_peering_connection_type"`
}
type VpcPeeringConnectionWithRegionDeleteOutStateType string

const (
	VpcPeeringConnectionWithRegionDeleteOutStateTypeActive                VpcPeeringConnectionWithRegionDeleteOutStateType = "ACTIVE"
	VpcPeeringConnectionWithRegionDeleteOutStateTypeApproved              VpcPeeringConnectionWithRegionDeleteOutStateType = "APPROVED"
	VpcPeeringConnectionWithRegionDeleteOutStateTypeApprovedPeerRequested VpcPeeringConnectionWithRegionDeleteOutStateType = "APPROVED_PEER_REQUESTED"
	VpcPeeringConnectionWithRegionDeleteOutStateTypeDeleted               VpcPeeringConnectionWithRegionDeleteOutStateType = "DELETED"
	VpcPeeringConnectionWithRegionDeleteOutStateTypeDeletedByPeer         VpcPeeringConnectionWithRegionDeleteOutStateType = "DELETED_BY_PEER"
	VpcPeeringConnectionWithRegionDeleteOutStateTypeDeleting              VpcPeeringConnectionWithRegionDeleteOutStateType = "DELETING"
	VpcPeeringConnectionWithRegionDeleteOutStateTypeInvalidSpecification  VpcPeeringConnectionWithRegionDeleteOutStateType = "INVALID_SPECIFICATION"
	VpcPeeringConnectionWithRegionDeleteOutStateTypePendingPeer           VpcPeeringConnectionWithRegionDeleteOutStateType = "PENDING_PEER"
	VpcPeeringConnectionWithRegionDeleteOutStateTypeRejectedByPeer        VpcPeeringConnectionWithRegionDeleteOutStateType = "REJECTED_BY_PEER"
)

type VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionType string

const (
	VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionTypeAwsTgwVpcAttachment     VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionType = "aws-tgw-vpc-attachment"
	VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionTypeAwsVpcPeeringConnection VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionType = "aws-vpc-peering-connection"
	VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionTypeAzureVnetPeering        VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionType = "azure-vnet-peering"
	VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionTypeGoogleVpcPeering        VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionType = "google-vpc-peering"
	VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionTypeUpcloudVpcPeering       VpcPeeringConnectionWithRegionDeleteOutVpcPeeringConnectionType = "upcloud-vpc-peering"
)

type VpcPeeringConnectionWithResourceGroupDeleteOut struct {
	CreateTime               time.Time                                                              `json:"create_time"`
	PeerAzureAppId           string                                                                 `json:"peer_azure_app_id"`
	PeerAzureTenantId        string                                                                 `json:"peer_azure_tenant_id"`
	PeerCloudAccount         string                                                                 `json:"peer_cloud_account"`
	PeerRegion               string                                                                 `json:"peer_region,omitempty"`
	PeerResourceGroup        string                                                                 `json:"peer_resource_group"`
	PeerVpc                  string                                                                 `json:"peer_vpc"`
	StateInfo                *StateInfo                                                             `json:"state_info"`
	UpdateTime               time.Time                                                              `json:"update_time"`
	UserPeerNetworkCidrs     []string                                                               `json:"user_peer_network_cidrs"`
	State                    VpcPeeringConnectionWithResourceGroupDeleteOutStateType                `json:"state"`
	VpcPeeringConnectionType VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionType `json:"vpc_peering_connection_type"`
}
type VpcPeeringConnectionWithResourceGroupDeleteOutStateType string

const (
	VpcPeeringConnectionWithResourceGroupDeleteOutStateTypeActive                VpcPeeringConnectionWithResourceGroupDeleteOutStateType = "ACTIVE"
	VpcPeeringConnectionWithResourceGroupDeleteOutStateTypeApproved              VpcPeeringConnectionWithResourceGroupDeleteOutStateType = "APPROVED"
	VpcPeeringConnectionWithResourceGroupDeleteOutStateTypeApprovedPeerRequested VpcPeeringConnectionWithResourceGroupDeleteOutStateType = "APPROVED_PEER_REQUESTED"
	VpcPeeringConnectionWithResourceGroupDeleteOutStateTypeDeleted               VpcPeeringConnectionWithResourceGroupDeleteOutStateType = "DELETED"
	VpcPeeringConnectionWithResourceGroupDeleteOutStateTypeDeletedByPeer         VpcPeeringConnectionWithResourceGroupDeleteOutStateType = "DELETED_BY_PEER"
	VpcPeeringConnectionWithResourceGroupDeleteOutStateTypeDeleting              VpcPeeringConnectionWithResourceGroupDeleteOutStateType = "DELETING"
	VpcPeeringConnectionWithResourceGroupDeleteOutStateTypeInvalidSpecification  VpcPeeringConnectionWithResourceGroupDeleteOutStateType = "INVALID_SPECIFICATION"
	VpcPeeringConnectionWithResourceGroupDeleteOutStateTypePendingPeer           VpcPeeringConnectionWithResourceGroupDeleteOutStateType = "PENDING_PEER"
	VpcPeeringConnectionWithResourceGroupDeleteOutStateTypeRejectedByPeer        VpcPeeringConnectionWithResourceGroupDeleteOutStateType = "REJECTED_BY_PEER"
)

type VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionType string

const (
	VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionTypeAwsTgwVpcAttachment     VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionType = "aws-tgw-vpc-attachment"
	VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionTypeAwsVpcPeeringConnection VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionType = "aws-vpc-peering-connection"
	VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionTypeAzureVnetPeering        VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionType = "azure-vnet-peering"
	VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionTypeGoogleVpcPeering        VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionType = "google-vpc-peering"
	VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionTypeUpcloudVpcPeering       VpcPeeringConnectionWithResourceGroupDeleteOutVpcPeeringConnectionType = "upcloud-vpc-peering"
)

type Warning struct {
	ConflictingAwsAccountId              string `json:"conflicting_aws_account_id,omitempty"`
	ConflictingAwsVpcId                  string `json:"conflicting_aws_vpc_id,omitempty"`
	ConflictingAwsVpcPeeringConnectionId string `json:"conflicting_aws_vpc_peering_connection_id,omitempty"`
	Message                              string `json:"message"`
	Type                                 Type   `json:"type"`
}
