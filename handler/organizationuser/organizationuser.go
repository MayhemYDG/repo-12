// Code generated by Aiven. DO NOT EDIT.

package organizationuser

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// AuthenticationMethodsList list authentication methods for a user in the organization
	// OrganizationUserAuthenticationMethodsList GET /organization/{organization_id}/user/{member_user_id}/authentication_methods
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserAuthenticationMethodsList
	AuthenticationMethodsList(ctx context.Context, organizationId string, memberUserId string) ([]AuthenticationMethod, error)

	// Delete remove a user from the organization
	// OrganizationUserDelete DELETE /organization/{organization_id}/user/{member_user_id}
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserDelete
	Delete(ctx context.Context, organizationId string, memberUserId string) error

	// Get get details on a user of the organization
	// OrganizationUserGet GET /organization/{organization_id}/user/{member_user_id}
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserGet
	Get(ctx context.Context, organizationId string, memberUserId string) (*GetOut, error)

	// InvitationAccept accept a user invitation to the organization
	// OrganizationUserInvitationAccept POST /organization/{organization_id}/invitation/{user_email}
	// https://api.aiven.io/doc/#tag/Organizations/operation/OrganizationUserInvitationAccept
	InvitationAccept(ctx context.Context, organizationId string, userEmail string, in *InvitationAcceptIn) error

	// InvitationDelete remove an invitation to the organization
	// OrganizationUserInvitationDelete DELETE /organization/{organization_id}/invitation/{user_email}
	// https://api.aiven.io/doc/#tag/Organizations/operation/OrganizationUserInvitationDelete
	InvitationDelete(ctx context.Context, organizationId string, userEmail string) error

	// InvitationsList list user invitations to the organization
	// OrganizationUserInvitationsList GET /organization/{organization_id}/invitation
	// https://api.aiven.io/doc/#tag/Organizations/operation/OrganizationUserInvitationsList
	InvitationsList(ctx context.Context, organizationId string) ([]Invitation, error)

	// Invite invite a user to the organization
	// OrganizationUserInvite POST /organization/{organization_id}/invitation
	// https://api.aiven.io/doc/#tag/Organizations/operation/OrganizationUserInvite
	Invite(ctx context.Context, organizationId string, in *InviteIn) error

	// List list users of the organization
	// OrganizationUserList GET /organization/{organization_id}/user
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserList
	List(ctx context.Context, organizationId string) ([]User, error)

	// PasswordReset reset the password of a managed user in the organization
	// OrganizationUserPasswordReset POST /organization/{organization_id}/user/{member_user_id}/reset_password
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserPasswordReset
	PasswordReset(ctx context.Context, organizationId string, memberUserId string) error

	// RevokeToken revoke the token of a managed user in the organization
	// OrganizationUserRevokeToken DELETE /organization/{organization_id}/user/{member_user_id}/access-token/{token_prefix}
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserRevokeToken
	RevokeToken(ctx context.Context, organizationId string, memberUserId string, tokenPrefix string) error

	// Set add or modify a user of the organization
	// OrganizationUserSet PUT /organization/{organization_id}/user/{member_user_id}
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserSet
	Set(ctx context.Context, organizationId string, memberUserId string) (*SetOut, error)

	// TokensList list tokens from an organization's member
	// OrganizationUserTokensList GET /organization/{organization_id}/user/{member_user_id}/access-tokens
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserTokensList
	TokensList(ctx context.Context, organizationId string, memberUserId string) ([]Token, error)

	// Update update details on a user of the organization
	// OrganizationUserUpdate PATCH /organization/{organization_id}/user/{member_user_id}
	// https://api.aiven.io/doc/#tag/Users/operation/OrganizationUserUpdate
	Update(ctx context.Context, organizationId string, memberUserId string, in *UpdateIn) (*UpdateOut, error)
}

func NewHandler(doer doer) Handler {
	return &handler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type handler struct {
	doer doer
}

func (h *handler) AuthenticationMethodsList(ctx context.Context, organizationId string, memberUserId string) ([]AuthenticationMethod, error) {
	path := fmt.Sprintf("/organization/%s/user/%s/authentication_methods", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationUserAuthenticationMethodsList", "GET", path, nil)
	out := new(authenticationMethodsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AuthenticationMethods, nil
}
func (h *handler) Delete(ctx context.Context, organizationId string, memberUserId string) error {
	path := fmt.Sprintf("/organization/%s/user/%s", organizationId, memberUserId)
	_, err := h.doer.Do(ctx, "OrganizationUserDelete", "DELETE", path, nil)
	return err
}
func (h *handler) Get(ctx context.Context, organizationId string, memberUserId string) (*GetOut, error) {
	path := fmt.Sprintf("/organization/%s/user/%s", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationUserGet", "GET", path, nil)
	out := new(GetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) InvitationAccept(ctx context.Context, organizationId string, userEmail string, in *InvitationAcceptIn) error {
	path := fmt.Sprintf("/organization/%s/invitation/%s", organizationId, userEmail)
	_, err := h.doer.Do(ctx, "OrganizationUserInvitationAccept", "POST", path, in)
	return err
}
func (h *handler) InvitationDelete(ctx context.Context, organizationId string, userEmail string) error {
	path := fmt.Sprintf("/organization/%s/invitation/%s", organizationId, userEmail)
	_, err := h.doer.Do(ctx, "OrganizationUserInvitationDelete", "DELETE", path, nil)
	return err
}
func (h *handler) InvitationsList(ctx context.Context, organizationId string) ([]Invitation, error) {
	path := fmt.Sprintf("/organization/%s/invitation", organizationId)
	b, err := h.doer.Do(ctx, "OrganizationUserInvitationsList", "GET", path, nil)
	out := new(invitationsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Invitations, nil
}
func (h *handler) Invite(ctx context.Context, organizationId string, in *InviteIn) error {
	path := fmt.Sprintf("/organization/%s/invitation", organizationId)
	_, err := h.doer.Do(ctx, "OrganizationUserInvite", "POST", path, in)
	return err
}
func (h *handler) List(ctx context.Context, organizationId string) ([]User, error) {
	path := fmt.Sprintf("/organization/%s/user", organizationId)
	b, err := h.doer.Do(ctx, "OrganizationUserList", "GET", path, nil)
	out := new(listOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Users, nil
}
func (h *handler) PasswordReset(ctx context.Context, organizationId string, memberUserId string) error {
	path := fmt.Sprintf("/organization/%s/user/%s/reset_password", organizationId, memberUserId)
	_, err := h.doer.Do(ctx, "OrganizationUserPasswordReset", "POST", path, nil)
	return err
}
func (h *handler) RevokeToken(ctx context.Context, organizationId string, memberUserId string, tokenPrefix string) error {
	path := fmt.Sprintf("/organization/%s/user/%s/access-token/%s", organizationId, memberUserId, tokenPrefix)
	_, err := h.doer.Do(ctx, "OrganizationUserRevokeToken", "DELETE", path, nil)
	return err
}
func (h *handler) Set(ctx context.Context, organizationId string, memberUserId string) (*SetOut, error) {
	path := fmt.Sprintf("/organization/%s/user/%s", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationUserSet", "PUT", path, nil)
	out := new(SetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *handler) TokensList(ctx context.Context, organizationId string, memberUserId string) ([]Token, error) {
	path := fmt.Sprintf("/organization/%s/user/%s/access-tokens", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationUserTokensList", "GET", path, nil)
	out := new(tokensListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Tokens, nil
}
func (h *handler) Update(ctx context.Context, organizationId string, memberUserId string, in *UpdateIn) (*UpdateOut, error) {
	path := fmt.Sprintf("/organization/%s/user/%s", organizationId, memberUserId)
	b, err := h.doer.Do(ctx, "OrganizationUserUpdate", "PATCH", path, in)
	out := new(UpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type ActionType string

const (
	ActionTypeAccept ActionType = "accept"
)

func ActionTypeChoices() []string {
	return []string{"accept"}
}

type AuthenticationMethod struct {
	IsEnabled2Fa     *bool      `json:"is_enabled_2fa,omitempty"`
	LastUsedTime     *time.Time `json:"last_used_time,omitempty"`
	LocalProviderId  string     `json:"local_provider_id,omitempty"`
	MethodId         string     `json:"method_id,omitempty"`
	Name             string     `json:"name,omitempty"`
	OrganizationId   string     `json:"organization_id,omitempty"`
	RemoteProviderId string     `json:"remote_provider_id"`
	Type             string     `json:"type,omitempty"`
	UserEmail        string     `json:"user_email,omitempty"`
	UserId           string     `json:"user_id,omitempty"`
}
type authenticationMethodsListOut struct {
	AuthenticationMethods []AuthenticationMethod `json:"authentication_methods"`
}
type GetOut struct {
	IsSuperAdmin     bool      `json:"is_super_admin"`
	JoinTime         time.Time `json:"join_time"`
	LastActivityTime time.Time `json:"last_activity_time"`
	UserId           string    `json:"user_id"`
	UserInfo         *UserInfo `json:"user_info"`
}
type Info struct {
	City                   string    `json:"city,omitempty"`
	Country                string    `json:"country,omitempty"`
	CreateTime             time.Time `json:"create_time"`
	Department             string    `json:"department,omitempty"`
	IsApplicationUser      bool      `json:"is_application_user"`
	JobTitle               string    `json:"job_title,omitempty"`
	ManagedByScim          bool      `json:"managed_by_scim"`
	ManagingOrganizationId string    `json:"managing_organization_id,omitempty"`
	RealName               string    `json:"real_name"`
	State                  string    `json:"state"`
	UserEmail              string    `json:"user_email"`
}
type Invitation struct {
	CreateTime time.Time `json:"create_time"`
	ExpiryTime time.Time `json:"expiry_time"`
	InvitedBy  string    `json:"invited_by"`
	UserEmail  string    `json:"user_email"`
}
type InvitationAcceptIn struct {
	Action ActionType `json:"action,omitempty"`
}
type invitationsListOut struct {
	Invitations []Invitation `json:"invitations"`
}
type InviteIn struct {
	UserEmail string `json:"user_email"`
}
type listOut struct {
	Users []User `json:"users"`
}
type SetOut struct {
	IsSuperAdmin     bool      `json:"is_super_admin"`
	JoinTime         time.Time `json:"join_time"`
	LastActivityTime time.Time `json:"last_activity_time"`
	UserId           string    `json:"user_id"`
	UserInfo         *UserInfo `json:"user_info"`
}
type StateType string

const (
	StateTypeActive      StateType = "active"
	StateTypeDeactivated StateType = "deactivated"
	StateTypeDeleted     StateType = "deleted"
)

func StateTypeChoices() []string {
	return []string{"active", "deactivated", "deleted"}
}

type Token struct {
	Description   string    `json:"description"`
	LastIp        string    `json:"last_ip"`
	LastUsedTime  time.Time `json:"last_used_time"`
	LastUserAgent string    `json:"last_user_agent"`
	TokenPrefix   string    `json:"token_prefix"`
}
type tokensListOut struct {
	Tokens []Token `json:"tokens"`
}
type UpdateIn struct {
	City         string    `json:"city,omitempty"`
	Country      string    `json:"country,omitempty"`
	Department   string    `json:"department,omitempty"`
	IsSuperAdmin *bool     `json:"is_super_admin,omitempty"`
	JobTitle     string    `json:"job_title,omitempty"`
	RealName     string    `json:"real_name,omitempty"`
	State        StateType `json:"state,omitempty"`
}
type UpdateOut struct {
	IsSuperAdmin     bool      `json:"is_super_admin"`
	JoinTime         time.Time `json:"join_time"`
	LastActivityTime time.Time `json:"last_activity_time"`
	UserId           string    `json:"user_id"`
	UserInfo         *UserInfo `json:"user_info"`
}
type User struct {
	UserId           string    `json:"user_id"`
	UserInfo         *Info     `json:"user_info"`
	IsSuperAdmin     bool      `json:"is_super_admin"`
	JoinTime         time.Time `json:"join_time"`
	LastActivityTime time.Time `json:"last_activity_time"`
}
type UserInfo struct {
	City                   string    `json:"city,omitempty"`
	Country                string    `json:"country,omitempty"`
	CreateTime             time.Time `json:"create_time"`
	Department             string    `json:"department,omitempty"`
	IsApplicationUser      bool      `json:"is_application_user"`
	JobTitle               string    `json:"job_title,omitempty"`
	ManagedByScim          bool      `json:"managed_by_scim"`
	ManagingOrganizationId string    `json:"managing_organization_id,omitempty"`
	RealName               string    `json:"real_name"`
	State                  string    `json:"state"`
	UserEmail              string    `json:"user_email"`
}
